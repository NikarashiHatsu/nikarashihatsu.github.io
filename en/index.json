[{"content":" Welcome to Part 3 of this tutorial. We\u0026rsquo;ll continue on about converting UTF-16 and UTF-32 to the UTF-8 HTML Entity form that browser can read.\n3. Unicode UTF-16 dan UTF-32 As a reminder, I managed to find the proper RegEx pattern for UTF-16 and UTF-32 which is /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/. The next problem is how to convert the unicode code below into HTML Entity:\nUsing the preg_replace() function directly like this won\u0026rsquo;t work because we\u0026rsquo;re just adding a #\u0026amp;x at the beginning and a ; at the end.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); $unicode = preg_replace(\u0026#39;/(\\\\\\(u|U)[a-fA-F0-9]{4,8})/\u0026#39;, \u0026#39;#\u0026amp;x$1;\u0026#39;, $monospace); return $unicode; } } Totally wrong because if you look at it, the result will be like this:\nDead end. I\u0026rsquo;m stuck. Can\u0026rsquo;t think any further. I got up from the workspace, took a little walk, sipped my slightly cold coffee, took a breath, then continued coding again.\nThe problem above made me think \u0026ldquo;the pattern that I created must find the words that have been specified, then I remove the \\u for each of those words, then add #\u0026amp;x at the beginning and ; at the end\u0026rdquo;.\nAfter doing some browsing for a while, I came across a pretty cool function, preg_replace_callback(). Immediately I tried to implement it to WhatsAppService, the result is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); $unicode = preg_replace_callback( [\u0026#39;/(\\\\\\(u|U)[a-fA-F0-9]{4,8})/\u0026#39;], function ($matches) { $code = preg_replace(\u0026#39;/\\\\\\u|\\\\\\U/\u0026#39;, \u0026#39;\u0026#39;, $matches[0]); return \u0026#34;\u0026amp;#x$code;\u0026#34;; }, $monospace ); return $unicode; } } Guess what happened? BIG SUCCESS!\nI can rest for a while. Finished cold coffee. Then lie down, straighten my back. It doesn\u0026rsquo;t stop there, there is one more problem that has not been resolved, namely\n4. Links that can\u0026rsquo;t be clicked like WhatsApp Look at the message above, then look at the YouTube link, it\u0026rsquo;s still in plain text form, and can\u0026rsquo;t be clicked. It\u0026rsquo;s simple, the method is the same as formatting message in Part 2, directly wrap \u0026ldquo;Link Pattern\u0026rdquo; in an \u0026lt;a\u0026gt; tag.\nSince it was late at night, and there were lots of RegEx cases for a link, I was browsing and found the following RegEx pattern on StackOverflow, here is the pattern:\n/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#\\=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;\\/\\=]*)/. A little explanation:\n/(http(s)?:\\/\\/.)?(www\\.) finds out if the message starts with http://, https://, or directly www.. (www\\.)?[-a-zA-Z0-9@:%._\\+~#\\=]{2,256}\\.[a-z]{2,6} looks for the pattern www. followed by a valid URL character with a range of 2 to 256 characters. Followed by tld which has a range of 2 to 6 characters. \\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;\\/\\=]*)/ searches for valid URL patterns. The result of the whole code is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); $url = preg_replace( \u0026#39;/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#\\=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;\\/\\=]*)/\u0026#39;, \u0026#39;\u0026lt;a class=\u0026#34;text-blue-500\u0026#34; href=\u0026#34;$0\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;$0\u0026lt;/a\u0026gt;\u0026#39;, $monospace ); $unicode = preg_replace_callback( [\u0026#39;/(\\\\\\(u|U)[a-fA-F0-9]{4,8})/\u0026#39;], function ($matches) { $code = preg_replace(\u0026#39;/\\\\\\u|\\\\\\U/\u0026#39;, \u0026#39;\u0026#39;, $matches[0]); return \u0026#34;\u0026amp;#x$code;\u0026#34;; }, $url ); return $unicode; } } \u0026hellip;and ta-da! The result is like this:\nKesimpulan Regular expressions or RegEx, in my opinion is a very powerful and potential aspect of programming. RegEx can help you guys solving very specific problems like the one I\u0026rsquo;m facing right now.\nDespite the difficulty of learning RegEx, I am freed from the possibility that I will write hundreds of lines of code to create a Formatter for WhatsApp messages. In addition, I also escaped the possibility of a long development time due to my ignorance.\nThe point is, learn and keep learning. We will not know if this knowledge is useful or not until we can solve a problem with the knowledge we get.\nYou can get the complete code in my repository. Thank you so much for reading 👋!\n#StayCode #CoffeeIsMyInspiration #Coffee24/7.\nThumbnail by Asterfolio on Unsplash\n","permalink":"https://shiroyuki.dev/en/article/whatsapp-text-formatting-pada-php-part-3/","summary":"Welcome to Part 3 of this tutorial. We\u0026rsquo;ll continue on about converting UTF-16 and UTF-32 to the UTF-8 HTML Entity form that browser can read.\n3. Unicode UTF-16 dan UTF-32 As a reminder, I managed to find the proper RegEx pattern for UTF-16 and UTF-32 which is /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/. The next problem is how to convert the unicode code below into HTML Entity:\nUsing the preg_replace() function directly like this won\u0026rsquo;t work because we\u0026rsquo;re just adding a #\u0026amp;x at the beginning and a ; at the end.","title":"How to Implement WhatsApp Text Formatting + Unicode Rendering in PHP (Part 3)"},{"content":" Welcome to Part 2 of this tutorial. We will continue to discuss about implementation of formatting using RegEx.\n2. Formatting that doesn\u0026rsquo;t render immediately As a reminder, we need 4 kinds of formatting that must be implemented:\nBold, represented by a string enclosed by asterisks ( *string* ) Italic, represented by strings enclosed by underscores ( _string_ ) Strikethrough, represented by a string enclosed in tilde ( ~string~ ) Monospaced, represented by a string enclosed by three backticks ( ```string``` ) In RegEx, we must be able to translate an existing pattern into the RegEx language. As the example below is a RegEx pattern that is used to get words or sentences enclosed by asterisks, we will use this RegEx for formatting bold:\n/\\*(.*?)\\*/ - Regular Expression Pattern for formatting bold on WhatsApp. Believe it or not, it\u0026rsquo;s a valid pattern. How to read it? I will explain briefly.\nThe / slashes at the start and end of the RegEx pattern are called Delimiter. This delimiter functions to limit the scope of the RegEx pattern to be read; \\* after the initial slash and before the final slash indicates that there is an \u0026ldquo;asterisk\u0026rdquo; symbol at the beginning and at the end of a word or sentence; () in brackets serves as a \u0026ldquo;group\u0026rdquo; marker. Groups in RegEx function to create a \u0026ldquo;capture group\u0026rdquo; to extract a substring; . in RegEx PHP means to search for all characters, whether they are strings, integers or symbols, except for line breaks; * means match 0 or more characters in the pattern; as well as - ? is lazy, which means the RegEx will search for as few characters as possible. By default, RegEx\u0026rsquo;s quantifier is greedy that looks for as many characters as possible. Confusing, right 😅? Indeed it is. However, here is the RegEx list I managed to compile for formatting WhatsApp messages:\nFormat type RegEx Pattern Bold /\\*(.*?)\\*/ Italic /\\_(.*?)\\_/ Strikethrough /\\~(.*?)\\~/ Monospace /\\```(.*?)\\```/ After getting these patterns, I implement them into the WhatsAppService:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); return $monospace; } } We\u0026rsquo;ll see the results in the application\n\u0026hellip;aaaaaaaand it worked. An achievement that I think is extraordinarily cool. A step for a more perfect application.\n3. Unicode UTF-16 dan UTF-32 Unicode, which I reported from Wikipedia, is a technical standard designed to allow text and symbols from all writing systems in the world to be displayed and manipulated. However, not all Unicode sent can be parsed and rendered just like that, there must be another conversion stage so that the desired characters can be displayed.\nUTF-8 is the encoding standard used on most websites and browsers. In general, browsers and search engines will fail to process UTF-16, therefore UTF-16 is not used in website technologies.\nOkay, let\u0026rsquo;s get straight to the main problem. An example of a case like this is given:\nBased on previous experience, I thought of the following scenario:\nRemove \\u and \\U in the plain text; then Display the resulting text from the unicode into an HTML form by wrapping the result of replacing the result with \u0026amp;#$1; Initially, I used RegEx as follows /(\\\\\\(u|U)[a-zA-Z0-9])/, but after I tried to check how this pattern works on Regexr.com, apparently there was an error in the pattern I made:\nSince at first I thought it was an emoji, I grabbed one of the random unicode 0001f64f and tried to google it. Here is the screenshot that I took from the fileformat.com page.\n\u0026ldquo;Sure enough, all I got were emojis!\u0026rdquo; I said to myself. After successfully identifying the unicode as an emoji converted from UTF-32, I have to convert it to UTF-8, or directly as Hexadecimal HTML Entity. I also changed the RegEx pattern that I made to be like this:\n1 2 - /(\\\\\\(u|U)[a-zA-Z0-9])/ + /(\\\\\\(u|U)[a-zA-Z0-9]{4,8})/ Yes, I just added the prerequisite that the unicode characters I have to retrieve must be 4 to 8 characters long. But what do I get? Pattern error, again 😅.\nIf you see the match result in the first sentence, the RegEx pattern that I made takes \\u2728RIZK. RIZK is a pattern I don\u0026rsquo;t want to pick up. What\u0026rsquo;s the solution?\nIn short, I changed the range of letters I was looking for. Just from a-f and A-F.\n1 2 - /(\\\\\\(u|U)[a-zA-Z0-9]{4,8})/ + /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/ I also managed to find a suitable RegEx pattern that can be implemented in the application:\nSo, the \u0026ldquo;final\u0026rdquo; RegEx pattern is something like this /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/. Little explanation:\nThe / slashes at the start and end of the RegEx pattern are called Delimiter. This delimiter functions to limit the scope of the RegEx pattern to be read; \\\\\\ three backslash are used to escape the backslash character in PHP; () in brackets serves as a \u0026ldquo;group\u0026rdquo; marker. The RegEx group functions to create a \u0026ldquo;capture group\u0026rdquo; to extract a substring. The group in the RegEx above contains (u|U) which means we receive a lowercase u or a capital U after the backslash; followed by [a-fA-F0-9] which means we accept lowercase letters a through f, uppercase A through F, then numbers 0 through 9. {4,8} means we accept any character in the previous pre-requisite [a-fA-F0-9] with a length of 4 to 8 characters. That\u0026rsquo;s the story of how I got the UTF-16 and UTF-32 patterns. Then how do I change the pattern that has been obtained so that it can be displayed in HTML form? We\u0026rsquo;ll continue to Part 3, I\u0026rsquo;ll see you there 👋!\nThumbnail by Asterfolio on Unsplash\n","permalink":"https://shiroyuki.dev/en/article/whatsapp-text-formatting-pada-php-part-2/","summary":"Welcome to Part 2 of this tutorial. We will continue to discuss about implementation of formatting using RegEx.\n2. Formatting that doesn\u0026rsquo;t render immediately As a reminder, we need 4 kinds of formatting that must be implemented:\nBold, represented by a string enclosed by asterisks ( *string* ) Italic, represented by strings enclosed by underscores ( _string_ ) Strikethrough, represented by a string enclosed in tilde ( ~string~ ) Monospaced, represented by a string enclosed by three backticks ( ```string``` ) In RegEx, we must be able to translate an existing pattern into the RegEx language.","title":"How to Implement WhatsApp Text Formatting + Unicode Rendering in PHP (Part 2)"},{"content":" Background In the development of the Dumas Presisi, an application project that I handle, implementing WhatsApp communication through the Website is one of the features that we have long wanted to implement.\nHowever, due to our lack of experience and mastery of knowledge, after 2 years of this project being launched by the National Police Chief on Wednesday, February 24, 2021, we were only able to implement this feature as a means of community consultation.\nPrototyping Assisted by TailwindCSS and DaisyUI, we can implement this feature\u0026rsquo;s mockup easily. Moreover, with DaisyUI v2.51.4 update, the addition of the Chat Bubble feature is very helpful of creating this mockup. Here is our first screenshot mockup:\nVery simple right? Nothing special at the moment. As additional information, this feature was presented the next day to the leader. Of course, we hope that there will be input and criticism from the leader on the features we are building.\nEverything went smoothly\u0026hellip; until something we didn\u0026rsquo;t expect happened.\nIssues Issue which we didn\u0026rsquo;t expect at all because it didn\u0026rsquo;t appear during testing, appeared during the presentation. No one is \u0026ldquo;hurt\u0026rdquo; by this bug, but we need to get this fixed as soon as possible.\n\u0026ldquo;What\u0026rsquo;s the problem that makes us feel that this issue should be resolved? After all, it\u0026rsquo;s only plain text that is rendered?\u0026rdquo;\nHaha, on the surface, it\u0026rsquo;s true that what we\u0026rsquo;re rendering is plain text, but if the plain text looks like this, is it pleasing to the eye?\nThe Dumas Presisi WhatsApp Hotline is the same as WhatsApp numbers in general, we accept complaints, suggestions, even random broadcasts sent by the public. So, all messages sent to our Hotline, we will accept them as they are in the application.\nAfter skimming through the message above, we mapped out 4 problems:\nLine break Formatting Emoji Link Let\u0026rsquo;s solve this problem one by one 🔥.\n1. Unrendered line breaks In PHP, for plain text messages like this, it\u0026rsquo;s easy for us developers to change New Line to Break Line HTML renderable. That function is nl2br(), which is short for New line to \u0026lt;br/\u0026gt;.\nFirst, I created a Service named WhatsAppService, less more, like this file:\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php namespace App\\Services; class WhatsAppService { public static function formatMessage(string $raw_message): string { return $raw_message; } } The service above still can\u0026rsquo;t change New Line to \u0026lt;br/\u0026gt;, so we use the nl2br function so that the message we receive can be formatted properly:\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); return $nl2br_message; } } After implementing the nl2br function, here is the output of the message that already formatted:\n2. Formatting that doesn\u0026rsquo;t render immediately Reported from page FAQ WhatsApp related to Text Formatting, we get 4 different kinds of formatting must be implemented:\nBold, represented by a string enclosed by asterisks ( *string* ) Italic, represented by strings enclosed by underscores ( _string_ ) Strikethrough, represented by a string enclosed in tilde ( ~string~ ) Monospaced, represented by a string enclosed by three backticks ( ```string``` ) I was thinking \u0026ldquo;how to replace the symbols with HTML tags eh?\u0026rdquo; Several methods crossed my mind.\nFirst, I can use str_replace() to change the symbol to HTML tags. But I also remember that HTML tags must be closed. Based on given the fact, I can\u0026rsquo;t simply use str_replace().\nSecond, I can use preg_match() to retrieve all symbols, then turn it into an HTML tag. Same as the case above, the replaced HTML tag should also be closed again. In addition, the problems to be encountered at the time i used preg_match() it can only return_ int which indicates how many symbols are found in a message.\nThe Approach I did using RegEx was correct, it\u0026rsquo;s just that I only need to find the right function. After standing for a while, brewing coffee, and drinking it, I found a workaround that works, preg_replace(). Long life coffee, our source of motivation ☕️☕️☕️.\npreg_replace() is a function that looks for a pattern based on the regular expression language we give, gets words based on patterns that we provide, then change it according to what we want.\nRegular expressions or what we often refer to as RegEx are the most alien language I\u0026rsquo;ve ever learnt. Not only difficult to understand, however also we must understand some standard rules. I personally just can understand how RegEx works after 1 month intensive study.\nCurious how I implement it? We\u0026rsquo;ll continue to the Part 2! See you there 👋.\nThumbnail by Asterfolio on Unsplash\n","permalink":"https://shiroyuki.dev/en/article/whatsapp-text-formatting-pada-php-part-1/","summary":"Background In the development of the Dumas Presisi, an application project that I handle, implementing WhatsApp communication through the Website is one of the features that we have long wanted to implement.\nHowever, due to our lack of experience and mastery of knowledge, after 2 years of this project being launched by the National Police Chief on Wednesday, February 24, 2021, we were only able to implement this feature as a means of community consultation.","title":"How to Implement WhatsApp Text Formatting + Unicode Rendering in PHP (Part 1)"},{"content":"This situation began when I planned to do a git pull on a project in CentOS 7 server. However, unlike my previous experience, the response that appeared was as follows:\n1 2 3 ssh: Could not resolve hostname github.com: Temporary failure in name resolution fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. It was very surprising, because previously I could always do the pull without any problems. After consulting with someone who is an expert in handling servers, the solution was quite simple, which is by editing the /etc/resolv.conf file and adding the following two lines:\n1 2 nameserver 8.8.8.8 nameserver 8.8.4.4 If you\u0026rsquo;re new to using Linux, you can use the nano /etc/resolv.conf or vi /etc/resolv.conf command to edit the file. However, it\u0026rsquo;s important to remember that the usage of these two text editors is different.\nAs additional information, if you don\u0026rsquo;t have access to edit the file, you can add the pkexec command before the nano or vi command. In this case, you will be prompted to enter the root password to be able to edit the resolv.conf file.\nThat\u0026rsquo;s the end of my short tutorial and development notes. Hopefully, it\u0026rsquo;s useful and helps you all.\u0026quot;\nThumbnail by Erik Mclean on Unsplash\n","permalink":"https://shiroyuki.dev/en/article/cara-mengatasi-could-not-resolve-hostname-github-com-pada-linux/","summary":"This situation began when I planned to do a git pull on a project in CentOS 7 server. However, unlike my previous experience, the response that appeared was as follows:\n1 2 3 ssh: Could not resolve hostname github.com: Temporary failure in name resolution fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. It was very surprising, because previously I could always do the pull without any problems.","title":"How to fix Could Not Resolve Hostname github.com on Linux"},{"content":" Photo by Alvaro Reyes on Unsplash\nThe Automation Testing Pyramid, introduced in the book The Clean Coder by Robert C. Martin, is a representation of the types of tests that professional software development organizations need.\nThere are 5 parts to this pyramid, each requiring at least a certain percentage coverage of each test. Here is the list:\nExploratory Test - 5% System Test - 10% Integration Test - 20% Component Test - 50% Unit Test - 100% Unit Test In this section, tests written in the programming language used to build the system are written by the programmer and returned to the programmer. The tests written should be able to specify the code requirements at the lowest level, if possible at the abstraction level.\nThese unit tests are usually written before creating the production code, which will then be automatically run by Continuous Integration before being sent to production.\nUnit tests must cover the entire system at least 90%. Robert says that 100% is impossible, but at least we reach an asymptotic point approaching 100%.\u0026quot;\nComponent Test Component Test is a test written by Quality Assurance and Business Analysts, with the assistance of a programmer. This test must be understood by all stakeholders, QA, BA, as well as the programmer who writes the test or those who do not.\nThis test covers at least 50% of the system. The nature of this test is more reflective of the \u0026ldquo;happy path\u0026rdquo; rather than the \u0026ldquo;unhappy path\u0026rdquo;.\n\u0026ldquo;Happy path\u0026rdquo; =\u0026gt; Reflects how the component is supposed to function, usually written by the BA or stakeholder who wants the component to run as desired.\n\u0026ldquo;Unhappy path\u0026rdquo; =\u0026gt; Worst-case scenarios that may occur in the component being tested, for example, the possibility of errors that may occur, exceptions that will be thrown. \u0026ldquo;Unhappy path\u0026rdquo; is usually used in Test-Driven Development and Behaviour-Driven Development.\nIntegration Test Integration Test is a type of test that is very important in larger systems with many components. This testing will gather several components at once, and check the compatibility of communication between components. This test is usually written by the System Architect or Lead Designer.\nThis test is also referred to as the Choreography Test, as it depicts \u0026ldquo;how each component dances in harmony with other components\u0026rdquo;.\nThis test does not test the business flow at all, only testing communication between components. Usually, Integration Test is not run alongside CI, but run every night or weekly because it takes a long time. At this level, we test the performance and throughput of the system.\nSystem Test This type of test is an automated test that checks the entire system integrally. This test does not directly check the business flow, but tests whether the system has been connected together correctly. We test the performance and throughput of the system.\nThis test is written by the System Architect and Technical Lead, which is usually written in the same language and environment as the Integration Test for UI. This test is rarely run, due to its long testing duration.\nThe System Test covers at least 10% of the system. The purpose of this test is only to ensure the arrangement of the system, not its behavior. The assumption is that the behavior testing has already been confirmed in Unit Test and Component Test.\nManual Exploratory Test This is the part where humans or users are directly involved. Since as developers we cannot write tests for the entire system perfectly, human involvement is needed.\nHumans are creative beings who will always think about destroying a systematically designed system. It is this human creativity that will be used to explore how the system\u0026rsquo;s behavior \u0026ldquo;should\u0026rdquo; occur according to their expectations.\nThis is not an automated test, but rather a scenario that is executed manually by each individual with a unique usage style. Specifically, the work in this field is a Bug Hunter.\nAll bugs found at this level will be written back to the Unit Test, Component Test, and Integration Test to ensure that the bugs already found will not occur again in the future.\n","permalink":"https://shiroyuki.dev/en/article/testing-automation-pyramid/","summary":"Photo by Alvaro Reyes on Unsplash\nThe Automation Testing Pyramid, introduced in the book The Clean Coder by Robert C. Martin, is a representation of the types of tests that professional software development organizations need.\nThere are 5 parts to this pyramid, each requiring at least a certain percentage coverage of each test. Here is the list:\nExploratory Test - 5% System Test - 10% Integration Test - 20% Component Test - 50% Unit Test - 100% Unit Test In this section, tests written in the programming language used to build the system are written by the programmer and returned to the programmer.","title":"Getting to Know the Testing Automation Pyramid"},{"content":" Photo by Ales Nesetril on Unsplash\nThe words of description above are insults thrown at me by my friends and even some of my family members. They say things like, \u0026ldquo;Why did you buy such an expensive laptop? It\u0026rsquo;s just for coding anyway.\u0026rdquo;\nMy initial reaction was anger, and I now tend to avoid people who say such things. To others, a laptop may only be a device that supports the needs of office workers, students, or heavy gamers.\nMy reason for being upset is understandable because my main use for the laptop is for work. As a programmer, a Personal Computer, whether it\u0026rsquo;s a laptop, desktop, or AIO, will be used fully from morning to night (even 24 hours if there is a deadline).\nBut the fact that I spent a significant amount of money on a MacBook can\u0026rsquo;t be denied, and I carry this laptop in my bag every day, so however angry I may be, I have to accept it.\nAlthough it was a blind buy at first, after a year of using it, I feel a very big difference in several aspects compared to a normal laptop. The reasons are varied.\nLoad Time Photo by Clint Patterson on Unsplash\n\u0026ldquo;Load Time\u0026rdquo; refers to how long it takes for a device to complete a task. For example, when opening a browser, such as Google Chrome, we wait a few seconds after clicking the browser icon. The amount of time we wait for Google Chrome to open is called the Load Time.\nThe same goes for games, whether it\u0026rsquo;s opening a new area, transitioning to a room, or before fighting the final boss, there will be a loading time before we can carry out our next activity.\nOf course, coding also requires a fast Load Time. I\u0026rsquo;ve heard some complaints from other programmer friends, even fellow computer engineering students:\nYou know, I wait so long for loading, I can eat or snack while waiting. Or even have a poo. It\u0026rsquo;s so slow! 🤦‍♂️\nOr even worse:\nGhits, I once waited for Flutter to install, it was so slow, I started playing with my phone while waiting. But when I was playing with my phone, I lost track of time and suddenly it was night.\nWow. But in this case, we can\u0026rsquo;t entirely blame the Load Time, because the main cause of slow Load Time is the inability of the processor or RAM to process and allocate data received. Of course, the speed of the HDD / SSD also matters.\nI personally have experience benchmarking my MacBook Pro M1 2020 with my old ASUS X441UV laptop. To open a Flutter project, until it\u0026rsquo;s running, the Load Time difference is drastic.\nDevice Running Time MacBook Pro M1 2020 24s ASUS X441UV 1m 12s So, in conclusion, by eliminating Load Time, we as developers can focus on other more important things, such as thinking about the logic of the system being built. Eliminating Load Time also results in longer productive time.\nBattery Life Photo by Panos Sakalakis on Unsplash\nBasically, laptops can be taken anywhere without worrying about not having an electrical outlet. The main problem with laptops now is battery issues. Laptops in general have a battery cycle that will decrease with usage. In my case with my ASUS laptop, the laptop could last without charging in the first year. The second year, it began to drop, and had to be charged to full capacity in the third month.\nThere are three options I can do:\nThe cheapest option, keep it plugged in, the risk is if it is suddenly disconnected or the power goes out. Rather-expensive option, replace the battery. The expensive option, replace the laptop. At that time, as a high school student, I did not have the money to buy a battery. So I took the first option. Actually, the risk is high, if during a Windows Update, the power is disconnected, there is a possibility that the Windows will become corrupted. Or while gaming or designing, there is a possibility that the progress data will be lost.\nToday, when this blog is written, my MacBook is over 1 year old, and its battery life is still at 87%. It can still survive a full day under heavy workload.\nBattery health from 100% to 87% in one year is considered wasteful due to a small mistake I made, I installed the Intel version of VSCode while my MacBook uses the ARM architecture. Of course, at that time, there was a battery drain from 100% to 20% in 2 hours. Very wasteful.\nPerformance Photo from Tekno Cerdas.\nWho would have thought that Apple Silicon could surpass the performance of the latest and strongest Intel processors? According to Techjourneyman, when the Apple Silicon M1 was released, it outperformed the best generation 10 Intel processor (i9-10980HK), forcing Intel to fight back.\nOf course, Intel beat M1 with the release of the i9-11900K, but was completely defeated by the M1 Max and M1 Ultra. In terms of performance and integrated GPU, M1 is far ahead of Intel, who relies on external GPUs like Nvidia.\n\u0026ldquo;With such great performance and power, what about battery usage, is it wasteful?\u0026rdquo; No, because the M1 architecture is ARM-based, focusing on the balance between processor size, lower power consumption, lower heat, speed, and longer battery life. Unlike processors with x86 architecture, which optimize performance but consume a lot of power.\nDisadvantages It\u0026rsquo;s not fair if I only state the advantages of the MacBook while not mentioning its disadvantages. Of course, these things I felt have a significant impact on me:\nA steep learning curve. As a new MacBook user, MacOS has many features that rely on shortcuts if you want to work faster. Moreover, the difference in UI from Windows to MacOS is very different.\nNot modular, once you buy a MacBook, there are no options to upgrade it in terms of storage, RAM, or processor. Yes, all components are soldered to the motherboard.\nWindows applications cannot be installed on MacOS. Although some developers can bring their applications to MacOS, most cannot be installed just like that. The solution is, you can use the web version of the application or install it on a virtual machine like Parallels.\nFeatures that have been available on Windows for a long time are not yet available on MacOS. A feature that I often need on Windows is the volume mixer. A simple software aimed at adjusting the sound of each application is not provided on MacOS. Whether in the development stage, or Apple deliberately does not make it.\nCapitalism at its best. Many paid programs are overpriced, even for extending iCloud storage, we have to pay a subscription. Every Apple built-in feature such as Music, TV, Podcasts is all paid.\nPorts. MacBook releases in 2020 and above, with the 13-inch series, do not have enough ports for everyday needs. Only 2 thunderbolt type C ports are provided by Apple, and there are no other ports. So I have to buy a dongle, which is not cheap either.\nLast words Aside from the luxurious presentation of the Apple logo, there are many advantages to the MacBook that I have experienced. But is the MacBook \u0026ldquo;worth to buy\u0026rdquo;? Honestly, no. Personally, I prefer Linux, with its optimized performance (although complicated), you can get performance comparable to a MacBook or even better by using Linux without spending tens of millions of budgets.\nI can even say that my ASUS X441UV laptop almost reached the performance of the MacBook M1 for basic daily usage when using Arch Linux. So, for those of you who want to buy Apple products, reconsider your budget, okay 😬.\n","permalink":"https://shiroyuki.dev/en/article/macbook-fashionable-or-actually-impressive/","summary":"Photo by Ales Nesetril on Unsplash\nThe words of description above are insults thrown at me by my friends and even some of my family members. They say things like, \u0026ldquo;Why did you buy such an expensive laptop? It\u0026rsquo;s just for coding anyway.\u0026rdquo;\nMy initial reaction was anger, and I now tend to avoid people who say such things. To others, a laptop may only be a device that supports the needs of office workers, students, or heavy gamers.","title":"MacBook, Fashionable or Actually Impressive?"},{"content":" Overview 4 Reality is a Virtual YouTuber team (often called VTuber) based on Indonesia. Named 4 Reality because there are 4 founders: Kurokami Itsuki, Raihan Ikeda, Karen, and Vyula.\nAlong with the emergence of the 1st Generation 4 Reality, they also conceptualized the Utaite team (which focuses on singing cover content), also consisting of 4 characters: Cyanpile, Aura Lily, Yua Deyanara, and Miasviel.\nThis website was built using:\nVue.js v3 - using compiler Vite v1 TailwindCSS v2 Vercel Development The development of this website is based on my love for one of the Utaite characters, Aura Lily, a beautiful and charming fairy. After exploring the 4 Reality Discord server, I met Karen who also manages all the assets for this team. With the initiative to make Aura Lily a wallpaper, I easily obtained her character design.\nHere is the design for the Aura Lily wallpaper which will then become the 4 Reality website development idea:\nI used to love the concept of the Broken Grid, but the biggest challenge I will face in development is what I call the stylesheet chaos. A condition where there will be many redundant stylesheets and they tend to only be used once for a specific character. Fortunately, I found a CSS framework that can handle this, TailwindCSS.\nOne can imagine how difficult it is to create a character profile page tha contains a lot of information such as:\nTalent name Type of character played Social media Motto Used color palette Additional information After the complex design of Aura Lily was finished, I then thought, \u0026ldquo;What if I develop this website again?\u0026rdquo; See the statement \u0026ldquo;develop again\u0026rdquo;, this statement appeared because the 4 Reality website already existed at that time, but was far from adequate.\nA makeshift Bootstrap 4 template, combined with raw assets that were so large they reached 10MB per image, affecting load time, and a very simple design (due to the template, of course).\nProfile Section Dilemma The next challenge is not about thinking about how to design the website, but about how I can present 8 talents on one page without having to change pages. Vue Dynamic Component was finally used to store each talent\u0026rsquo;s information. So the website visitor simply clicks on the icon of the talent they want to see and the details of that talent will automatically appear.\nHere is the design for the Profile Section:\nHowever, of course, there is information that will not be visible if the design of the Profile Section is in the form of scrolling. There is no information \u0026ldquo;Which part is this talent from? Is he a VTuber or an Utaite? Then what if there is a Generation 2, Generation 3, and so on?\u0026rdquo; Of course, this is a dilemma in itself. I have 2 options:\nDisplay the character information played by the talent in the profile details, with the risk of the design becoming imbalanced due to the addition of the word \u0026ldquo;Gen 1\u0026rdquo; or \u0026ldquo;Utaite\u0026rdquo; firmly. Categorizing characters based on each talent\u0026rsquo;s role, by creating \u0026ldquo;Tabs\u0026rdquo;. I decided to use option 2, the easiest option to implement and not changing the existing design. Here is the view I took from the direct website.\nAbout the rest of the parts, how is it, Tsu? As context, Tsu here is a nickname from the word Hatsu (初 / はつ). My nickname at the time was HatsuShiroyuki (初白雪) - The first Snow White\nIt\u0026rsquo;s a simple question that Karen said when I finished working on the Character Section, a simple question but it took me a lot of brainpower to think about how to design the Home, Vision and Mission, Contact Us, and Footer sections.\nIt\u0026rsquo;s really not an easy task, because the first impression I give is the chaotic yet balanced and visually pleasing Broken Grid nuance.\nHome The Home section literally just displays an overview of the entire website. After using my brain power for quite a while only for the Home section, I sent this home section draft to KarenandItsuki`:\nThere was no rejection, but more like a suggestion:\nHow about under 4 Reality Team you add these words, Tsu: \u0026ldquo;Together Everyone Achieves More And There is no I in Team.\u0026rdquo;\n— Itsuki\nAt the same time, at the top there is a header, and the color should not be too black. Grayish is also okay.\n— Karen\nChallenge accepted, Ki, Ren. After making some adjustments, here is the design I sent back to them:\nEveryone agreed with the Home Section design, and then moved on to the About Us Section.\nAbout Us This section is also a challenge in itself because we want to display 1 vision and 3 missions, while at the same time telling briefly about their team.\nI came up with an idea where I would use the top sub-section for About the Team, and the bottom sub-section for Vision and Mission. Of course, this design was not well received, and tended to destroy the Broken Grid nuance used:\nOf course, I think you as a reader are equally annoyed \u0026ldquo;why like that?\u0026rdquo;. Technically, it will damage the theme, but how else, the brain is already stuck 💀. I take time to rest my brain for a few days, and also to find inspiration for this section.\n2 days have passed, and I sent this design:\nThe concept I created for the About Us Section is as follows:\nThe upper left corner contains \u0026lsquo;V\u0026rsquo; or \u0026lsquo;M\u0026rsquo;, which means Vision or Mission. The vision or mission content is not too long. The Card arrangement will be sorted down, not zig-zag on the Tablet display. The About 4 Reality on the left is in a sticky form, so it will automatically scroll down when the user also scrolls down. This is the main reason why the left side looks empty. The design was accepted by all members of 4 Reality, and I immediately merged the existing design and then sliced the design into code.\nSlicing Slicing is the longest stage, thinking about how the display can match each viewport is not an easy thing. Knowledge of responsive web design will be very useful at this stage.\nFor the Home Section, it is relatively easy, it only took a few hours to make it responsive on all viewports.\nThe About Us Section is also relatively easy. Display the Cards in a zig-zag on the right on the Desktop viewport, display it in order from top to bottom on the Tablet viewport, and remove the sticky property on the Mobile viewport.\nThe Character Section is a heavy challenge from all sections.\nI had to build a unique design for each Talent. There are also uniqu requests from some Talents, whether they want a 2-color option, or use a different name direction (check the Aura Lily detail as an example). I had to categorize each Talent into the appropriate section. I had to make sure that all designs can be seen well on all viewports, and again, they must be responsive. The rest of the Contact and Social Media sections are simple sections that are not too good, but still consistent with the color theme used.\nIn conclussion So far in my career in website development, 4 Reality is the most complex website I have ever made. But the result of this hard work is well paid off because the 4 Reality Website became the winner in 2 Wibucode events:\n1st Place Front-end 2021 Wibucode event on June 14, 2021\n2nd Place Tailwind CSS 2021 Wibucode event on December 13, 2021\nA small, proud achievement 😬.\nThank you to all parties involved in the development of this website. Especially Karen who always gives positive feedback and builds, Itsuki and Nervia (staff) who often provide sharp and spicy criticism, and Aura Lily who is the main motivation behind the development of this website.\n","permalink":"https://shiroyuki.dev/en/portfolio/website/4reality/","summary":"Overview 4 Reality is a Virtual YouTuber team (often called VTuber) based on Indonesia. Named 4 Reality because there are 4 founders: Kurokami Itsuki, Raihan Ikeda, Karen, and Vyula.\nAlong with the emergence of the 1st Generation 4 Reality, they also conceptualized the Utaite team (which focuses on singing cover content), also consisting of 4 characters: Cyanpile, Aura Lily, Yua Deyanara, and Miasviel.\nThis website was built using:\nVue.js v3 - using compiler Vite v1 TailwindCSS v2 Vercel Development The development of this website is based on my love for one of the Utaite characters, Aura Lily, a beautiful and charming fairy.","title":"4 Reality"}]