[{"content":"Situasi ini dimulai ketika saya berencana untuk melakukan git pull pada sebuah proyek di server CentOS 7. Namun, berbeda dengan pengalaman saya sebelumnya, respon yang muncul adalah sebagai berikut:\n1 2 3 ssh: Could not resolve hostname github.com: Temporary failure in name resolution fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. Sangat mengherankan, karena sebelumnya saya selalu bisa melakukan pull tanpa masalah apapun. Setelah berkonsultasi dengan seseorang yang ahli dalam menangani Server, solusinya cukup sederhana, yaitu dengan mengedit file /etc/resolv.conf dan menambahkan dua baris berikut:\n1 2 nameserver 8.8.8.8 nameserver 8.8.4.4 Jika Anda masih baru dalam menggunakan Linux, Anda dapat menggunakan perintah nano /etc/resolv.conf atau vi /etc/resolv.conf untuk mengedit file tersebut. Namun, perlu diingat bahwa cara penggunaan kedua text editor tersebut berbeda.\nSebagai tambahan informasi, jika Anda tidak memiliki akses untuk mengedit file tersebut, Anda bisa menambahkan perintah pkexec sebelum perintah nano atau vi. Dalam hal ini, Anda akan diminta untuk memasukkan password root untuk dapat mengedit file resolv.conf.\nSekian tutorial singkat sekaligus catatan pengembangan saya, semoga bermanfaat dan membantu teman-teman sekalian.\nThumbnail oleh Erik Mclean dari Unsplash\n","permalink":"https://shiroyuki.dev/article/cara-mengatasi-could-not-resolve-hostname-github-com-pada-linux/","summary":"Situasi ini dimulai ketika saya berencana untuk melakukan git pull pada sebuah proyek di server CentOS 7. Namun, berbeda dengan pengalaman saya sebelumnya, respon yang muncul adalah sebagai berikut:\n1 2 3 ssh: Could not resolve hostname github.com: Temporary failure in name resolution fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. Sangat mengherankan, karena sebelumnya saya selalu bisa melakukan pull tanpa masalah apapun.","title":"Cara Mengatasi Could Not Resolve Hostname github.com Pada Linux"},{"content":" Foto oleh Alvaro Reyes dari Unsplash\nPyramid Automation Testing, dilansir dari buku The Clean Coder yang ditulis oleh Robert C. Martin, adalah sebuah gambaran tentang jenis-jenis Test yang dibutuhkan oleh organisasi pengembang profesional.\nAda 5 bagian dari piramid ini yang masing-masing membutuhkan setidaknya persentase coverage dari setiap Test. Berikut adalah daftarnya:\nExploratory Test - 5% System Test - 10% Integration Test - 20% Component Test - 50% Unit Test - 100% Unit Test Pada bagian ini, Test dengan bahasa pemrograman yang digunakan untuk membangun sistem ditulis oleh programmer, dan kembali untuk programmer. Test yang ditulis harus bisa menspesifikasikan kebutuhan kode pada level yang paling rendah, jika memungkinkan pada level abstraksi.\nUnit Test ini biasanya ditulis terlebih dahulu sebelum membuat kode production yang nantinya akan dijalankan secara otomatis oleh Continuous Integration sebelum dikirimkan ke production.\nUnit Test harus mengcover keseluruhan sistem paling sedikit 90%. Robert mengatakan bahwa 100% adalah hal yng mustahil, namun setidaknya kita mencapai titik asimptotik mendekati 100%.\nComponent Test Component Test adalah Test yang ditulis oleh Quality Assurance dan Business Analyst, dengan bantuan programmer. Test ini harus bisa dimengerti oleh seluruh Stakeholder, QA, BA, serta programmer yang menulis Test atau yang tidak menulisnya.\nTest ini setidaknya meng-cover 50% dari sistem. Sifat dari Test ini lebih mencerminkan pada happy-path daripada unhappy-path.\nHappy path =\u0026gt; Mencerminkan bagaimana komponen itu berfungsi selayaknya, biasanya ditulis oleh BA atau Stakeholder yang menginginkan bagaimana komponen itu berjalan sesuai keinginan.\nUn-happy path =\u0026gt; Skenario-skenario terburuk yang mungkin terjadi pada komponen yang akan ditest, contohnya kemungkinan error yang akan terjadi, Exception yang akan dilempar. Un-happy path biasanya digunakan pada Test-Driven Development dan Behavioural-Driven Development.\nIntegration Test Integration Test adalah tipe Test yang akan sangat berarti pada sistem yang lebih besar, yang memiliki banyak komponen. Testing ini akan menghimpun beberapa kopmonen sekaligus, dan mengecek kesesuaian komunikasi antar komponen. Test ini biasanya ditulis oleh System Architect atau Lead Designer.\nTest ini sering disebut juga sebagai Choreography Test, karena menggambarkan \u0026ldquo;bagaimana setiap komponen berdansa seirama dengan komponen lainnya\u0026rdquo;.\nTest ini tidak mengetes alur bisnis sama sekali, hanya mengetes komunikasi antar komponen. Biasanya, Integration Test tidak akan dijalankan bersamaan dengan CI, namun dijalankan setiap malam, atau mingguan karena cukup memakan waktu yang lama. Pada level ini, kita mengetes performa dan throughput dari sistem.\nSystem Test Test tipe ini adalah tipe test yang terotomatisasi yang mengecek seluruh sistem secara terintegrasi. Test tipe ini tidak mengecek alur bisnis secara langsung, namun mengetes apakah sistem sudah disambung bersamaan dengan benar. Kita mengetest performa dan throughput dari sistem.\nTest ini ditulis oleh System Architect dan Technical Lead, yang biasanya ditulis dengan bahasa dan environment yang sama dengan Integration Test untuk UI. Test ini jarang dijalankan, karena durasi testingnya yang lama.\nSystem Test setidaknya meng-cover 10% dari sistem. Tujuan dari Test ini hanya memastikan susunan sistemnya, bukan perilaku sistemnya. Asumsimnya adalah testing perilaku sudah dipastikan ada pada Unit Test dan Component Test.\nManual Exploratory Test Disini adalah bagian dimana manusia atau pengguna terlibat langsung. Karena kita sebagai pengembang tidak bisa menulis Test untuk keseluruhan sistem secara sempurna, maka dibutuhkanlah peran manusia.\nManusia adalah makhluk hidup kreatif yang akan selalu berfikir untuk merusak sebuah sistem yang dirancang secara sistematis. Kreatifitas manusia inilah yang akan digunakan untuk menjelajahi bagaimana perilaku sistem yang \u0026ldquo;seharusnya\u0026rdquo; terjadi, sesuai dengan ekspektasi mereka.\nBagian ini bukanlah Test yang diotomasi, namun lebih ke diskenariokan, yang dieksekusi secara manual, oleh masing-masing individu dengan gaya penggunaan yang unik. Secara spesifik, pekerjaan pada bidang ini adalah Bug Hunter.\nSeluruh bug yang ditemukan pada level ini akan ditulis kembali pada Unit Test, Component Test, serta Integration Test untuk memastikan bug yang sudah ditemukan tidak akan terjadi lagi di kemudian hari.\n","permalink":"https://shiroyuki.dev/article/testing-automation-pyramid/","summary":"Foto oleh Alvaro Reyes dari Unsplash\nPyramid Automation Testing, dilansir dari buku The Clean Coder yang ditulis oleh Robert C. Martin, adalah sebuah gambaran tentang jenis-jenis Test yang dibutuhkan oleh organisasi pengembang profesional.\nAda 5 bagian dari piramid ini yang masing-masing membutuhkan setidaknya persentase coverage dari setiap Test. Berikut adalah daftarnya:\nExploratory Test - 5% System Test - 10% Integration Test - 20% Component Test - 50% Unit Test - 100% Unit Test Pada bagian ini, Test dengan bahasa pemrograman yang digunakan untuk membangun sistem ditulis oleh programmer, dan kembali untuk programmer.","title":"Mengenal Testing Automation Pyramid"},{"content":" Foto oleh Ales Nesetril dari Unsplash\nYap, kata-kata deskripsi singkat di atas adalah lontaran kata-kata yang saya terima dari teman-teman saya. Bukan hanya dari teman-teman, bahkan sebagian dari anggota keluarga saya mengatakan hal yang sama. \u0026ldquo;Beli laptop kok mahal banget sih? Liat tuh punya X, harga 5 juta doang bisa ngegame lancar\u0026rdquo;.\nReaksi awal saya tentunya kesal, bahkan sekarang saya cenderung menghindari orang-orang yang mengatakan sedemikian rupa. Di mata orang lain, mungkin laptop hanyalah sebuah perangkat yang menunjang kebutuhan Office bagi pekerja kantoran, tugas bagi mahasiswa, atau gaming bagi gamer kelas berat.\nAlasan saya kesal termasuk masuk akal, karena kebutuhan utama penggunaan laptop saya sehari-hari adalah untuk pekerjaan. Sebagai programmer, sebuah Personal Computer, entah itu Laptop, Desktop, ataupun AIO akan kita gunakan penuh dari pagi sampai malam (bahkan 24 jam kalau kejar deadline).\nNamun fakta bahwa saya mengeluarkan uang yang cukup besar untuk sebuah MacBook tidak bisa dipungkiri, toh barangnya ada, saya bawa laptop ini di tas setiap hari, jadi ya mau sekesal apapun juga ya harus dimaklumi.\nWalaupun awalnya blind buy, tapi setelah satu tahun pemakaian, saya merasakan perbedaan yang sangat jauh pada beberapa aspek jika dibanding dengan laptop biasa. Alasannya beragam.\nLoad Time Foto oleh Clint Patterson dari Unsplash\nLoad Time berarti waktu berapa lama sebuah perangkat dapat menyelesaikan suatu tugas. Sebagai contoh pada saat kita membuka browser, contohnya Google Chrome, kita akan menunggu beberapa detik setelah kita meng-klik ikon browser tersebut. Berapa detik kita menunggu Google Chrome terbuka itu disebut dengan Load Time.\nSama halnya dengan Game, entah itu membuka daerah baru, atau pada saat transisi ke suatu ruangan, atau sebelum kita melawan final-boss, akan ada loading sebelum kita bisa melaksanakan aktivitas kita selanjutnya.\nTentu saja, ngoding juga perlu Load Time cepat. Saya pernah mendengar beberapa keluhan dari teman-teman programmer lainnya, bahkan teman-teman sesama mahasiswa Teknik Informatika:\nEh lu tau enggak? Gue kalau udah nungguin loading bisa sambil makan atau ngemil dulu. Atau tak tinggal boker. Lama banget dah! 🤦‍♂️\nAtau bahkan lebih parah:\nGhits, gue pernah ya nungguin Flutter keinstal, lama banget, sampai pas nunggu gue main HP kan. Tapi ketika gue main HP, gue lupa waktu tuh, tau-tau udah malam.\nBuset dah. Tapi ya load time tidak bisa kita salahkan sepenuhnya dalam kasus ini, karena faktor utama penyebab load time lama adalah ketidakmampuan prosesor atau RAM dalam memproses dan mengalokasikan data yang diterima. Tentu saja kecepatan HDD / SSD juga berpengaruh.\nSaya sendiri memiliki pengalaman untuk mem-benchmark MacBook dengan laptop ASUS X441UV saya yang lama. Untuk membuka sebuah project Flutter, sampai running, perbedaan load time-nya sangat drastis.\nDevice Running Time MacBook Pro M1 2020 24s ASUS X441UV 1m 12s Jadi kesimpulannya, dengan mengeliminasi load time, kita sebagai pengembang bisa berfokus ke hal lain yang lebih penting seperti memikirkan logika dari suatu sistem yang dibangun. Mengeliminasi load time juga menghasilkan waktu produktif yang lebih lama.\nBattery Life Foto oleh Panos Sakalakis dari Unsplash\nPada dasarnya, kebutuhan laptop itu bisa dibawa kemana saja, tanpa perlu mengkhawatirkan tidak ada stop kontak. Masalah utama pada laptop sekarang adalah masalah baterai. Laptop-laptop pada umumnya, memiliki battery cycle yang akan menurun seiring dengan penggunaan. Kasus yang saya alami pada laptop ASUS saya, laptop itu bisa bertahan tanpa perlu nge-charge di tahun pertama. Tahun kedua sudah mulai ngedrop, dan harus full charge di bulan ketiga.\nAda tiga opsi yang saya bisa lakukan:\nOpsi termurah, Colok terus, risikonya kalau tiba-tiba tercabut atau mati listrik. Agak mahal, ganti baterai. Opsi mahal, ganti laptop. Pada saat itu, sebagai pelajar SMK, saya tidak memiliki uang untuk membeli baterai. Jadi saya ambil opsi pertama. Sebenarnya risikonya tinggi, jika pada saat Windows Update, dayanya tercabut, ada kemungkinan Windowsnya corrupt. Atau pada saat ngegame atau ngedesain, ada kemungkinan data progressnya hilang.\nHari ini, pada saat blog ini ditulis, MacBook saya sudah berusia 1 tahun lebih, dan battery lifenya masih di angka 87%. Masih bisa survive seharian penuh dibawah workload yang banyak.\nBattery health 100% ke 87% dalam satu tahun termasuk boros karena ada sedikit kesalahan yang saya perbuat, saya menginstal VSCode versi Intel sementara MacBook saya menggunakan arsitektur ARM. Tentunya saat itu, terjadi battery drain dari 100% ke 20% dalam waktu 2 jam. Sangat boros.\nPerforma Foto dari Tekno Cerdas.\nSiapa yang mengira bahwa Apple Silicon bisa melebihi performa prosesor Intel yang pada saat itu terbaru dan terkuat? Dilansir dari Techjourneyman, saat Apple Silicon M1 dirilis, ia berhasil mengalahkan prosesor Intel Generasi ke-10 yang terbaiknya (i9-10980HK) sehingga Intel harus melawan kembali.\nTentunya Intel berhasil mengalahkan M1 dengan merilis i9-11900K, namun dikalahkan lagi secara mutlak oleh M1 Max dan M1 Ultra. Secara performa, dan Integrated GPU, M1 jauh di atas Intel, karena Intel bergantung kepada External GPU seperti Nvidia.\n\u0026ldquo;Dengan performa sebaik itu, dan kekuatan setinggi itu, bagimana penggunaan baterainya, apakah boros?\u0026rdquo; Tidak. Karena arsitektur M1 yang merupakan ARM yang berfokus kepada keseimbangan ukuran prosesor, penggunaan daya yang lebih rendah, panas yang lebih rendah, kecepatan, dan kehidupan baterai yang lebih panjang. Berbeda dengan prosesor yang memiliki arsitektur x86 yang mengoptimisasikan performa, namun memakan daya yang sangat besar.\nKekurangan Tidak adil jika saya hanya mengutarakan kelebihan MacBook sementara tidak mengutarakan kekurangannya. Tentunya, hal-hal yang saya rasakan ini memiliki impact yang sangat besar bagi saya:\nLearning Curve yang lumayan terjal. Sebagai pengguna MacBook baru, MacOS memiliki banyak fitur yang mengandalkan shortcut jika ingin bekerja lebih cepat. Terlebih lagi, perbedaan UI dari Windows ke MacOS sangatlah berbeda.\nTidak modular, sekalinya Anda membeli MacBook, tidak ada opsi untuk meng-upgradenya dari sisi storage, RAM, ataupun prosesor. Ya, semua komponen telah tersolder ke motherboard.\nAplikasi Windows tidak bisa diinstal pada MacOS. Walaupun ada beberapa pengembang yang bisa membawa aplikasinya ke MacOS, namun kebanyakan juga tidak bisa diinstal begitu saja. Solusinya, Anda bisa menggunakan versi web dari aplikasi tersebut, atau diinstal pada sebuah Virtual Machine seperti Parallels.\nFitur-fitur yang sudah lama disediakan oleh Windows, belum ada di MacOS. Fitur yang sering saya butuhkan di Windows adalah volume mixer. Software simpel yang bertujuan untuk mengatur suara tiap aplikasi, tidak disediakan pada MacOS. Entah dalam tahap pengembangan, atau Apple sengaja tidak membuatnya.\nKapitalisme at it\u0026rsquo;s best. Banyak program berbayar yang overpriced, bahkan untuk penambahan storage iCloud, kita harus membayar subscription. Setiap fitur bawaan Apple seperti Music, TV, Podcasts semuanya berbayar.\nPort. MacBook rilisan tahun 2020 ke atas, dengan seri 13-inch, tidak memiliki port yang cukup untuk kebutuhan sehari-hari. Hanya 2 port thunderbolt type C yang disediakan oleh Apple, dan tidak ada port lain. Jadi terpaksa saya harus membeli dongle, yang tentunya tak kalah mahal juga.\nAkhir kata Disamping mewahnya Logo Apple yang disajikan, banyak kelebihan dari MacBook yang sudah saya rasakan. Namun apakah MacBook ini worth to buy, jujur, tidak. Saya secara pribadi lebih prefer ke Linux, dengan pengoptimasian yang sedemikian rupa (namun rumit), Anda bisa mendapatkan performa setara MacBook atau lebih dengan menggunakan Linux tanpa mengeluarkan budget puluhan juta.\nBahkan bisa saya katakan, laptop ASUS X441UV saya hampir mencapai performa MacBook M1 untuk basic daily usage ketika menggunakan Arch Linux. Jadi, untuk kalian yang ingin membeli produk Apple, pertimbangkan ulang budget-nya, ya 😬.\n","permalink":"https://shiroyuki.dev/article/macbook-fashionable-or-actually-impressive/","summary":"Foto oleh Ales Nesetril dari Unsplash\nYap, kata-kata deskripsi singkat di atas adalah lontaran kata-kata yang saya terima dari teman-teman saya. Bukan hanya dari teman-teman, bahkan sebagian dari anggota keluarga saya mengatakan hal yang sama. \u0026ldquo;Beli laptop kok mahal banget sih? Liat tuh punya X, harga 5 juta doang bisa ngegame lancar\u0026rdquo;.\nReaksi awal saya tentunya kesal, bahkan sekarang saya cenderung menghindari orang-orang yang mengatakan sedemikian rupa. Di mata orang lain, mungkin laptop hanyalah sebuah perangkat yang menunjang kebutuhan Office bagi pekerja kantoran, tugas bagi mahasiswa, atau gaming bagi gamer kelas berat.","title":"MacBook, Gaya Doang atau Emang Gahar?"},{"content":" Overview 4 Reality adalah sebuah tim Virtual YouTuber (biasa disebut VTuber) yang berada di Indonesia. Dinamakan 4 Reality karena penemu dari tim VTuber ini terdiri dari 4 karakter: Kurokami Itsuki, Raihan Ikeda, Karen, dan Vyula.\nDisamping munculnya Generasi ke-1 4 Reality, mereka juga menggagas tim Utaite (yang berfokus kepada konten cover lagu / menyanyi), juga terdiri dari 4 karakter: Cyanpile, Aura Lily, Yua Deyanara, Miasviel.\nWebsite ini dibangun dengan menggunakan:\nVue.js v3 - menggunakan compiler Vite v1 TailwindCSS v2 Vercel Pengembangan Pengembangan website ini didasarkan pada rasa kesukaan saya terhadap salah satu karakter Utaite Aura Lily, suatu Peri cantik yang charming dan lucu. Setelah menjelajahi server Discord 4 Reality, saya bertemu Karen yang juga memanage seluruh asset dari tim ini. Dengan inisiatif ingin membuatkan Aura Lily sebuah wallpaper, saya mendapatkan desain karakternya dengan mudah.\nBerikut adalah desain wallpaper Aura Lily yang selanjutnya akan menjadi ide pengembangan website 4 Reality:\nDulu saya sangat menyukai konsep dari Broken Grid, namun tantangan terbesar yang akan saya hadapi ketika pengembangan adalah yang saya sebut sebagai stylesheet chaos. Kondisi dimana akan ada banyak sekali stylesheet yang redundan dan cenderung hanya bisa dipakai satu kali untuk karakter yang spesifik. Beruntung saya menemukan framework CSS yang bisa mengatasi ini, TailwindCSS.\nBisa dibayangkan bagaimana sulitnya membuat suatu halaman profil karakter yang memuat banyak informasi seperti:\nNama talent Jenis karakter yang diperankan Sosial media Motto Palet warna yang digunakan Informasi tambahan lainnya Setelah desain Aura Lily yang sedemikian rumit selesai, selanjutnya saya berfikir \u0026ldquo;Bagaimana jika saya kembangkan kembali website ini?\u0026rdquo;. Lihat pernyataan kembangkan kembali, pernyataan ini muncul karena website 4 Reality pada saat itu sudah ada, namun sangat jauh dari kata \u0026ldquo;layak\u0026rdquo;.\nTemplate Bootstrap 4 yang seadanya, ditambah dengan asset raw yang begitu besar hingga mencapai 10MB per gambar sehingga load time sangat terpengaruh, serta desainnya yang sangat simpel (karena template, tentunya).\nDilema Profile Section Tantangan selanjutnya bukanlah bagaimana saya memikirkan tentang bagaimana desain websitenya, namun tentang bagaimana saya bisa menyajikan 8 talent sekaligus dalam suatu halaman, tanpa perlu mengganti halaman. Vue Dynamic Component akhirnya digunakan untuk menyimpan setiap informasi talent. Jadi pengunjung website tinggal meng-klik ikon talent yang ingin dilihat maka secara otomatis detail dari talent tersebut akan muncul.\nBerikut adalah rancangan dari Profile Section:\nNamun tentu saja, ada informasi yang tidak akan terlihat jika desain dari Profile Section ini berbentuk scrolling, tidak ada informasi \u0026ldquo;Bagian mana talent ini berasal? Apakah dia VTuber, atau Utaite? Lalu bagaimana jika ada Generasi 2, Generasi 3, dan seterusnya?\u0026rdquo; Tentu saja, ini adalah dilema tersendiri. Saya memiliki 2 opsi:\nMenampilkan informasi karakter apa yang diperankan oleh talent pada detail profilnya, dengan risiko desain akan menjadi tidak seimbang karena penambahan kata \u0026ldquo;Gen 1\u0026rdquo; atau \u0026ldquo;Utaite\u0026rdquo; yang tegas. Mengkategorikan karakter berdasarkan peranan masing-masing talent, dengan cara membuat \u0026ldquo;Tab\u0026rdquo; Saya memutuskan untuk menggunakan opsi 2, opsi yang paling mudah diimplementasikan, serta tidak mengubah keseluruhan desain yang sudah ada. Berikut adalah tampilan yang saya ambil dari website langsung\nTerus bagian lainnya gimana, Tsu? Sebagai konteks, Tsu disini adalah sapaan dari kata Hatsu (初 / はつ). Nickname saya pada saat itu adalah HatsuShiroyuki (初白雪) - Salju Putih Pertama.\nItulah kalimat pertanyaan yang Karen ucapkan ketika saya selesai mengerjakan Character Section, sebuah pertanyaan sederhana namun cukup menguras otak saya untuk memikirkan bagaimana desain yang cocok untuk section Home, Visi Misi, Kontak Kami, dan Footer.\nBetul-betul bukan hal yang mudah, karena impresi pertama yang saya berikan adalah nuansa Broken Grid yang chaotic, namun tetap seimbang dan enak dipandang.\nHome Section Home secara harfiah hanya menampilkan overview dari keseluruhan website. Setelah menguras otak cukup lama hanya untuk section Home, saya mengirimkan draft section home ini kepada Karen dan Itsuki:\nTidak ada penolakan, namun lebih kepada saran:\nGimana kalau di bawah 4 Reality Team ini lu tambahin kata-kata ini, Tsu: \u0026ldquo;Together Everyone Achieves More And There is no I in Team.\u0026rdquo;\n— Itsuki\nSama sekalian di atas ada header, terus warnanya jangan tok hitam. Agak ke abu-abu juga boleh keknya.\n— Karen\nChallenge accepted, Ki, Ren. Setelah beberapa menit menyesuaikan perubahan, berikut adalah desain yang saya kirimkan lagi ke mereka:\nSemua menyetujui desain Home Section, dilanjut ke About Us Section.\nAbout Us Section ini juga adalah sebuah tantangan tersendiri karena kita ingin menampilkan 1 visi dan 3 misi mereka, namun sekaligus menceritakan secara singkat tentang tim mereka.\nSaya menggagas ide dimana saya akan menggunakan sub-section atas untuk Tentang Tim, dan sub-section bawah untuk Visi dan Misi. Tentunya desain ini tidak diterima dengan baik, dan cenderung merusak nuansa Broken Grid yang digunakan:\nTentu saja, saya rasa kalian sebagai pembaca juga sama kesalnya \u0026ldquo;kok gitu?\u0026rdquo;. Secara teknis tentu akan merusak tema, namun bagaimana lagi, otak juga sudah stuck 💀. Saya meminta waktu untuk mengistirahatkan otak saya selama beberapa hari, juga untuk mencari inspirasi untuk section ini.\n2 hari telah berlalu, dan saya mengirimkan desain ini:\nKonsep yang saya buat untuk About Us Section adalah sebagai berikut:\nPojok kiri atas berisi \u0026lsquo;V\u0026rsquo; atau \u0026lsquo;M\u0026rsquo;, yang berarti Visi atau Misi. Konten visi atau misi tidak terlalu panjang. Susunan Card akan berurut ke bawah, bukan zig-zag pada tampilan Tablet. About 4 Reality yang ada di bagian kiri berbentuk sticky, jadi akan secara otomatis scroll ke bawah ketika user juga scroll ke bawah. Ini alasan utama mengapa bagian kiri terkesan kosong. Desain diterima oleh semua anggota 4 Reality, lalu saya langsung menggabungkan desain yang ada, lalu slicing desain tersebut ke kode.\nSlicing Slicing adalah tahap paling lama, memikirkan bagaimana tampilan dapat sesuai pada setiap viewport bukanlah suatu hal yang mudah. Pengetahuan akan responsive web design akan sangat berguna pada tahap ini.\nUntuk Home Section, relatif mudah, hanya memakan waktu beberapa jam untuk dapat menjadikannya responsif di seluruh viewport.\nAbout Us Section juga relatif mudah. Tampilkan Card secara zig-zag di bagian kanan pada viewport Desktop, tampilkan secara berurutan dari atas ke bawah pada viewport Tablet, dan hapus property sticky pada viewport Mobile.\nCharacter Section ini tantangan berat dari seluruh section.\nSaya harus membangun seluruh desain yang unik pada setiap Talent. Ditambah lagi ada permintaan unik dari beberapa Talent yang entah menginginkan opsi 2 warna, atau penggunaan arah nama yang berbeda (cek detail Aura Lily sebagai contoh). Saya harus mengkategorikan setiap Talent kepada bagian yang sesuai. Saya harus memastikan seluruh desain dapat dilihat dengan baik di seluruh viewport, lagi-lagi harus responsif. Sisanya untuk section Kontak dan Sosial Media hanya berupa section simpel yang tidak terlalu bagus, tetapi masih selaras dengan tema warna yang digunakan.\nAkhir kata Sejauh karir saya dalam pengembangan website, 4 Reality ini adalah website ter-kompleks yang pernah saya buat. Namun hasil dari kerja keras ini terbayar dengan baik karena Website 4 Reality menjadi pemenang dalam 2 event Wibucode:\nJuara 1 Event Front-end 2021 Wibucode pada tanggal 14 Juni 2021\nJuara 2 Event Tailwind CSS 2021 Wibucode pada tanggal 13 Desember 2021\nSebuah prestasi kecil yang membanggakan 😬.\nTerima kasih saya ucapkan kepada seluruh pihak yang terkait pada pengembangan Website ini. Terutama Karen yang selalu memberikan umpan balik yang positif dan membangun, Itsuki dan Nervia (staf) yang sering memberikan kritik pedas dan tajam, serta Aura Lily yang menjadi motivasi utama dibalik pengembangan Website ini.\n","permalink":"https://shiroyuki.dev/portfolio/website/4reality/","summary":"Overview 4 Reality adalah sebuah tim Virtual YouTuber (biasa disebut VTuber) yang berada di Indonesia. Dinamakan 4 Reality karena penemu dari tim VTuber ini terdiri dari 4 karakter: Kurokami Itsuki, Raihan Ikeda, Karen, dan Vyula.\nDisamping munculnya Generasi ke-1 4 Reality, mereka juga menggagas tim Utaite (yang berfokus kepada konten cover lagu / menyanyi), juga terdiri dari 4 karakter: Cyanpile, Aura Lily, Yua Deyanara, Miasviel.\nWebsite ini dibangun dengan menggunakan:","title":"4 Reality"},{"content":" Tim Laravel telah meluncurkan v9.8, dengan fitur pengaksesan form data dari model Eloquent, log level yang bisa dikustomisasi per-tipe eksekusi, komponen anonim pada path custom, dll.\nForm helper \u0026ldquo;old\u0026rdquo; sekarang bisa menerima model Andrew Arscott mengubah helper old() sehingga bisa menerima model sebagai argumen keduanya.\n1 2 3 4 5 {{-- Dulu --}} \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;, $user-\u0026gt;name) }}\u0026#34; {{-- Sekarang --}} \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;, $user) }} Mengizinkan Penyesuaian Tingkat Log pada Exception Handling Tom Witkowski mengkontribusikan fitur penyesuaian tingkat log untuk Exception yang dilaporkan pada Exception Handler.\n1 2 3 4 5 6 7 8 9 10 11 use PDOException; use Psr\\Log\\LogLevel; /** * A list of exception types with their corresponding custom log level * * @var array\u0026lt;class-string\u0026lt;\\Throwable\u0026gt;, \\Psr\\Log\\LogLevel::*\u0026gt; */ protected $levels = [ PDOException::class =\u0026gt; LogLevel::CRITICAL ]; Lihat Pull Request #41925 untuk detail implementasi.\nMenemukan Komponen Blade Anonim di Jalur Tambahan Ralph J. Smit berkontribusi kemampuan untuk menemukan komponen Blade anonim di jalur tambahan:\n1 2 3 4 5 // AppServiceProvider.php public function boot() { Blade::anonymousComponentNamespace(\u0026#39;flights.bookings\u0026#39;, \u0026#39;flights\u0026#39;); } Contoh penggunaan komponen: \u0026lt;x-flights::panel :flight=\u0026quot;$flight\u0026quot; /\u0026gt;\nMetode Set pada Factory Ralph J. Smit mengkontribusikan sebuah metode set() kepada model factory untuk mengatur satu attribut pada model:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Sebelum: EloquentModel::factory() -\u0026gt;create([\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;foo\u0026#39;]); // Setelah: EloquentModel::factory() -\u0026gt;set(\u0026#39;name\u0026#39;, \u0026#39;foo\u0026#39;) -\u0026gt;create(); // Sebelum EloquentModel::factory() -\u0026gt;someMethod() -\u0026gt;create([\u0026#39;country\u0026#39; =\u0026gt; \u0026#39;NL\u0026#39;]); // Setelah EloquentModel::factory() -\u0026gt;someMethod() -\u0026gt;set(\u0026#39;country\u0026#39;, \u0026#39;NL\u0026#39;) -\u0026gt;create(); Catatan Peluncuran Anda bisa melihat daftar fitur baru, perubahan, dan komparasi dari 9.7.0 dan 9.8.0 pada GitHub.\nBerita diambil dan diterjemahkan dari Laravel News.\n","permalink":"https://shiroyuki.dev/article/laravel-9-8-diluncurkan/","summary":"Tim Laravel telah meluncurkan v9.8, dengan fitur pengaksesan form data dari model Eloquent, log level yang bisa dikustomisasi per-tipe eksekusi, komponen anonim pada path custom, dll.\nForm helper \u0026ldquo;old\u0026rdquo; sekarang bisa menerima model Andrew Arscott mengubah helper old() sehingga bisa menerima model sebagai argumen keduanya.\n1 2 3 4 5 {{-- Dulu --}} \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;, $user-\u0026gt;name) }}\u0026#34; {{-- Sekarang --}} \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;, $user) }} Mengizinkan Penyesuaian Tingkat Log pada Exception Handling Tom Witkowski mengkontribusikan fitur penyesuaian tingkat log untuk Exception yang dilaporkan pada Exception Handler.","title":"Laravel 9.8 diluncurkan! Pembaruan helper \"old\", metode \"set\" pada Factory, dan lainnya!"},{"content":" Konsep Dasar Sistem Secara sederhana suatu sistem dapat diartikan sebagai suatu kumpulan atau himpunan dari unsur, komponen, atau variabel yang terorganisir, saling berinteraksi, saling tergantung satu sama lain, dan terpadu. Salah satu teori mengenai sistem secara umum pertama kali yaitu, teori yang diuraikan oleh Kenneth Boulding terutama menekankan perhatian terhadap setiap bagian yang membentuk sebuah sistem.\nTeori sistem mengatakan bahwa setiap unsur pembentuk organisasi harus mendapat perhatian penuh dari pemimpin organisasi secara merata baik komponen fisik maupun non-fisik.Unsur-unsur yang mewakili suatu sistem secara umum adalah memasukan (input),pengolahan (processing), dan keluaran (output).\nKonsep lain yang terkandung di dalam definisi tentang sistem adalah konsep sinergi. Konsep ini di dalam suatu sistem adalah output dari suatu organisasi diharapkan lebih besar daripada output individual atau output masing-masing bagian.\nKegiatan bersama dari bagian yang terpisah, tetapi saling berhubungan secara bersama-sama akan menghasilkan efek total yang lebih besar daripada jumlah bagian secara individu dan terpisah. Karena itu, sistem organisasi mengutamakan pekerjaan-pekerjaan di dalam tim.\nSelain itu, cara pandang sistem suatu pelaksanaan pekerjaan secara integratif baik menyangkut manusia, perkakas, metode, maupun sumber daya yang dimanfaatkan. Karena itu, ada banyak macam cara untuk mengkategorikan suastu sistem. Seperti: sistem terbuka atau tertutup, sistem manusia, sistem mesin, atau gabungan keduanya, sistem deterministik atau probabilistik dan masih banyak lagi.\nIstilah sistem untuk sekarang ini masih banyak dipakai. Sebuah sistem terdiri atas bagian-bagian atau komponen yang terpadu untuk mencapai suatu tujuan. Model dasar dari bentuk sistem ini adalah adanya masukan, pengolahan, dan keluaran. Akan tetapi, sistem ini dapat dikembangkan hingga menyertakan media penyimpanan. Sistem dapat terbuka dan tertutup, akan tetapi sistem informasi biasanya adalah sistem terbuka yang dapat menerima beberapa masukan dari lingkungan luarnya.\nMelakukan unsur sistem atas subsistem adalah tindakan penting dalam menyederhanakan perancangan sistem. Penggunaan sistem biasanya membutuhkan beberapa mekanisme pemisah untuk mengurangi kerumitan dalam koordinasi dan komunikasi. Pengendalian dalam sistem adalah berdasar kepada umpan balik yang dapat terbuka dan tertutup. Sedangkan penyaringan dapat digunakan untuk persyaratan pengolahan dengan mengurangi masukan. Hukum variasi kebutuhan menjadi penting untuk merancang sistem pengendalian karena menyatakan perlunya suatu metode yang mengadakan tanggapan pengendalian bagi setiap keadaan variable yang terkendali. Rancangan sistem diterapkan dalam tahapan teratur pada analisi sistem dan pada manajemen proyek. Konsep-konsep sistem juga mempunyai penerapan langsung pada perancangan sistem informasi (sisfo).\nKonsep Dasar Informasi Sistem informasi adalah suatu sistem didalam suatu organisasi yang mempertemukan kebutuhan pengelolaan transaksi harian, mendukung operasi, bersifat manajerial, dan kegiatan strategi dari suatu organisasi dan menyediakan pihak luar tertentu dengan laporan-laporan yang dibutuhkan.\nSistem Informasi (SI) adalah kombinasi dari teknologi informasi dan aktivitas orang yang menggunakan teknologi itu untuk mendukung operasi dan manajemen. Dalam arti yang sangat luas, istilah sistem informasi yang sering digunakan merujuk kepada interaksi antara orang, proses algoritmik, data, dan teknologi. Dalam pengertian ini, istilah ini digunakan untuk merujuk tidak hanya pada penggunaan organisasi teknologi informasi dan komunikasi (TIK), tetapi juga untuk cara di mana orang berinteraksi dengan teknologi ini dalam mendukung proses bisnis.\nAda yang membuat perbedaan yang jelas antara sistem informasi, dan komputer sistem TIK, dan proses bisnis. Sistem informasi yang berbeda dari teknologi informasi dalam sistem informasi biasanya terlihat seperti memiliki komponen TIK. Hal ini terutama berkaitan dengan tujuan pemanfaatan teknologi informasi. Sistem informasi juga berbeda dari proses bisnis. Sistem informasi membantu untuk mengontrol kinerja proses bisnis.\nAlter berpendapat untuk sistem informasi sebagai tipe khusus dari sistem kerja. Sistem kerja adalah suatu sistem di mana manusia dan/atau mesin melakukan pekerjaan dengan menggunakan sumber daya untuk memproduksi produk tertentu dan/atau jasa bagi pelanggan. Sistem informasi adalah suatu sistem kerja yang kegiatannya ditujukan untuk pengolahan (menangkap, transmisi, menyimpan, mengambil, memanipulasi dan menampilkan) informasi\nSistem informasi terdiri dari komponen-komponen yang disebut dengan istilah blok bangunan (building block) yaitu:\nBlok masukkan (input block). Input mewakili data yang masuk ke dalam sistem informasi. Input disini termasuk metode-metode dan media yang digunakan untuk menangkap data yang akan dimasukkan, yang dapat berupa dokumen dasar\nBlok model (model block). Blok ini terdiri dari kombinasi prosedur, logika dan metode matematik yang akan memanipulasi data input dan data yang tersimpan di basis data dengan cara yang sudah tertentu untuk menghasilkan keluaran yang sudah diinginkan.\nBlok keluaran (output block)Produk dari sistem informasi adalah keluaran yang merupakan informasi yang berkualitas dan dokumentasi yang berguna untuk semua tingkatan manajemen serta semua pemakai sistem.\nBlok teknologi (technology block). Teknologi digunakan untuk menerima input, menjalankan model, menyimpan dan mengakses data, menghasilkan dan mengirimkan keluaran dan membantu pengendalian diri secara keseluruhan.\nTeknologi terdiri dari unsur utama:\nTeknisi (brainware) Perangkat lunak (software) Perangkat keras (hardware) Blok basis data (database block). Merupakan kumpulan dari data yang saling berhubungan satu dengan yang lainnya, tersimpan diperangkat keras komputer dan digunakan perangkat lunak untuk memanipulasinya.\nBlok kendali (control block). Banyak faktor yang dapat merusak sistem informasi, misalnya bencana alam, api, temperatur tinggi, air, debu, kecurangan-kecurangan, kejanggalan sistem itu sendiri, kesalahan-kesalahan ketidakefisienan, sabotase dan sebagainya. Beberapa pengendalian perlu dirancang dan diterapkan untuk meyakinkan bahwa hal-hal yang dapat merusak sistem dapat dicegah atau bila terlanjur terjadi kesalahan dapat langsung diatasi.\nKonsep Dasar Sistem Informasi Sistem informasi adalah suatu sistem didalam suatu organisasi yang mempertemukan kebutuhan pengelolaan transaksi harian, mendukung operasi, bersifat manajerial, dan kegiatan strategi dari suatu organisasi dan menyediakan pihak luar tertentu dengan laporan-laporan yang dibutuhkan.\nDefinisi sistem informasi adalah suatu sistem di dalam suatu organisasi yang mempertemukan kebutuhan pengolahan transaksi harian yang mendukung operasi bersifat manajerial dan kegiatan strategi dari suatu organisasi dan menyediakan pihak luar tertentu dengan laporan-laporan yang diperlukan.\n","permalink":"https://shiroyuki.dev/college/konsep-dasar-sistem-informasi-dan-sistem-informasi/","summary":"Konsep Dasar Sistem Secara sederhana suatu sistem dapat diartikan sebagai suatu kumpulan atau himpunan dari unsur, komponen, atau variabel yang terorganisir, saling berinteraksi, saling tergantung satu sama lain, dan terpadu. Salah satu teori mengenai sistem secara umum pertama kali yaitu, teori yang diuraikan oleh Kenneth Boulding terutama menekankan perhatian terhadap setiap bagian yang membentuk sebuah sistem.\nTeori sistem mengatakan bahwa setiap unsur pembentuk organisasi harus mendapat perhatian penuh dari pemimpin organisasi secara merata baik komponen fisik maupun non-fisik.","title":"Konsep Dasar Sistem, Informasi, dan Sistem Informasi"}]