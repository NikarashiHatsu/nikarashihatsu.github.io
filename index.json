[{"content":"Halo, nama saya Aghits Nidallah üëã. Saya seorang {full-stack,mobile} developer, mahasiswa, dan {manusia,robot} yang hidup dengan menikmati kopi 24/7 ‚òïÔ∏è.\n","date":"13 Oktober 2023","permalink":"/","section":"","summary":"Halo, nama saya Aghits Nidallah üëã.","title":""},{"content":"","date":"13 Oktober 2023","permalink":"/tags/android/","section":"Tags","summary":"","title":"android"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/android-studio/","section":"Tags","summary":"","title":"android studio"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/article/","section":"Tags","summary":"","title":"article"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/belajar/","section":"Tags","summary":"","title":"belajar"},{"content":"Karena keterbatasan spesifikasi PC yang kita miliki, sering kita tidak dapat menjalankan emulator dengan lancar. Disinial dimana USB Debugging sangat membantu!\nCatatan: Cara untuk mengaktifkan USB debugging berbeda-beda pada setiap merk, pastikan teman-teman mencari tutorial yang tepat dengan menggunakan bantuan Mbah Google!\nMengaktifkan USB Debugging # Kasus yang akan Saya contohkan kali ini adalah menggunakan HP Poco X3 NFC, jadi jika teman-teman memiliki HP dengan brand sejenis, mungkin bisa follow-along.\nBuka pengaturan, lalu buka About Phone Setelah itu, tekan MIUI version (For POCO) berkali-kali sampai dengan teman-teman lihat notifikasi \u0026ldquo;Now you are a developer\u0026rdquo;. Karena Saya sudah mengaktifkan opsi ini, notifikasinya berubah menjadi \u0026ldquo;No need, you are already a developer.\u0026rdquo; Kembali ke menu pengaturan awal, scroll ke paling bawah, lalu buka Additional settings Scroll ke bawah lagi, lalu buka Developer options Scroll sedikit ke bawah, lalu perbolehkan USB Debugging Menjalankan aplikasi ke HP melalui USB Debugging # Colokkan kabel USB ke PC dan HP teman-teman, dan teman-teman akan melihat dialog seperti ini. Tekan OK. Di Android Studio, pastikan teman-teman menggunakan device yang sesuai, lalu klik tombol play. Tunggu Gradle Build, lalu teman-teman akan melihat dialog seperti ini pada HP teman-teman. Tekan Install. Tada! Aplikasi terinstal! There you have it! See you on the next article!\n","date":"13 Oktober 2023","permalink":"/artikel/2023-10/13-usb-debugging/","section":"Artikel-artikel","summary":"Karena keterbatasan spesifikasi PC yang kita miliki, sering kita tidak dapat menjalankan emulator dengan lancar.","title":"Catatan Belajar Juara Android 2023 - #7 USB Debugging"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/debugging/","section":"Tags","summary":"","title":"debugging"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/google/","section":"Tags","summary":"","title":"google"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/juara-android/","section":"Tags","summary":"","title":"juara android"},{"content":"","date":"13 Oktober 2023","permalink":"/series/juara-android-2023/","section":"Series","summary":"","title":"Juara Android 2023"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"kotlin"},{"content":"","date":"13 Oktober 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/usb/","section":"Tags","summary":"","title":"usb"},{"content":"Hai! Kembali lagi di artikel #JuaraAndroid2023. Kali ini kita akan membahas tentang Emulator. Emulator ini bekerja sebagai perangkat disimulasikan pada mesin kita, jadi walaupun kita tidak memiliki HP Android, kita bisa menjalankan aplikasi yang kita bangun di PC kita langsung.\nPerlu diperhatikan bahwa Emulator akan memakan resource yang cukup besar, jadi wajar jika teman-teman merasakan sebuah \u0026ldquo;Lag\u0026rdquo; atau bahkan \u0026ldquo;Stutter\u0026rdquo;, jadi harap bersabar ketika menjalankan emulator karena performanya tidak akan sama dengan memiliki HP Android secara langsung.\nMenambahkan Emulator # Pada aplikasi Android Studio, klik dropdown yang ada di sebelah kiri tombol play, lalu klik Device Manager Device Manager akan muncul panel di sebelah kanan. Panel ini akan menunjukkan beberapa Virtual Device yang sudah dibuat, karena saya belum membuat satupun, jadi kosong.\nUntuk menambah Virtual Device baru, klik Create virtual device. Akan muncul sebuah dialog yang berisikan daftar-daftar device yang tersedia. Pilih device yang teman-teman inginkan, kali ini Saya ingin menggunakan Pixel 7 Pro. Setelah itu klik Next. Pilih juga API level yang diinginkan, kali ini Saya menggunakan API 34 (Android 13). Karena Saya belum memiliki imagenya, Saya harus mengunduh image dari API tersebut dengan cara mengklik tombol unduh yang berada di sebelah Release Name dari masing-masing API. Setelah menekan unduh, akan muncul popup yang berisi progress pengunduhan\nSetelah selesai mengunduh, klik Finish dan teman-teman akan diarahkan kembali ke dialog pertama. Klik API yang tadi diunduh, lalu klik Next\nAtur nama AVD sesuai yang diinginkan, lalu klik Finish Selamat, Anda telah membuat Android Virtual Device. Untuk menjalankan AVD, simpelnya, klik tombol play pada AVD di panel Device Manager.\nRun pertama biasanya akan memakan waktu yang cukup lama, jadi bisalah saambil ngopi-ngopi dulu ‚òï\nNanti, akan muncul sebuah tampilan Android yang berada di panel kanan, persis di bawah Device Manager. Itulah AVD teman-teman.\nMenjalankan aplikasi pada AVD # Untuk menjalankan aplikasi, klik tombol play yang ada di kanan atas. Pastikan AVD yang digunakan sudah sesuai dengan AVD mana yang ingin teman-teman pakai.\nTunggu beberapa saat untuk Gradle Build dan voila!, aplikasi dijalankan!\n","date":"13 Oktober 2023","permalink":"/artikel/2023-10/13-emulator/","section":"Artikel-artikel","summary":"Hai! Kembali lagi di artikel #JuaraAndroid2023.","title":"Catatan Belajar Juara Android 2023 - #6 Emulator"},{"content":"","date":"13 Oktober 2023","permalink":"/tags/emulator/","section":"Tags","summary":"","title":"emulator"},{"content":"Akhirnya, yang ditunggu-tunggu, Android Studio! Setelah beberapa hari belajar dasar Kotlin, saatnya instalasi Android Studio. Tapi keknya nggak bakal langsung terjun bikin aplikasinya deh. üòÜ\nJadi, Android Studio ini IDE resmi untuk pembangunan aplikasi Android, yang dibangun dan didistribusikan oleh Google. IDE ini adalah alat yang digunakan buat mendesain, membangun, menjalankan, dan menguji coba sebuah perangkat lunak yang dibangun.\nAndroid Studio menggunakan Intellij IDEA sebagai fondasinya dan plugin Android sudah termasuk didalamnya. Saya gak akan jelasin secara detail untuk instalasinya karena saya udah punya, jadi untuk yang mau download, silahkan download di sini.\nAplikasi Android Pertamaku # Untuk permulaan, kita akan membuat aplikasi Android menggunakan template Empty Activity.\nBuka aplikasi Android Studio, karena Saya pakai Mac, jadi cari pakai Spotlight saja Pada dialog Welcome to Android Studio, klik New Project. Karena ada perbedaan versi, tampilan bisa jadi berbeda-beda pada setiap versinya, namun secara esensi, fungsi yang sama akan tetap ada di interfacenya. Setelah New Project diklik, akan muncul dialog dengan daftar template yang sudah disediakan oleh Android Studio\nProject Template ini adalah blueprint yang disediakan untuk tipe aplikasi tertentu. Template membuat struktur project yang dibutuhkan oleh Android Studio untuk membangun projek teman-teman, template yang dipilih akan memberikan kode yang dibutuhkan sebagai awalan, sehingga pengembangan awal bisa dilakukan lebih cepat.\nPastikan pilih tab Phone and Tablet\nKlik template Empty Activity. Template ini akan membuat projek simpel yang bisa digunakan untuk membangun aplikasi Compose. Hanya memiliki satu halaman dan menampilkan teks \u0026quot;Hello Android!\u0026quot;.\nKlik Next, lalu dialog New Project akan terbuka. Akan ada beberapa inputan yang perlu diatur\nAtur projeknya seperti ini:\nInputan Name digunakan untuk nama dari project teman-teman, untuk ini gunakan \u0026ldquo;Greeting Card\u0026rdquo; saja.\nBiarkan Package Name seperti yang sudah ada, karena akan secara otomatis mengikuti nama project.\nBiarkan Save Location seperti yang sudah ada.\nPilih API 24: Android 7.0 (Nougat) dari pilihan minimum SDK.\nSetelah itu, klik Finish, disini yang bakal lama karena setup project, mengunduh / mengupgrade beberapa library, Gradle Sync, dll. Tunggu saja, proses ini berlangsung dari beberapa detik ke beberapa menit tergantung spek dan internet masing-masing.\nNah, disini ada yang sedikit berbeda dari pengalaman saya terakhir membuka aplikasi ini 2 tahun yang lalu. Pertama, karena udah gak familiar ya, jadi asing banget tampilannya; Kedua, UInya overwhelming, banyak yang harus dipelajari.\nDisini kan ada 3 tampilan, kiri, tengah, dan kanan, nah menurut Google ini nama-nama tampilannya:\nProject View (kiri) yang menampilkan folder dan file Code View (tengah) dimana teman-teman mengedit kode Design View (kanan) preview tentang bagaimana aplikasi akan terlihat Project File # Di bagian kiri pada Android Studio, terdapat Project Tab. Project Tab menunjukkan file dan folder dari suatu project. Nanti akan ada folder yang berbentuk seperti com.example.greeting tergantung nama project yang teman-teman berikan di awal-awal.\nSecara default, dropdown Android yang ada di bagian atas adalah tampilan default yang didesain untuk mempermudah navigasi teman-teman pada saat pengembangan. Namun tentunya hal ini akan berbeda jika dibuka oleh file explorer seperti Windows Explorer, Dolphin, atau Finder. Untuk mengubah hierarki folder seperti layaknya file explorer, ubah dropdown Android ke Project Source File.\nUntuk mengembalikan lagi ke hierarki semula, ubah ke Android.\nMengubah Teks # Konteks mengubah teks kali ini bukanlah mengubah teks pada Kotlin, tapi bagaimana caranya memanipulasi teks pada aplikasi Android yang akan kita bangun.\nPertama-tama mari kita lihat kode yang ada pada file MainActivity.kt. Ada beberapa fungsi yang secara dibuat secara otomatis pada saat pembuatan projek kosong tadi. Kita ambil potongan kode dari kelas MainActivity:\nclass MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContent { GreetingTheme { // A surface container using the \u0026#39;background\u0026#39; color from the theme Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) { Greeting(\u0026#34;Android\u0026#34;) } } } } } Fungsi onCreate() adalah sebuah entry point dari aplikasi Android ini, yang akan memanggil fungsi-fungsi lainnya untuk membangun sebuah user interface yang solid. Perbedaannya dengan Kotlin, Kotlin menggunakan fungsi main() sebagai entry pointnya.\nFungsi setContent() yang ada di dalam fungsi onCreate() digunakan untuk mendefinisikan tata letak fungsi composable. Semua fungsi yang ditandai dengan anotasi @Composable dapat dipanggil dari fungsi setContent() atau dari fungsi Composable lainnya. Anotasi tersebut akan menginstruksikan kompiler Kotlin bahwa fungsi ini digunakan oleh Jetpack Compose untuk membangun User Interface.\nSelanjutnya, kita lihat fungsi Greeting() yang merupakan fungsi Composable, perhatikan adanya anotasi @Composable di atas fungsinya. Fungsi Composable ini mengambil beberapa input dan membuat tampilannya pada layar.\n@Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Text(text = \u0026#34;Hello $name!\u0026#34;) } Sama saja seperti materi Fungsi Pada Kotlin, namun ada beberapa perbedaan:\nAda anotasi @Composable sebelum penulisan fungsi; Nama fungsi @Composable menggunakan PascalCase; Fungsi @Composable tidak me-return apapun; Saat ini, fungsi Greeting() membutuhkan name dan mengucapkan Hello ke orang tersebut. Kita akan ubah fungsi ini supaya menampilkan pesan yang lebih friendly dan akrab.\nUbah pesan dari fungsi Greeting() untuk memperkenalkan diri Anda sendiri, alih-alih mengatakan \u0026ldquo;Hello\u0026rdquo;: @Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Text(text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;) } Preview Android akan secara otomatis memperbarui previewnya: Nah, lebih mantap sekarang. Tapi, bisa dilihat lagi preview yang digunakan ini bukan nama teman-teman. Jadi, saatnya kita mengubah nama \u0026ldquo;Android\u0026rdquo; menjadi namamu. Bukan nama sendiri juga gak masalah sih, yang penting nama hehe.\nFungsi GreetingPreview() yang ada di paling bawah script adalah sebuah fitur yang keren (pake banget) dimana teman-teman bisa melihat bagaimana composable teman-teman terlihat, tanpa harus membangun keseluruhan aplikasi. Untuk membuat sebuah preview, anotasikan fungsi tersebut menggunakan anotasi @Composable dan @Preview. Anotasi @Preview akan menginstruksikan Android Studio bahwa composable tersebut harus ditampilkan pada Design View.\n@Preview(showBackground = true) @Composable fun GreetingPreview() { GreetingTheme { Greeting(\u0026#34;Android\u0026#34;) } } Kita perbarui fungsi GreetingPreview() menjadi nama selain Android. Let\u0026rsquo;s name it Shiroyuki. @Preview(showBackground = true) @Composable fun GreetingPreview() { GreetingCardTheme { Greeting(\u0026#34;Shiroyuki\u0026#34;) } } Jrenggggg, Greeting Preview akan secara otomatis diupdate!\nMengubah Background Color # Untuk mengatur warna latar (background color) yang berbeda, kita perlu mengelilingi Text menggunakan Surface. Surafe adalah sebuah kontainer yang merepresentasikan bagian dari sebuah UI, dimana kita dapat mengubah tampilannya, seperti warna latar atau pinggiran.\nUntuk mengelilingi Text menggunakan sebuah Surface, klik baris yang ingin diubah, lalu tekan (Alt+Enter untuk Windows atau Option+Enter untuk Mac), lalu pilih Surround with widget. Pilih Surround with Container Secara default, Android Studio akan menggunakan Box, tapi kalian bisa mengubah ini ke tipe kontainer yang lain.\n@Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Box { Text( text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;,, modifier = modifier ) } } Hapus Box dan ketikkan Surface() @Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Surface() { Text( text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;,, modifier = modifier ) } } Pada kontainer Surface, tambahkan parameter color, atur valuenya ke Color. @Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Surface(color = Color) { Text( text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;,, modifier = modifier ) } } Pada saat teman-teman mengetik Color, teman-teman akan melihat bahwa Color ini memiliki underline merah, yang artinya Android Studio tidak dapat memecahkan masalah ini. Untuk memecahkan masah ini, tekan (Alt+Enter untuk Windows atau Option+Enter untuk Mac), lalu pilih Import. Akan muncul beberapa opsi, gunakan androidx.compose.ui.graphics\nPerhatikan underline merah yang masih ada pada Color. Untuk memperbaiki ini, ketikkan titik (.) setelah Color, lalu pilih salah satu warna yang teman-teman inginkan. Saat ini, Saya ingin menggunakan warna merah (Red).\nKarena warnanya terlalu mencolok, Saya ubah warna tersebut menjadi warna tema Shiroyuki.dev, yaitu #ef4444: @Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Surface(color = Color(0xffef4444)) { Text( text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;, modifier = modifier ) } } Format dari Color yang digunakan adalah ARGB (Alpha, Red, Green, Blue). Hasilnya adalah seperti berikut:\nYey! Sekarang keliatan lebih natural! \\( ^^) /\nMenambahkan Padding # Sekarang, teks yang kita buat sudah memiliki warna latar, sekarang kita akan menambahkan padding di sekitar teks. Kita akan menggunakan Modifier kali ini.\nTambahkan padding ke modifier yang ada pada Text dengan ukuran 24.dp:\n@Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Surface(color = Color(0xffef4444)) { Text( text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;, modifier = modifier.padding(24.dp) ) } } Karena dp ini adalah unit yang tidak dikenal, maka teman-teman harus mengimportnya. Android Studio akan secara otomatis merekomendasikan unit.dp\nHasilnya adalah sebagai berikut:\nYey! Akhirnya kita berhasil menambahkan padding. Kelihatannya lebih luas ya? Well, there you have it!\nKode Lengkap # Klik untuk melihat kode lengkap package com.example.greeting import android.os.Bundle import androidx.activity.ComponentActivity import androidx.activity.compose.setContent import androidx.compose.foundation.layout.fillMaxSize import androidx.compose.foundation.layout.padding import androidx.compose.material3.MaterialTheme import androidx.compose.material3.Surface import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.example.greeting.ui.theme.GreetingTheme class MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContent { GreetingTheme { // A surface container using the \u0026#39;background\u0026#39; color from the theme Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) { Greeting(\u0026#34;Android\u0026#34;) } } } } } @Composable fun Greeting(name: String, modifier: Modifier = Modifier) { Surface(color = Color(0xffef4444)) { Text( text = \u0026#34;Hai, nama saya adalah $name!\u0026#34;, modifier = modifier.padding(24.dp) ) } } @Preview(showBackground = true) @Composable fun GreetingPreview() { GreetingTheme { Greeting(\u0026#34;Shiroyuki\u0026#34;) } } Ringkasan # Untuk membuat projek baru: buka Android Studio, klik New Project \u0026gt; Empty Activity \u0026gt; Next, masukkan nama yang digunakan untuk projekmu, lalu konfigurasikan pengaturan yang ingin digunakan; Untuk melihat bagaimana tampilan dari aplikasimu, gunakan panel Preview; Fungsi Composable hampir sama dengan fungsi biasa, dengan beberapa perbedaan: nama fungsi menggunakan PascalCase, lalu tambahkan anotasi @Composable sebelum pendeklarasian fungsi, dan @Composable tidak me-return apapun; Sebuah Modifier digunakan untuk mendekorasi Composable; ","date":"7 Oktober 2023","permalink":"/artikel/2023-10/07-android-studio/","section":"Artikel-artikel","summary":"Akhirnya, yang ditunggu-tunggu, Android Studio!","title":"Catatan Belajar Juara Android 2023 - #5 Android Studio"},{"content":"Hai hai, ketemu lagi di artikel #JuaraAndroid2023. Disini Saya belajar tentang fungsi. Sebelumnya kita melihat program sederhana yang mencetak Hai, Ibu!, nah secara tidak langsung, program tersebut memiliki dua fungsi, yaitu:\nmain() yang dibutuhkan di setiap program Kotlin, sebagai permulaan dari program. println() yang berfungsi untuk mencetak teks. Fungsi sejatinya digunakan untuk memecah blok kode menjadi beberapa baris kode yang bisa digunakan sewaktu-waktu. Teman-teman mungkin menyadari bahwa fungsi main() tidak dipanggil secara eksplisit oleh pengembang, namun fungsinya tetap terpanggil pada saat program dijalankan, mengapa? Hal itu dikarenakan kompiler Kotlin menggunakan main() sebagai permulaan program.\nMendefinisikan dan memanggil fungsi # Yap, fungsi, seperti yang kita tahu bisa didefinisikan dan dipanggil setiap waktu. Anggap saja kita ingin membuat sebuah fungsi yang digunakan untuk mencetak ucapan selamat ulang tahun.\nfun main() { println(\u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34;) println(\u0026#34;Sekarang umurmu 18 tahun!\u0026#34;) } Program sederhana diatas akan membuat output seperti ini:\nSelamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Sekarang, bagaimana caranya untuk kita agar bisa membuat fungsi tersebut bisa dipakai sewaktu-waktu? Tentunya dengan cara membuat fungsi baru lagi, anggap saja fungsi baru tersebut akan kita namakan ucapanUltah(), berikut contoh kodenya:\nfun main() { ucapanUltah() } fun ucapanUltah() { println(\u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34;) println(\u0026#34;Sekarang umurmu 18 tahun!\u0026#34;) } Cukup simpel bukan? Lalu, tetapi\u0026hellip;bagaimana jika kita ingin mengubah nama orang yang ulang tahun beserta umurnya? Kita tidak mungkin membuat setiap fungsi seperti ucapanUltahWafdaKe18() serta ucapanUltahWafdaKe19() dan seterusnya kan? Disitulah argumen / parameter fungsi dibutuhkan. Akan kita bahas di bagian selanjutnya.\nMengembalikan sebuah value dari sebuah fungsi # Jika teman-teman baru dalam pemrograman, bahasa yang strictly-typed mungkin akan menjadi hal yang sulit dicerna, namun, karena Kotlin adalah bahasa yang cukup dinamis tetapi tetap strict, bisa Saya katakan bahwa Kotlin adalah bahasa yang sempurna untuk dipelajari sebagai pemula.\nReturn value mengacu kepada nilai yang dikembalikan oleh sebuah fungsi atau ekspresi. Anggaplah kita ingin membuat sebuah fungsi yang berfungsi untuk menambahkan angka a dan angka b. Apa yang kita ekspektasikan? Tentu saja jumlah dari a + b, dengan tipe data angka.\nfun tambah(a: Int, b: Int): Int { return a + b; } Jika fungsi yang teman-teman buat adalah fungsi singkat, tanpa ada pengoperasian yang kompleks, teman-teman bisa membuat inline function atau one-line function, yaitu fungsi yang dibuat hanya dengan menggunakan 1 baris kode:\nfun tambah(a: Int, b: Int): Int = a + b Jadi, secara anatomi fungsi yang ada pada Kotlin, sejauh ini kita bisa simpulkan seperti berikut:\nReturn type # Secara default, jika teman-teman tidak menspesifikasikan return type, maka Kotlin akan secara otomatis menggunakan return type Unit. Unit pada Kotlin kurang lebih sama seperti:\nvoid pada Java; Void / empty tuple () pada Swift; None pada Python; self / static pada PHP; dll. Yuk kita belajar cara menggunakan return type dengan memodifikasi fungsi ucapanUltah() yang sudah kita buat di atas.\nPada fungsi ucapanUltah(), tambahkan titik dua : setelah kurung tutup, dan spesifikasikan return type-nya sebagai Unit fun main() { ucapanUltah() } fun ucapanUltah(): Unit { println(\u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34;) println(\u0026#34;Sekarang umurmu 18 tahun!\u0026#34;) } Kita jalankan programnya, dan semuanya berjalan normal seperti biasa Selamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Perhatikan bahwa dengan return type Unit, ataupun tanpa return type sama sekali, program masih bisa berjalan dengan normal.\nMengembalikan String dari fungsi ucapanUltah() # Untuk mendemokan bagaimana sebuah fungsi dapat mengembalikan sebuah nilai, kita akan modifikasi ucapanUltah() untuk mengembalikan String, alih-alih kita mencetak outputnya ke konsol.\nUbah return type Unit ke String fun main() { ucapanUltah() } fun ucapanUltah(): String { println(\u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34;) println(\u0026#34;Sekarang umurmu 18 tahun!\u0026#34;) } Ketika dijalankan, kita akan mendapatkan error, karena fungsi membutuhkan return type yang valid. Karena tidak ada nilai yang dikembalikan / di-return, maka compiler bingung dan mencetak Exception: A \u0026#39;return\u0026#39; expression required in a function with a block body (\u0026#39;{...}\u0026#39;) Tapi don\u0026rsquo;t worry, kita tetap bisa mengubah kode, ingat moto kita bahwa \u0026ldquo;Jika kode tersebut salah, berarti kita menuju jalan yang benar\u0026rdquo;.\nKarena kita hanya bisa menggunakan 1 return pada setiap fungsi, maka kita harus mengubah fungsi println() menjadi masing-masing variabel yang merepresentasikan ucapan fun ucapanUltah(): String { val ucapanNama = \u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu 18 tahun!\u0026#34; } Menggunakan sintaks string template yang ada di seri ke-3, kita bisa menggabungkan 2 pesan di atas menjadi 1 return. Kita juga akan menggunakan karakter \\n yang digunakan untuk memisah baris.\nfun ucapanUltah(): String { val ucapanNama = \u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu 18 tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Pada fungsi main(), karena kita telah mengubah fungsi ucapanUltah() untuk mengembalikan sebuah nilai, teman-teman bisa simpan hasil kembaliannya pada sebuah variabel string. Sehingga kode lengkapnya terlihat seperti ini: fun main() { val ucapan: String = ucapanUltah() println(ucapan) } fun ucapanUltah(): String { val ucapanNama = \u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu 18 tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Hasil dari program di atas adalah sebagai berikut:\nSelamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Karena ucapanUltah() adalah hasil dari return langsung, kita bisa menggunakan secara langsung fungsi ucapanUltah() ke println() sehingga kita tidak perlu mengalokasikan sedikit memori ke variabel ucapan.\nfun main() { println(ucapanUltah()) } fun ucapanUltah(): String { val ucapanNama = \u0026#34;Selamat ulang tahun, Wafda! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu 18 tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Parameter / Argumen # Secara tidak langsung, jika teman-teman perhatikan, fungsi println() memiliki 1 argumen yang menerima String untuk dicetak pada terminal / konsol. Jadi, sebenarnya sejauh ini teman-teman sudah mengerti cara menggunakan parameter.\nSecara umum, parameter adalah nilai yang diberikan ke fungsi, atau konstruktor saat mereka dipanggil. Sehingga parameter yang digunakan dapat diproses pada blok kode sebuah fungsi. Anatominya adalah sebagai berikut:\nTentu saja, tidak ada batas dalam penggunaan parameter yang ingin teman-teman gunakan, jadi, bebaslah berkreasi!\nUntuk kasus ini, yuk kita ubah fungsi ucapanUltah() sehingga bisa menerima Nama dan Usia:\nfun ucapanUltah(nama: String, usia: Int): String { val ucapanNama = \u0026#34;Selamat ulang tahun, $nama! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu $usia tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Apa keuntungan yang kita dapat dari perubahan fungsi tersebut? Kita bisa secara dinamis mengubah Nama dan Usia sesuai dengan data yang kita inginkan. Seperti contoh:\nfun main() { println(ucapanUltah(\u0026#34;Wafda\u0026#34;, 18)) } fun ucapanUltah(nama: String, usia: Int): String { val ucapanNama = \u0026#34;Selamat ulang tahun, $nama! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu $usia tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Program di atas akan mencetak teks seperti berikut:\nSelamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Karena fungsi bersifat bisa dipanggil berkali-kali, sesuai dengan apa yang kita inginkan, maka kita bisa menggunakan fungsi tersebut berulang kali, sesuka hati, terserah kita:\nfun main() { println(ucapanUltah(\u0026#34;Wafda\u0026#34;, 18)) println(ucapanUltah(\u0026#34;Wangi\u0026#34;, 14)) } fun ucapanUltah(nama: String, usia: Int): String { val ucapanNama = \u0026#34;Selamat ulang tahun, $nama! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu $usia tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Hasil dari program di atas adalah sebagai berikut:\nSelamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Selamat ulang tahun, Wangi! üéâ Sekarang umurmu 14 tahun! Pretty fun ya? Definitely fun as hell.\nNamed Arguments # Fungsi ucapanUltah() yang telah kita buat sejauh ini menerima 2 parameter, yaitu nama dan usia. Namun pada saat pemanggilan ucapanUltah(), secara sekilas kita tidak bisa mengetahui parameter apa yang kita isikan.\nIDE modern seperti VSCode atau Android Studio akan secara otomatis memberikan informasi argumen apa saja yang teman-teman butuhkan, namun pada IDE yang lebih simpel seperti Notepad++ atau Sublime Text yang tidak memiliki fitur tersebut, teman-teman sesama programmer akan mendapat suatu kebingungan. \u0026ldquo;Lho tetiba ada fungsi ucapanUltah() tapi gak jelas parameter apa yang dipakai\u0026rdquo;.\nJadi, untuk menambah keterbacaan kode, kita menggunakan Named Arguments. Pengimplementasiannya pada fungsi main() akan terlihat sebagai berikut:\nfun main() { println(ucapanUltah(nama = \u0026#34;Wafda\u0026#34;, usia = 18)) println(ucapanUltah(nama = \u0026#34;Wangi\u0026#34;, usia = 14)) } Lalu apa keuntungan dari Named Arguments ini? Pertama, keterbacaan kode menjadi lebih baik; Kedua, walaupun posisi argumen dibolak-balik, fungsi akan tetap berjalan karena kompiler mengetahui argumen apa yang digunakan:\nfun main() { println(ucapanUltah(nama = \u0026#34;Wafda\u0026#34;, usia = 18)) println(ucapanUltah(usia = 14, nama = \u0026#34;Wangi\u0026#34;)) } Kode di atas akan tetap berjalan normal seperti biasa dengan output sebagai berikut\nSelamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Selamat ulang tahun, Wangi! üéâ Sekarang umurmu 14 tahun! Default Arguments # Kita mengetahui bahwa ucapanUltah() sekarang memiliki 2 argumen, namun apa yang terjadi jika fungsi ucapanUltah() dipanggil langsung tanpa mengirimkan nilai-nilai argumennya? Anggap kita memiliki sebuah program seperti ini:\nfun main() { println(ucapanUltah()) } fun ucapanUltah(nama: String, usia: Int): String { val ucapanNama = \u0026#34;Selamat ulang tahun, $nama! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu $usia tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Kotlin akan memberikan Exception / error seperti ini:\nNo value passed for parameter \u0026#39;nama\u0026#39; No value passed for parameter \u0026#39;usia\u0026#39; Disinilah Default Arguments dibutuhkan, jadi, walaupun tanpa nilai argumen yang diberikan, program akan tetap bisa berjalan menggunakan nilai default yang sudah dispesifikasikan. Mari ubah fungsi ucapanUltah() kita:\nfun ucapanUltah(nama: String = \u0026#34;Aghits\u0026#34;, usia: Int = 22): String { val ucapanNama = \u0026#34;Selamat ulang tahun, $nama! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu $usia tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Kode lengkapnya akan terlihat seperti ini, dengan tambahan beberapa contoh ucapan yang sudah kita buat di atas:\nfun main() { println(ucapanUltah()) println(ucapanUltah(nama = \u0026#34;Wafda\u0026#34;, usia = 18)) println(ucapanUltah(usia = 14, nama = \u0026#34;Wangi\u0026#34;)) } fun ucapanUltah(nama: String = \u0026#34;Aghits\u0026#34;, usia: Int = 22): String { val ucapanNama = \u0026#34;Selamat ulang tahun, $nama! üéâ\u0026#34; val ucapanUsia = \u0026#34;Sekarang umurmu $usia tahun!\u0026#34; return \u0026#34;$ucapanNama\\n$ucapanUsia\u0026#34; } Sekarang, programnya akan bisa berjalan tanpa ada error. Yay!\nSelamat ulang tahun, Aghits! üéâ Sekarang umurmu 22 tahun! Selamat ulang tahun, Wafda! üéâ Sekarang umurmu 18 tahun! Selamat ulang tahun, Wangi! üéâ Sekarang umurmu 14 tahun! Ringkasan # Fungsi didefinisikan menggunakan keyword fun; Fungsi membantu program yang besar sehingga lebih mudah dimaintain, dan mencegah repetisi kode; Fungsi dapat mengembalikan sebuah nilai yang bisa disimpan dalam variabel; Fungsi dapat mengambil parameter sehingga dapat digunakan dalam body dari sebuah fungsi; Argumen adalah nilai-nilai yang dikirimkan pada saat pengambilan fungsi; Teman-teman bisa menggunakan nama argumen pada saat pemanggilan fungsi. Ketika menggunakan named arguments, teman-teman bisa membolak-balik orientasi argumen tanpa memengaruhi fungsi sedikitpun; Teman-teman bisa menspesifikasikan default argument yang memungkinkan teman-teman bisa memanggil fungsi tersebut tanpa menggunakan argumen apapun; ","date":"6 Oktober 2023","permalink":"/artikel/2023-10/06-fungsi-pada-kotlin/","section":"Artikel-artikel","summary":"Hai hai, ketemu lagi di artikel #JuaraAndroid2023.","title":"Catatan Belajar Juara Android 2023 - #4 Fungsi pada Kotlin"},{"content":"","date":"6 Oktober 2023","permalink":"/tags/fungsi/","section":"Tags","summary":"","title":"fungsi"},{"content":"","date":"5 Oktober 2023","permalink":"/tags/development/","section":"Tags","summary":"","title":"development"},{"content":"","date":"5 Oktober 2023","permalink":"/series/development-log/","section":"Series","summary":"","title":"Development Log"},{"content":"Yap, bulan Oktober, tentunya bulan Hacktoberfest! Suatu event tahunan dimana pengembang berlomba-lomba untuk memberikan kontribusinya ke open-source, baik itu melalui GitHub atau GitHub. Flexing sedikit ah hehehe:\nYoi, Hacktoberfest Saya kelar di hari ke-5. A trully intensive yet fun experience. Ini pertama kalinya Saya serius di Hacktoberfest, tahun sebelumnya Saya cuma daftar, nggak ngikut sampai selesai karena kerjaan sama nggak tau mana repositori yang harus dicontribute, susah-susah soalnya wkwkwk üòÖ.\nAnyway, selamat datang di Development Log. Development Log adalah suatu seri yang berisi tentang hal-hal apa saja yang telah Saya bangun, kembangkan, atau kontribusikan terhadap suatu project baik itu open-source atau closed-source. Kebanyakan dari kontribusi open-source akan Saya cantumkan tautan issue / PR-nya, namun untuk closed-source akan Saya sertakan short commit-hashnya saja.\nWell, let\u0026rsquo;s get coding.\nOpen-source # ozdemirburak/iris PHP library for color manipulation and conversion. PHP 104 18 [2023-10-04] feat: add CMYK [2023-10-04] feat: color clone [2023-10-05] feat: safe-alpha trait [2023-10-06] fix: rgba to hlsa and hexa to hsla EbookFoundation/free-programming-books üìö Freely available programming books null 300078 57868 [2023-10-04] Improves Repo\u0026rsquo;s Code of Conducts, Contributing, and How-to Indonesian Grammars NikarashiHatsu/codeigniter4-kit A starter kit for CodeIgniter4 PHP 20 5 [2023-10-05] OPEN ISSUE: Upgrade CodeIgniter to v4.4.1 [2023-10-05] OPEN ISSUE: Upgrade DaisyUI to v3.9.1 [2023-10-05] OPEN ISSUE: Upgrade package.json and composer.json libraries\u0026rsquo; version` [2023-10-05] OPEN ISSUE: Feature Request: Edit User Profile from the Dashboard [2023-10-05] OPEN ISSUE: Hacktoberfest Issues Closed-source # AkateknoID/Pugugo # More info will be added later\nHanjuan.net/simperkim # [2023-10-04] change (guest layout): ubah penggunaan livewire filtering menjadi menggunakan menu secara langsung (#eef53f1) [2023-10-04] change (system): hapus gambar gedung (#bb68ae0) [2023-10-04] feat (map overview): custom warna poligon (#95c20aa) [2023-10-04] feat (map overview): custom warna icon (#edbdaa3) [2023-10-05] fix (point input): area can not be null (#eb2bc2a) [2023-10-05] fix (point input): latitude and longitude didn\u0026rsquo;t persists on edit (#31567a5) Hanjuan.net/sikpkp # [2023-10-11] chore (technical): ubah nama aplikasi ke Sidakan (Sistem Informasi Data Pembudidayaan Ikan) Hanjuan.net/sikanda # [2023-10-04] feat (menu): add available menus to be used (#209338e) [2023-10-04] chore (technical): merge dependabot bumps [2023-10-05] feat (dashboard): initial dashboard menus (#b2659c2) [2023-10-05] chore (dashboard): convert page to livewire (#f0ddc4b) [2023-10-05] feat (modal): mockup penerimaan perlengkapan (#123c52e) [2023-10-05] feat (modal): mockup distributor (#2598580) [2023-10-05] chore (dashboard): set distributor button to open distributor modal (#a77066a) [2023-10-05] fix (modal, distributor): label penanggungjawab overflow (#7be8e60) [2023-10-05] feat (modal): perlengkapan (#3deee02) [2023-10-05] fix (modal, perlengkapan): typo and wrong icon (#af99723) [2023-10-05] chore (system): install laravel sail #4de5e5c [2023-10-05] chore (technical): deploy [2023-10-05] fix (route): invalid livewire route action (#b209a9b8) [2023-10-05] fix (system): \\App\\View\\Components\\Layout\\App didn\u0026rsquo;t comply PSR-4 standard (#4e6700d) [2023-10-11] chore (technical): proses bisnis PT. Bengkel Web Indonesia/dumas-presisi # [2023-10-07] fix (statistik grafik v2): satker pengelola masih sebagai satker terlapor (#6fcdb65) [2023-10-07] feat (backtrace summary): filtering periodik (#59eb794) [2023-10-07] chore (technical fix): jumlah tanggapan tidak sesuai dengan jumlah status penyelesaian [2023-10-07] revert #e0d1d97 (pengaduan selesai): laporan dengan status selesai diproses dikembalikan lagi ke halaman tindak lanjut status (#3496f3b) [2023-10-07] chore (technical): weekly backup PT. Bengkel Web Indonesia/surat-riau # [2023-10-11] feat (flow polres): antar satker tingkat si (#5c6a8d1) [2023-10-11] feat (flow polres): tujuan polres lain (#ba75ae2) [2023-10-11] feat (flow polres): tujuan polda a.n kapolres / wakapolres (#ba75ae2) [2023-10-11] feat (flow polres): antar satker tingkat bag (#218010b) [2023-10-11] feat (flow polres): antar satker tingkat sat (#045fa4c) [2023-10-11] chore (technical): upsert user Polres Kep. Meranti, Rohil, Bengkalis [2023-10-11] feat (user role): role grouping (#c5afc4f) [2023-10-11] fix (flow polres): wakapolres tidak bisa ttd (#fa3eb8f) [2023-10-11] fix (flow polres): template surat tidak ngeload (#3af2091) [2023-10-11] fix (flow polres): surat polres ke polres tidak masuk melalui si um terlebih dahulu (#686ab8f) [2023-10-11] test (technical): test flow lengkap antar polres [2023-10-11] feat (user role): tambah user admin (#bed3bdd) [2023-10-11] fix (disposisi): disposisi tidak tampil pada user role kasatker (#32951ae, #f3d01d1) [2023-10-11] chore (seeder): user admin seeder (#8c6553a) PT. Quantum Teknologi Indonesia/kenangan-backend # More info will be added later\nPT. Quantum Teknologi Indonesia/meepo-backend # More info will be added later\nPT. Quantum Teknologi Indonesia/meepo-web # More info will be added later\n","date":"5 Oktober 2023","permalink":"/artikel/2023-10/05-october-development-log/","section":"Artikel-artikel","summary":"Yap, bulan Oktober, tentunya bulan Hacktoberfest!","title":"Development Log - 2023 {Hack}toberfest"},{"content":"","date":"5 Oktober 2023","permalink":"/tags/log/","section":"Tags","summary":"","title":"log"},{"content":"Pada kesempatan kali ini, Saya akanbelajar untuk membuat variabel pada Kotlin. Kita kembali ke pelajaran SD dulu sebentar, yuk. Dulu, pada saat kita belajar untuk menghitung persegi panjang, ada beberapa informasi yang kita butuhkan untuk menentukan apakah persegi panjang itu valid:\nBidang tersebut memiliki panjang; Bidang tersebut memiliki lebar; Bidang tersebut tidak boleh memiliki panjang dan lebar yang sama, jika sama, maka sudah bisa dipastikan bidang datar tersebut adalah sebuah Persegi. Nah, panjang dan lebar inilah yang kita sebut sebagai variabel. Supaya kita dapat mengingat rumus tersebut dengan mudah, maka diperpendek lah variabel tersebut menjadi p dan l. Simpel kan? Itulah variabel, in a nutshell.\nTipe Data # Ada beberapa tipe data yang harus kita pahami, supaya kita bisa membuat aplikasi yang bebas dari bug:\nTipe Data Kotlin Data apa yang bisa digunakan Contoh String Teks \u0026ldquo;Tambah kontak\u0026rdquo; \u0026ldquo;Cari\u0026rdquo; \u0026ldquo;Masuk\u0026rdquo; Int Angka integer 32 1293490 -59281 Double Angka desimal 2.0 501.0292 -31723.99999 Float Angka desimal, namun kurang akurat daripada Double, memiliki f atau F di akhir angka 5.0f -1630.209f 1.2940278F Boolean true atau false. Gunakan tipe data ini jika hanya ada dua value. true dan false termasuk keywords pada Kotlin true false Tipe data untuk Angka # Ternyata, ada tipe data lainnya yang merepresentasikan angka. Teman-teman dapat menggunakan tipe data ini untuk penggunaan memori yang lebih optimal:\nTipe Ukuran (bits) Value minimal Value maksimal Byte 8 -128 127 Short 16 -32768 32767 Int 32 -2,147,483,648 (-231) 2,147,483,647 (231 - 1) Long 64 -9,223,372,036,854,775,808 (-263) 9,223,372,036,854,775,807 (263 - 1) Tipe data Float # Untuk bilangan ril, Kotlin menyediakan tipe floating-point Float dan Double yang melekat pada standar IEEE 754. Float mencerminkan single-precision, sementara Double mencerminkan double-precision.\nPerbedaannya adalah:\nTipe Ukuran (bits) Bit signifikan Bit eksponen Digit desimal Float 32 24 8 6-7 Double 64 53 11 15-16 Untuk menginisialisasi variabel Double atau Float, adalah dengan cara menggunakan angka yang dipisahkan oleh titik (.). Contohnya:\nval pi = 3.14 // double // val one: Double = 1 // Error: type mismatch val oneDouble = 1.0 // double Untuk menspesifikasikan Float secara eksplisit, gunakan suffix f atau F. Jika pecahannya lebih dari 6-7 digit, maka angka tersebut akan dibulatkan:\nval e = 2.7182818284 // Double val eFloat = 2.7182818284f // Float, angka aslinya adalah 2.7182817 Berbeda dengan bahasa pemrograman lainnya, Kotlin tidak memiliki konversi antar angka. Contohnya, sebuah fungsi dengan parameter Double hanya bisa digunakan oleh variabel Double, bukan Float atau Int, atau tipe data numerik lainnya:\nfun main() { fun printDouble(d: Double) { print(d) } val i = 1 val d = 1.0 val f = 1.0f printDouble(d) // 1.0 // printDouble(i) // Error: Type mismatch // printDOuble(f) // Error: Type mismatch } Untuk referensi selengkapnya, teman-teman bisa baca di Konsep Angka Kotlin.\nAnatomi Variabel # Sebuah variabel secara singkat membutuhkan expression dan value. Contohnya sebuah variabel count memiliki value 2.\nfun main() { val count: Int = 2 println(count) // 2 } Pada Kotlin sendiri, pendeklarasian variabel menggunakan keyword val, diikuti dengan expression atau name, lalu data type (jika ingin dideklarasikan secara eksplisit), lalu =, dilanjutkan dengan initial value. Kurang lebih seperti ini ilustrasinya:\nDengan konteks variabel count di atas, kita dapat mengatakan bahwa variabel count memiliki tipe data Int dan memiliki initial value ke 2:\nUntuk penulisan nama variabel tersendiri, Google menyarankan untuk:\nTidak menggunakan (keyword Kotlin)[https://kotlinlang.org/docs/keyword-reference.html] sebagai nama variabel; Menggunakan nama yang mendeskripsikan data yang akan disimpan; Menggunakan camelCase, contoh numberOfEmails, cityName, bookPublicationDate; String Template # Terkadang kita ingin menggabungkan tipe data satu ke tipe data lainnya untuk menyajikan informasi. Pada kasus ini, anggap saja kita ingin menampilkan \u0026ldquo;Anda memiliki 2 pesan yang belum dibaca\u0026rdquo;. Jadi, ayo coba kita buat:\nKita buat aplikasi sederhana, yang digunakan untuk menampilkan pesannya terlebih dahulu tanpa angka: fun main() { val count: Int = 2 println(\u0026#34;Anda memiliki pesan yang belum dibaca\u0026#34;) } Jalankan program tersebut, lalu kita akan melihat pesan Anda memiliki pesan yang belum dibaca. Tentunya pesan ini tidak masuk akal, karena kita tidak tahu berapa banyak pesan yang belum kita baca. Untuk memperbaiki output tersebut, kita membutuhkan sebuah string template. Expresi untuk menggunakan string template adalah menggunakan simbol dolar ($), yang dilanjut oleh nama variabel. fun main() { val count: Int = 2 println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) } Ketika kita jalankan programnya, maka output akan menampilkan Anda memiliki 2 pesan yang belum dibaca. Type Inference # Terkadang kita malas atau bahkan tidak mengetahui tipe data apa yang dikirimkan oleh server kepada aplikasi kita. Untuk itu, kita bisa men-ignore tipe data yang ingin kita gunakan pada saat pendeklarasian variabel.\nHati-hati, walaupun diperbolehkan, namun keambiguan tipe data bisa jadi berdampak buruk kepada aplikasi yang Anda buat. Jadi, pastikan untuk memvalidasi tipe data apa yang akan digunakan, atau definisikan tipe data yang ingin Anda pakai secara eksplisit. Sebagai contoh kita ingin mempersingkat waktu pengembangan dengan cara tidak menuliskan tipe data yang digunakan, kita bisa saja menuliskan\nval count = 2 // kode di atas sama saja dengan: val count: Int = 2 Kompiler Kotlin mengetahui bahwa kamu ingin menyimpan 2 ke dalam variabel count, jadi dia akan menggunakan tipe Int secara otomatis. Namun perlu diingat, jika tidak ada initial value yang digunakan pada saat teman-teman membuat variabel, maka Kotlin mewajibkan untuk meulis tipe data. Contoh\nval count: Int val videoTitle: String Operasi Aritmetika pada String Template # Seringkali kita ingin melakukan operasi aritmetika secara langsung tanpa menggunakan variabel untuk mempersingkat waktu, anggap saja kita ingin membuat sebuah pesan \u0026ldquo;Anda memiliki n pesan belum dibaca\u0026rdquo;, namun kita juga memiliki beberapa pesan yang sudah dibaca.\nUntuk mencapai hal ini, kita bisa menggunakan operasi aritmetika secara langsung, contoh:\nfun main() { val unreadCount: Int = 5 val readCount: Int = 100 println(\u0026#34;Anda memiliki ${unreadCount - readCount} pesan dalam inbox Anda\u0026#34;) } Atau seperti ini:\nfun main() { val numberOfPhotos: Int = 100 val photosDeleted: Int = 5 println(\u0026#34;Anda memiliki $numberOfPhotos foto\u0026#34;) println(\u0026#34;$photosDeleted sudah dihapus\u0026#34;) println(\u0026#34;${numberOfPhotos - photosDeleted} foto yang tersisa\u0026#34;) } Memperbarui data variabel # Pada saat pengembangan, value dari variabel tentunya akan berubah seiring waktu teman-teman mendapatkan datanya secara asinkronus dari server, atau berubah karena inputan pengguna. Untuk mencapai hal ini, kita harus menggunakan keyword var.\nPerbedaan antara val dan var adalah sebagai berikut:\nval - Initial value tidak dapat diubah var - Initial value dapat diubah Contohnya:\nfun main() { val cartTotal = 0 cartTotal = 20 // println(\u0026#34;Total: $cartTotal\u0026#34;) // Val cannot be reassigned } Variabel dengan keyword val adalah sebuah variabel yang bersifat read-only, yaitu variabel yang hanya bisa dibaca. Setelah variabel tersebut di-assign, maka teman-teman tidak dapat mengubah isinya.\nfun main() { var cartTotal = 0 println(\u0026#34;Total: $cartTotal\u0026#34;) // 0 cartTotal = 20 println(\u0026#34;Total: $cartTotal\u0026#34;) // 20 } Ingat bahwa teman-teman harus menggunakan var pada saat mendeklarasi variabel jika kamu berekspektasi bahwa isinya dapat berubah. Selain itu, selalu gunakan val untuk mendeklarasikan variabel. Praktek ini memastikan kode teman-teman jauh lebih aman.\nOperator Increment dan Decrement # Operator ini, sama saja seperti bahasa pemrograman lainnya, digunakan untuk menambah atau mengurangi sebuah value. Ada beberapa cara untuk menggunakan increment atau decrement:\nvar count = 10 // Increment // Cara 1: println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 10 count = count + 1 println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 11 // Cara 2 println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 11 count++ println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 12 // Decrement // Cara 1: println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 12 count = count - 1 println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 11 // Cara 2: println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 11 count-- println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // 10 String Concatenation # Teman-teman juga dapat menyatukan dua string menggunakan simbol plus (+)\nfun main() { val nextMeeting = \u0026#34;Next meeting\u0026#34; val date = \u0026#34;January 1\u0026#34; println(nextMeeting + date) // Next meetingJanuary 1 } Dilihat dari contoh di atas, bisa dilihat bahwa Kotlin akan secara otomatis menggabungkan dua string menjadi satu. Namun, secara formatting akan terlihat jelek, kita bisa memperbaiki kode tersebut menjadi seperti ini:\nfun main() { val nextMeeting = \u0026#34;Next meeting: \u0026#34; val date = \u0026#34;January 1\u0026#34; val reminder = nextMeeting + date println(nextMeeting + date) // Next meeting: January 1 } String Escaping # Seperti bahasa pemrograman lainnya, Kotlin juga dapat men-escape string dengan menggunakan simbol backslash (\\). Seperti contoh:\nfun main() { println(\u0026#34;Say \\\u0026#34;hello\\\u0026#34;\u0026#34;) // Say \u0026#34;hello\u0026#34; } Kotlin String Styling Guide # Sebelumnya, kita sudah mengenal gaya penulisan untuk fungsi yang direkomendasikan oleh Google, nah, sekarang kita juga akan mempelajari bagaimana cara penulisan variabel yang baik dan benar:\nNama variabel harus menggunakan camelCase Setelah deklarasi variabel, harus ada spasi setelah titik dua untuk menspesifikasikan tipe data Harus ada spasi sebelum dan sesudah operator seperti operator assignment (=), penambahan (+), pengurangan (-), perkalian (*), dan pembagian (/), dll Sejalan dengan kompleksitas program yang dibuat, ada anjuran untuk menmbatasi 100 karakter per-baris, untuk memastikan kemudahan dan keterbacaan kode secara horizontal. Komentar # Ada dua tipe komentar yaitu inline dan multi-line, berikut adalah contohnya:\n// Ini adalah komentar *inline* /** * Ini adalah komentar multi-line yang dapat digunakan * ketika teman-teman membuat suatu fungsi atau variabel * yang membutuhkan penjelasan panjang lebar. */ Contoh penggunaannya dalam program untuk menjelaskan apa yang terjadi:\n/** * Program ini menampilkan berapa banyak pesan * dalam inbox pengguna */ fun main() { // Buat variabel untuk pesan-pesan yang belum dibaca var count = 10 println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // Anda memiliki 10 pesan yang belum dibaca // Kurangi 1 pesan count-- println(\u0026#34;Anda memiliki $count pesan yang belum dibaca\u0026#34;) // Anda memiliki 9 pesan yang belum dibaca } Ringkasan # Ringkasan dari pembelajaran kali ini adalah:\nSebuah variabel adalah sebuah kontainer untuk suatu data; Variabel harus dideklarasikan sebelum digunakan; Gunakan keyword val untuk variabel yang read-only dan tidak bisa diubah; Gunakan keyword var untuk variabel yang mutable atau bisa diubah; Penggunaan val lebih dianjurkan daripada var; Untuk mendeklarasikan sebuah variabel, mulai keyword dengan val atau var, dilanjut dengan nama variabel, tipe data, dan initial value, contohnya val count: Int = 2; Dengan Type Inference, penulisan tipe data dapat diabaikan jika initial value diberikan; Tipe data Kotlin dasar meliputi Int, String, Boolean, Float, dan Double; Gunakan operator assignment (=) untuk meng-assign sebuah value ke dalam variabel, pada saat deklarasi atau memperbarui data variabel; Gunakan increment operator (++) untuk menambahkan 1 value kepada sebuah integer, dan decrement operator (--) untuk mengurangi 1 value kepada sebuah integer; Gunakan simbol plus (+) untuk menggabungkan String. Penggabungan variabel juga dapat digunakan pada tipe data lainnya seperti Int dan Boolean ke String; ","date":"4 Oktober 2023","permalink":"/artikel/2023-10/04-variabel-pada-kotlin/","section":"Artikel-artikel","summary":"Pada kesempatan kali ini, Saya akanbelajar untuk membuat variabel pada Kotlin.","title":"Catatan Belajar Juara Android 2023 - #3 Variabel Pada Kotlin"},{"content":"Pada kesempatan kali ini, Saya akan membuat aplikasi Android menggunakan Kotlin. Tapi sebelum itu, tentu saja Saya harus mempelajari basicnya terlebih dahulu. Kotlin adalah bahasa pemrograman yang direkomendasikan oleh Google untuk membuat aplikasi Android.\nSebuah bahasa pemrograman modern yang membantu pengembang untuk menjadi lebih produktif. Dengan kode yang lebih sedikit, Kotlin dapat memperoleh fungsionalitas yang sama dibanding dengan bahasa pemrograman lainnya. Aplikasi yang dibuat Kotlin juga lebih jarang crash, sehingga aplikasi yang dibuat dapat lebih stabil.\nUntuk pengembangnya sendiri, secara developer-experience, dengan Kotlin kita dapat membuat aplikasi Android dengan waktu yang lebih singkat. Let\u0026rsquo;s go gak sih?\nKotlin Playground # Jadi, Google ini punya Kotlin Playground, sebuah codelab yang disajikan untuk kita developer untuk bermain-main dengan kode Kotlin. Berikut adalah screenshotnya: In the background, Kotlin Playground menggunakan Java Virtual Machine, tentu saja tetap menggunakan Java sebagai bahasa utamanya. Jadi kode Kotlin yang kita buat akan di-compile terlebhi dahulu.\nHere comes the programming\u0026hellip; # Saatnya memulai mengkodingan. Pertama-tama, Saya belajar untuk membuat / mendefinisikan sebuah fungsi. Sebuah fungsi / function adalah sebuah set instruksi yang digunakan untuk melakukan sebuah pekerjaan.\nUntuk membuat sebuah fungsi, ada beberapa bagian yang dibutuhkan:\nFungsi membutuhkan sebuah nama, sehingga bisa dipanggil nanti; Fungsi juga bisa saja membutuhkan beberapa input atau informasi yang dibutuhkan ketika fungsi dipanggil. Fungsi menggunakan inputan-inputan tersebut untuk menyelesaikan tujuannya. Beberapa input bisa jadi opsional, bahkan tidak memerlukan input satupun. Fungsi harus memiliki body, yang mencakup instruksi-instruksi untuk melakukan sebuah pekerjaan. Untuk menerjemahkan diagram di atas ke sintaks Kotlin, kita menggunakan keywork fun (menyenangkan, ya? üòÑ) yang harus didefinisikan terlebih dahulu, lalu dilanjut oleh nama fungsinya, dilanjut oleh input-input dalam tanda kurung, lalu dialnjut oleh kurawal diantara body-nya.\nPenamaan fungsi juga tidak bisa sembarangan, ada beberapa aturan yang harus diikuti seperti:\nTidak boleh menggunakan Kotlin Keyword; Dianjurkan menggunakan penulisan camelCase, misal calculateTip, displayErrorMessage, atau takePhoto; Berikut adalah program pertama Saya menggunakan Kotlin:\nfun main() { println(\u0026#34;Halo, Ibu!\u0026#34;) // Halo, Ibu! } Saya belum bisa memahami cara menggunakan input parameter / argumen di bahasa ini, mungkin akan dijelaskan di bagian selanjutnya. üòÖ\nKotlin Function Styling Guide # Karena Saya ingin menjadi developer hebat dan tidak abal-abal, tentunya kerapihan kode juga Saya pelajari betul. Tentunya, ini akan membantu Saya dan tim (semoga, kedepannya) untuk membuat sebuah aplikasi bersama-sama. Jadi, ada beberapa rekomendasi yang disarankan oleh Google:\nNama fungsi harus berbentuk camelCase, dan harus menggunakan Kata Kerja atau Frasa Kata Kerja; Setiap statement harus berada dalam barisnya sendiri; Kurawal pembuka harus ada di akhir barus dimana fungsi berada; Harus ada spasi sebelum kurawal pembuka; Body fungsi harus di-inden dengan 4 spasi, bukan menggunakan tab; Kurawal penutup harus berada di baris akhir, sejajar dengan keyword fun; Ringkasan # Sebuah program Kotlin membutuhkan fungsi main sebagai entri program; Untuk mmbuat sebuah fungsi, gunakan keyword fun, dilanjut dengan nama fungsi, input-input jika ada diapit dengan tanda kurung, dilanjut dengan body yang diapit dengan kurawal; Nama fungsi harus menggunakan camelCase; Menggunakan println() untuk mencetak teks ke output; Mematuhi aturan penulisan Kotlin; Kesalahan itu wajar, troubleshooting is eternal; ","date":"4 Oktober 2023","permalink":"/artikel/2023-10/04-program-kotlin-pertamaku/","section":"Artikel-artikel","summary":"Pada kesempatan kali ini, Saya akan membuat aplikasi Android menggunakan Kotlin.","title":"Catatan Belajar Juara Android 2023 - #2 Program Kotlin Pertamaku"},{"content":"Tahun ini, Saya bertekad untuk mengupgrade skill Saya yang sudah sekian lama tidak diasah. Tentunya walaupun otak ini terbiasa dengan Laravel dan PHP, lama-lama jadi bosan juga üòÖ, tapi ya namanya manusia, harus tetap belajar dan terus belajar. Apalagi dunia teknologi akan selalu berkembang pesat setiap harinya.\nPada kesempatan ini, Saya mengikuti #JuaraAndroid2023, dimana Saya akan belajar untuk membuat sebuah aplikasi Android menggunakan Kotline dan Compose. Konsep Compose sendiri termasuk baru untuk Saya, jadi Saya tidak dapat memberikan penjelasan secara singkat ataupun lengkap terlebih dahulu üòÇ.\nBefore I begin\u0026hellip;presummably\u0026hellip; # Sebelum Saya memulai pembelajaran, Saya disuguhkan oleh sebuah artikel yang berjudul \u0026ldquo;Before You Begin\u0026rdquo;. Isinya hanyalah prolog tentang bagaimana kursus ini akan berjalan. Jadi, secara singkatnya Saya akan belajar membuat beberapa aplikasi menggunakan Jetpack Compose, yang merupakan cara modern untuk membuat UI yang cantik nan elegan üíÖ.\nKursus ini juga akan menyediakan beberapa Code Labs dan video Code-along, yang berarti Saya bisa mengotak-ngatik potongan kode yang mereka sediakan, serta memberikan penjelasan langsung secara side-by-side, surely an impressive method of learning.\nAkhir kata, Google memberikan saran kepada developer baru ataupun yang sudah pernah menyentuh pengembangan Android. Untuk developer baru, disarankan agar mereka mengikuti learning path yang disediakan. Sedangkan untuk developer lama, diperbolehkan sekali untuk melewati beberapa materi yang sudah pernah dipahami atau dipelajari.\nI\u0026hellip;welcomed? # Setelah prolog, Saya disambut dengan sebuah video selamat datang. Presenter dari video ini tidak lain adalah instruktur-instruktur yang akan mentutor Saya dari awal hingga akhir (semoga sampai mahir). Sedikit fakta, ada 2,5 miliar perangkat Android, dari perangkat seluler, tablet, TV, dll. Sebuah kebanggaan tersendiri jika Saya bisa membuat sebuah aplikasi yang bisa membantu menyelesaikan masalah dari 2,5 miliar pengguna tersebut.\nMaju sedikit di videonya, tujuan dari kursus ini adalah Saya dapat memahami cara menggunakan Android Studio dan Kotlin. Menurut mereka, hal Saya butuhkan untuk mengikuti kursus ini adalah:\nKomputer Koneksi Internet Literasi Komputer Dasar Kemampuan Matematika Dasar Tentu saja, semuanya sudah terakomodir. I\u0026rsquo;m a computer-person, haha. Selain itu, mereka juga mengatakan bahwa It\u0026rsquo;s also nice to have:\nHP Android / Tablet Familiaritas untuk menggunakan Android Motivasi (ini yang paling sulit sih üòÖ) Secara realistik, Saya bisa menyelesaikan kursus ini dalam beberapa minggu atau beberapa bulan kedepan. Stay tuned ya di artikel-artikel lainnya üòÑ.\n","date":"4 Oktober 2023","permalink":"/artikel/2023-10/04-catatan-belajar-juara-android-2023-introduction/","section":"Artikel-artikel","summary":"Tahun ini, Saya bertekad untuk mengupgrade skill Saya yang sudah sekian lama tidak diasah.","title":"Catatan Belajar Juara Android 2023 - #1 Introduction"},{"content":"","date":"23 Mei 2023","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"Yeah, it\u0026rsquo;s one year and I can passthrough this\u0026hellip;\nDisclaimer # You are completely responsible for your hardware and software. This guide makes no guarentees that the process will work for you, or will not void your waranty on various parts or break your computer in some way. Everything from here on out is at your own risk.\nThis tutorial is for laptop that iGPU is still connected to External Monitor/Dummy HDMI. If your laptop\u0026rsquo;s dGPU connected to External Monitor/Dummy HDMI, this tutorial is not for you.\nStory behind this thing # I\u0026rsquo;m using gaming laptop with linux for working but I still want to be a \u0026ldquo;gamers\u0026rdquo;. There\u0026rsquo;s some limitation when I gaming in Linux especially the Anti Cheat that cannot be used with Proton. The same goes for productive apps like Adobe Premiere/After Effect or Microsoft Office that 100% not compatible with Wine.\n\u0026ldquo;Why not dual boot?\u0026rdquo;\nI must re-sync all the clock system in Windows and Linux when I\u0026rsquo;m switching the OS. I must install the same app that I\u0026rsquo;ve use in Linux to Windows just for communication. Like Discord for gaming. This nerd blood is too strong in me\u0026hellip; Pros \u0026amp; Cons # For pros:\nCould be faster than dual booting (this is true in my case, it\u0026rsquo;s depends on your system). You have ability to switch mode to Hybrid (Optimus) and Integrated (Isolated) with a single command line. Using virtual disk, you can bring it all the way. virt-manager running without sudo like the other tutorial. For cons:\nThis method using preallocated qemu-img that consume a bunch of storage for a better performance. You still have to reboot your laptop to switch your GPU. You\u0026rsquo;ll need to change some source code from envycontrol. My Setup # For this tutorial, I\u0026rsquo;m using MSI Katana GF66 11UD with MUXless scheme and using Garuda Linux distributon. For the specs, you can search it in internet.\nPrerequisites # A laptop that can support VT-d/VT-g. Some Intel processor above 7th Generation have this feature. Enable the Intel Virtualization in BIOS first before start geeking. Installing QEMU with virt-manager. You can follow this tutorial for the step of installation. After installing QEMU, install QEMU Hooks to automate bind/unbind the GPU. virtio-win drivers and guest tools. I suggest you to download the ISO file. spice-guest-tools. Looking Glass, for better gaming. [OPTIONAL] Windows File System Proxy to connect your local drive to the VM. Procedures # Enable Intel IOMMU and Load VFIO Modules # Modify your kernel parameter (usually in /etc/default/grub if you using GRUB), and add:\nintel_iommu=on iommu=pt kvm.ignore_msrs=1 Don\u0026rsquo;t forget to update your GRUB after modify your kernel parameter.\nAdd this module to your initramfs: (in my case, I\u0026rsquo;m using dracut that location in /etc/dracut.conf.d/)\nadd_driver+=\u0026#34; vfio vfio_iommu_type1 vfio_pci vfio_virqfd \u0026#34; Don\u0026rsquo;t forget to update your initramfs after adding some module.\nRestart your laptop.\nDisable NVIDA From Accessing X-Server # Check your GPU. You can use lspci -nnk | grep -i nvidia to check if your GPU is still be used by Nvidia/Nouveau module.\nCopy all envycontrol setup.py code to your laptop.\nSearch this line of code:\nif graphics_mode == \u0026#39;integrated\u0026#39;: cleanup() # blacklist all nouveau and Nvidia modules create_file(BLACKLIST_PATH, BLACKLIST_CONTENT) # power off the Nvidia GPU with udev rules create_file(UDEV_INTEGRATED_PATH, UDEV_INTEGRATED) rebuild_initramfs() Give the command that generate file to power off the Nvidia GPU because we still need to use the GPU. The code will look like this:\nif graphics_mode == \u0026#39;integrated\u0026#39;: cleanup() # blacklist all nouveau and Nvidia modules create_file(BLACKLIST_PATH, BLACKLIST_CONTENT) # power off the Nvidia GPU with udev rules #create_file(UDEV_INTEGRATED_PATH, UDEV_INTEGRATED) rebuild_initramfs() [OPTIONAL, if you using Dracut] search this line of code:\ndef rebuild_initramfs(): # Debian and Ubuntu derivatives if os.path.exists(\u0026#39;/etc/debian_version\u0026#39;): command = [\u0026#39;update-initramfs\u0026#39;, \u0026#39;-u\u0026#39;, \u0026#39;-k\u0026#39;, \u0026#39;all\u0026#39;] # RHEL and SUSE derivatives elif os.path.exists(\u0026#39;/etc/redhat-release\u0026#39;) or os.path.exists(\u0026#39;/usr/bin/zypper\u0026#39;): command = [\u0026#39;dracut\u0026#39;, \u0026#39;--force\u0026#39;, \u0026#39;--regenerate-all\u0026#39;] # EndeavourOS with dracut elif os.path.exists(\u0026#39;/usr/lib/endeavouros-release\u0026#39;) and os.path.exists(\u0026#39;/usr/bin/dracut\u0026#39;): command = [\u0026#39;dracut-rebuild\u0026#39;] Change and operator to or in EndeavourOS with dracut because the tools wont execute the dracut-rebuild if you\u0026rsquo;re using dracut without using EndeavourOS distribution.\nCopy or make symlink to /usr/bin and execute this command:\nsudo envycontrol -s integrated Reboot your laptop, check your GPU with lspci -nnk | grep -i nvidia. It should your GPU not using nvidia kernel module anymore. Note: If you want to back to Hybrid mode, just execute this command again:\nsudo envycontrol -s nvidia And make it sure your GPU using nvidia kernel after rebooting.\nNote2: Check this out, maybe you can follow my lazy ideas.\nInstall KVM # You can follow the instruction for installation VM from BlandManStudios video. Some people don\u0026rsquo;t recommend this video because giving bad information or something. But if you want to see how to install an OS to QEMU, I think you can follow his tutorial.\nFor QEMU Hooks, here is some references that I use for my setup. Don\u0026rsquo;t copy-paste my hooks because maybe my scene is not same as you.\nprepare/begin/start.sh\n#!/bin/bash # Helpful to read output when debugging set -x # Stop Cloudflare WARP Service systemctl stop warp-svc # Unbind VTconsole echo 0 \u0026gt; /sys/class/vtconsole/vtcon0/bind # Avoid a Race condition by waiting 2 seconds. This can be calibrated to be shorter or longer if required for your system sleep 2 # Unbind the GPU from display driver virsh nodedev-detach pci_0000_01_00_0 # Load VFIO Kernel Module modprobe vfio-pci release/end/revert.sh\n#!/bin/bash set -x # Start Cloudflare WARP Service systemctl start warp-svc # Re-Bind GPU to Nvidia Driver virsh nodedev-reattach pci_0000_01_00_1 # Rebind VT consoles echo 1 \u0026gt; /sys/class/vtconsole/vtcon0/bind After you install VM. Don\u0026rsquo;t forget to install virtio-driver and spice-guest-tools for better VM QoL.\nInstalling Looking Glass # You can follow the installation for setup IVSHMEM and KVM Permission from Looking Glass wiki here. Here\u0026rsquo;s some arguments reference to launch looking glass with my scheme:\n# Launching Looking Glass with changing ScrollLock button to RightCtrl looking-glass-client -m 97 -c DXGI [OPTIONAL] VirtIO FS # After installing virtio-driver, add filesystem hardware with virtiofs and specify your location in VM Manager.\nReferences # https://lantian.pub/en/article/modify-computer/laptop-intel-nvidia-optimus-passthrough.lantian/ https://github.com/joeknock90/Single-GPU-Passthrough https://gist.github.com/Misairu-G/616f7b2756c488148b7309addc940b28 Complete reference directly from its author: thatismunn/dotfiles My heavily dotfiles for my battle station Vim Script 4 0 ","date":"23 Mei 2023","permalink":"/artikel/gpu-laptop-passthrough-intel-x-nvidia/","section":"Artikel-artikel","summary":"Yeah, it\u0026rsquo;s one year and I can passthrough this\u0026hellip;","title":"How To: MUXless GPU Passthrough (NVIDIA x Intel Edition)"},{"content":"","date":"23 Mei 2023","permalink":"/authors/ikramullah/","section":"Authors","summary":"","title":"ikramullah"},{"content":"Sekumpulan artikel yang ditulis pada saat gabut.\n","date":"16 Mei 2023","permalink":"/artikel/","section":"Artikel-artikel","summary":"Sekumpulan artikel yang ditulis pada saat gabut.","title":"Artikel-artikel"},{"content":"Catatan pribadi dan proses perkuliahan.\n","date":"16 Mei 2023","permalink":"/lainnya/kuliah/","section":"Lainnyas","summary":"Catatan pribadi dan proses perkuliahan.","title":"Catatan Kuliah"},{"content":"Koleksi jepretan foto yang diambil secara random, sebagai media penyalur hobi fotografi.\n2023 # 2022 # 2021 # ","date":"16 Mei 2023","permalink":"/galeri/","section":"Galeri","summary":"Koleksi jepretan foto yang diambil secara random, sebagai media penyalur hobi fotografi.","title":"Galeri"},{"content":"","date":"16 Mei 2023","permalink":"/lainnya/","section":"Lainnyas","summary":"","title":"Lainnyas"},{"content":"Hasil terjemahan lagu-lagu Jepang - Inggris - Indonesia.\n","date":"16 Mei 2023","permalink":"/lainnya/lirik-lagu/","section":"Lainnyas","summary":"Hasil terjemahan lagu-lagu Jepang - Inggris - Indonesia.","title":"Lirik Lagu"},{"content":"Aplikasi yang bisa diinstal dan digunakan pada perangkat berbasis OS Android.\n","date":"16 Mei 2023","permalink":"/portfolio/android/","section":"Portfolios","summary":"Aplikasi yang bisa diinstal dan digunakan pada perangkat berbasis OS Android.","title":"Portfolio Android"},{"content":"Desain UI/UX untuk website / aplikasi.\n","date":"16 Mei 2023","permalink":"/portfolio/ui-ux/","section":"Portfolios","summary":"Desain UI/UX untuk website / aplikasi.","title":"Portfolio UI/UX"},{"content":"Website atau aplikasi web yang bisa diakses via peramban web.\n","date":"16 Mei 2023","permalink":"/portfolio/website/","section":"Portfolios","summary":"Website atau aplikasi web yang bisa diakses via peramban web.","title":"Portfolio Website"},{"content":"","date":"16 Mei 2023","permalink":"/portfolio/","section":"Portfolios","summary":"","title":"Portfolios"},{"content":"","date":"8 April 2023","permalink":"/tags/j-pop/","section":"Tags","summary":"","title":"j-pop"},{"content":"","date":"8 April 2023","permalink":"/tags/laplacian/","section":"Tags","summary":"","title":"laplacian"},{"content":"ÊµÅ„Çå„ÇãÈõ≤Èñì„Å´„ÄÄÊåáÂÖàÈáç„Å≠„Å¶ Nagareru kumomani yubisaki kasanete Between the flowing clouds, our fingertips intertwined\nÈö†„Åó„Åü„ÅÑ„Å§„Åã„Å®„ÄÄÂêå„ÅòËâ≤„ÅÆÈôΩ„Çí Kakushita itsuka to onaji iro no hi wo Hiding the sun of the same color we wished to keep secret\nÂÖâ„ÇíËøΩ„ÅÑ„Åã„Åë„ÄÄÁü•„Çâ„Å™„ÅÑË°ó„Çí Hikari wo oikake shiranai machi wo Chasing after the light, through unfamiliar streets\nÁã¨„Çä„ÅßÊ≠©„ÅÑ„Åü„ÄÄ„Åæ„Åü‰ºö„ÅÜÊó•Â§¢Ë¶ã„Å¶ Hitori de aruita mata au hi yume mite I walked alone, dreaming of the day we would meet again\n‰ºù„Åà„Åü„ÅÑ„Çà„ÄÄÂøò„Çå„Çâ„Çå„Å™„ÅÑ Tsutaetai yo wasurarenai I want to convey it, the unforgettable\n„ÅÇ„ÅÆÊôØËâ≤„ÇÇ„ÄÄ‰ªä„ÅØÁû≥„ÅÆÂ••„Å´ Ano keshiki mo ima wa hitomi no oku ni scenery, now deep within my eyes\nËâ≤Ë§™„Åõ„Å™„ÅÑ„Çà„ÅÜ„Å´ Iro asenai you ni So it won't fade away\nÁ©∫„ÇíËæø„ÇãË∑Ø„ÄÄË∂≥Ë∑°‰∏Ä„Å§„Åß„ÇÇ Sora wo tadoru michi ashiato hitotsu demo Even if just one footprint on the path across the sky\n„Åì„ÅÆÊôÇ„ÅÆÊûú„Å¶„Å´„ÄÄ„ÅÇ„Å™„Åü„Åå„ÇÇ„Åó„ÅÑ„Çã„Å™„Çâ Kono toki no hate ni anata ga moshi iru nara Leads me to you at the end of this moment\nÂ∞ë„Åó„Å†„Åë„Åß„ÅÑ„ÅÑ Sukoshi dake de ii Even if it's just a little.\nÂΩ∑Âæ®„ÅÜÁßÅ„Å´„ÇÇ Samayou watashi ni mo To me, wandering aimlessly\nÂΩºÊñπ„Åã„Çâ„ÄÄÈ¢®„ÅÆÊ≠å„ÇíÂ±ä„Åë„Å¶ Kanata kara kaze no uta wo todokete Please send a song of the wind from afar.\nÂÑö„ÅèÊµÆ„Åã„Çì„Å†„ÄÄÁôΩÂ§ú„ÅÆÊúà„ÅØ Hakanaku ukanda hakuya no tsuki wa The faintly appearing moon in the white night\n„ÅÇ„ÅÆÊó•„Å®Âêå„Åò„Åß„ÄÄÂΩ±„ÇíËøΩ„ÅÑÁ∂ö„Åë„Çã Ano hi to onaji de kage wo oitsuzukeru Continues to chase after shadows, just like that day\nÊïô„Åà„Å¶Ê¨≤„Åó„ÅÑ„Åì„ÅÆÊâã„ÅÆ„ÄÄ„Å¨„Åè„ÇÇ„Çä„ÅÆË°åÊñπ Oshiete hoshii kono te no nukumori no yukue I want you to show me the whereabouts of this warmth in my hands\nÈÄÉ„Åå„Åï„Å™„ÅÑ„Çà„ÅÜ„Å´„ÄÄ„Åù„Å£„Å®Êè°„ÇäÁ∑†„ÇÅ„Åü Nigasanaiyou ni sotto nigirishimeta So I gently hold onto it, not letting it escape\nÁ©∫„ÅåÊ≠©„ÅøÊ≠¢„ÇÅ„ÄÄÊòéÊó•„ÅåÊù•„Å™„Åè„Å¶„ÇÇ Sora ga ayumi tome ashita ga kowakutemo Even if the sky stops moving and tomorrow doesn't come\n„Åì„ÅÆÊôÇ„ÅÆÊûú„Å¶„Åß„ÄÄ„ÅÇ„Å™„Åü„Å®Áπã„Åå„Çã„Å™„Çâ Kono toki no hate de anata to tsunagaru nara If I can connect with you at the end of this moment\n‰ªä„Å†„Åë„Åß„ÅÑ„ÅÑ„ÄÄÂΩ∑Âæ®„ÅÜÁßÅ„Åã„Çâ Ima dakedeii samayou watashi kara Just for now, from this wandering me\nÂΩºÊñπ„Åæ„Åß„Åì„ÅÆÊ≠åÂ£∞„ÄÄÂ±ä„ÅÑ„Å¶ Kanata made kono utagoe todoite Let the sound of my voice reach into the distance.\nÁ©∫„ÇíËæø„ÇãË∑Ø„ÄÄË∂≥Ë∑°‰∏Ä„Å§„Åß„ÇÇ Sora wo tadoru michi ashiato hitotsu demo On the path across the sky, even with just one footprint\n„Åì„ÅÆÊôÇ„Åå„ÅÑ„Å§„Åã„ÄÄÂ§ïÈóá„Å´È£≤„ÅøËæº„Åæ„Çå„Å¶„ÇÇ Kono toki ga itsuka yuuyami ni nomikomare te mo Even if this moment is swallowed by the twilight someday\nÂ∞ë„Åó„Å†„ÅëÂΩ∑Âæ®„ÅÜÁßÅ„Å´„ÇÇ Sukoshi dake samayou watashi ni mo Just a little, to me wandering aimlessly\nÂΩºÊñπ„Åã„ÇâÈ¢®„ÅÆÊ≠å„Çí„ÄÄÂ±ä„Åë„Å¶ Kanata kara kaze no uta wo todokete Please send a song of the wind from afar.\nListen on:\nYouTube Music Spotify Apple Music ","date":"8 April 2023","permalink":"/lainnya/lirik-lagu/2023/laplacian-newton-and-the-apple-tree-kaze-no-uta/","section":"Lainnyas","summary":"ÊµÅ„Çå„ÇãÈõ≤Èñì„Å´„ÄÄÊåáÂÖàÈáç„Å≠„Å¶ Nagareru kumomani yubisaki kasanete Between the flowing clouds, our fingertips intertwined","title":"Laplacian \"Newton and the Apple Tree\", MAMI - Kaze no Uta (È¢®„ÅÆÊ≠å) Japanese, Romaji, English"},{"content":"","date":"8 April 2023","permalink":"/tags/lyrics/","section":"Tags","summary":"","title":"lyrics"},{"content":"","date":"8 April 2023","permalink":"/tags/mami/","section":"Tags","summary":"","title":"mami"},{"content":"","date":"8 April 2023","permalink":"/tags/newton-and-the-apple-tree/","section":"Tags","summary":"","title":"newton and the apple tree"},{"content":"","date":"8 April 2023","permalink":"/tags/official-hige-dandism/","section":"Tags","summary":"","title":"official hige dandism"},{"content":"\u0026ldquo;Subtitle\u0026rdquo; is a Japanese song by the band Official Hige Dandism, released on their album \u0026ldquo;Traveler\u0026rdquo; in 2019. The song is a blend of pop, rock, and jazz genres, featuring upbeat instrumentation and catchy melodies.\nThe lyrics of \u0026ldquo;Subtitle\u0026rdquo; express the feeling of being lost in life and the search for one\u0026rsquo;s purpose. The protagonist of the song is depicted as feeling disconnected from the world around them, but ultimately finds hope and determination to move forward. The song has been well-received in Japan, becoming a popular hit and earning Official Hige Dandism a wider international audience.\nJapanese # „ÄåÂáç„Çä„Åì„Åä„Çä„Å§„ÅÑ„ÅüÂøÉ„Åì„Åì„Çç„Å´„ÅØÂ§™ÈôΩ„Åü„ÅÑ„Çà„ÅÜ„Çí„Äç„ÄÄ„Åù„Åó„Å¶„ÄåÂÉï„Åº„Åè„ÅåÂêõ„Åç„Åø„Å´„Å®„Å£„Å¶„Åù„ÅÆ„Éù„Ç∏„Ç∑„Éß„É≥„Çí„Äç\n„Åù„Çì„Å™„Å†„ÅÑ„Å∂ÂÇ≤ÊÖ¢„Åî„Åä„Åæ„Çì„Å™ÊÄù„ÅÑ„Åä„ÇÇ„ÅÑËæº„Åø„Åì„Åø„ÇíÊãó„Åì„Åò„Çâ„Åõ„Å¶„Åü„Çì„Å†„Çà\n„Åî„ÇÅ„Çì„Å≠ („Åî„ÇÅ„Çì„Å≠)„ÄÄÁ¨ë„Çè„Çâ„Å£„Å¶ (Á¨ë„Çè„Çâ„Å£„Å¶)„ÄÄ„ÇÑ„Å£„Å¶\nÁÅ´ÂÇ∑„ÇÑ„Åë„Å©„Åó„Åù„ÅÜ„Å™„Åª„Å©„ÅÆ„Éù„Ç∏„ÉÜ„Ç£„Éñ„ÅÆ ÂÜ∑„Åü„Å§„ÇÅ„Åü„Åï„Å®ÊÆãÈÖ∑„Åñ„Çì„Åì„Åè„Åï„Å´Ê∞ó‰ªò„Åç„Å•„ÅÑ„Åü„Çì„Å†„Çà\n„Åç„Å£„Å®Âêõ„Åç„Åø„Å´Ê∏°„Çè„Åü„Åó„Åü„ÅÑ„ÇÇ„ÅÆ„ÅØ„ÇÇ„Å£„Å®„Å≤„Çì„ÇÑ„ÇäÁÜ±„ÅÑ„ÅÇ„Å§„ÅÑ„ÇÇ„ÅÆ\nÁ∂∫È∫ó‰∫ã„Åç„Çå„ÅÑ„Åî„Å®„Åò„ÇÉ„Å™„ÅÑ„Åë„Å©Á∂∫È∫ó„Åç„Çå„ÅÑ„ÅßÊè∫„ÇÜ„Çã„Åé„Å™„ÅÑ„ÇÇ„ÅÆ\n„ÅÜ„Çè„Åπ„Çà„Çä„ÇÇËÉ∏„ÇÄ„Å≠„ÅÆÂ••„Åä„Åè„ÅÆÂ••„Åä„Åè„ÇíÊ∏©„ÅÇ„Åü„Åü„ÇÅ„Çã„ÇÇ„ÅÆ\nÁêÜÊÉ≥„Çä„Åù„ÅÜ„Å†„Åë„ÅØ„ÅÇ„Çã„Åë„Å© ÂøÉ„Åì„Åì„Çç„ÅÆ„Å©„ÅìÊé¢„Åï„Åå„Åó„Å¶„ÇÇ „Åæ„Çã„ÅßË¶ã„Åø„Å§„Åã„Çâ„Å™„ÅÑ„Çì„Å†„Çà\n‰ºù„Å§„Åü„Åà„Åü„ÅÑ‰ºù„Å§„Åü„Çè„Çâ„Å™„ÅÑ „Åù„ÅÆ‰∏çÊù°ÁêÜ„Åµ„Åò„Çá„ÅÜ„Çä„Åå‰ªä„ÅÑ„Åæ „Ç≠„ÉÑ„ÅèÁ∏õ„Åó„Å∞„Çä„Å§„Åë„Çã„Çì„Å†„Çà\nËáÜÁóÖ„Åä„Åè„Å≥„Çá„ÅÜ„Å™ÂÉï„Åº„Åè„ÅÆ „Åì„ÅÆ‰∏ÄÊåôÊâã‰∏ÄÊäïË∂≥„ÅÑ„Å£„Åç„Çá„ÅÜ„Åó„ÇÖ„ÅÑ„Å£„Å®„ÅÜ„Åù„Åè„Çí\nË®ÄËëâ„Åì„Å®„Å∞„ÅØ„Åæ„Çã„ÅßÈõ™„ÇÜ„Åç„ÅÆÁµêÊô∂„Åë„Å£„Åó„Çá„ÅÜ Âêõ„Åç„Åø„Å´„Éó„É¨„Çº„É≥„Éà„Åó„Åü„Åè„Å¶„ÇÇ\nÂ§¢‰∏≠„ÇÄ„Å°„ÇÖ„Å´„Å™„Çå„Å∞„Å™„Çã„Åª„Å©„Å´ ÂΩ¢„Åã„Åü„Å°„ÅØÂ¥©„Åè„Åö„ÇåËêΩ„Åä„Å°„Å¶Ê∫∂„Å®„Åë„Å¶„ÅÑ„Å£„Å¶ Ê∂à„Åç„Åà„Å¶„Åó„Åæ„ÅÜ„Åë„Å©\n„Åß„ÇÇÂÉï„Åº„Åè„ÅåÈÅ∏„Åà„Çâ„Å∂Ë®ÄËëâ„Åì„Å®„Å∞„Åå „Åù„Åì„Å´Ë®ó„Åü„Åè„Åï„Çå„ÅüÊÉ≥„Åä„ÇÇ„ÅÑ„Åå\nÂêõ„Åç„Åø„ÅÆËÉ∏„ÇÄ„Å≠„ÇíÈúá„Åµ„Çã„Çè„Åô„ÅÆ„Çí Ë´¶„ÅÇ„Åç„Çâ„ÇÅ„Çâ„Çå„Å™„ÅÑ ÊÑõ„ÅÇ„ÅÑ„Åó„Å¶„Çã„Çà„Çä„ÇÇÊÑõ„ÅÇ„ÅÑ„ÅåÂ±ä„Å®„Å©„Åè„Åæ„Åß\n„ÇÇ„ÅÜÂ∞ë„Åô„Åì„Åó„Å†„ÅëÂæÖ„Åæ„Å£„Å¶„Å¶\nËñÑÁùÄ„ÅÜ„Åô„Åé„Åß„Åü„Å†„Åù„Å∞„Å´Á´ã„Åü„Å£„Å¶„Å¶„ÇÇ ‰∏çÂøÖË¶Å„Åµ„Å≤„Å§„Çà„ÅÜ„Å´Ê±ó„ÅÇ„Åõ„Çí„Åã„ÅÑ„Å¶„Åó„Åæ„ÅÜÂÉï„Åº„Åè„Å™„Çì„Åã„ÇÇ„ÅÜ\n„Å©„ÅÜ„Åó„Åü„Å£„Å¶ÁîüÊ∏©„Å™„Åæ„Çã„Åè„Å¶Âêõ„Åç„Åø„ÇíÁóõ„ÅÑ„Åü„ÇÅ„Å§„Åë„Å¶„Åó„Åæ„ÅÜ„ÅÆ„Å†„Çç„ÅÜ\n„ÄåÊâã„Å¶„ÅÆ„Å≤„Çâ„ÅåÁÜ±„ÅÇ„Å§„ÅÑ„Åª„Å©ÂøÉ„Åì„Åì„Çç„ÅØÂÜ∑„Å§„ÇÅ„Åü„ÅÑ„Çì„Åß„Åó„Çá„ÅÜ?„Äç\nÂÜóË´á„Åò„Çá„ÅÜ„Å†„Çì„Åß„ÇÇ„Åù„Çì„Å™ÊÆãÈÖ∑„Åñ„Çì„Åì„Åè„Å™„Åì„Å®Ë®Ä„ÅÑ„Çè„Å™„ÅÑ„Åß„Çà\nÂà•„Åπ„Å§„Å´Ë®Ä„ÅÑ„Åà„Å∞„ÅÑ„ÅÑ„Åë„Å© ÂÖ®„Çº„É≥‰∫∫Áîü„Åò„Çì„Åõ„ÅÑ„ÇíË≥≠„Åã„Åë„Å¶„ÇÇ „Å°„ÇÉ„Çì„Å®Ë¶Ü„Åè„Å§„Åå„Åà„Åï„Åó„Å¶„Çà\nÊïë„Å§„Åè„ÅÑ„Åü„ÅÑ Êïë„Å§„Åè„Çè„Çå„Åü„ÅÑ „Åì„ÅÆ„Ç§„Ç≥„Éº„É´„Åå‰ªä„ÅÑ„Åæ ÂÑ™„ÇÑ„Åï„Åó„ÅèÂâ•„ÅØ„Åå„Åó„Å¶„ÅÑ„Åè„Çì„Å†„Çà\nÂ†Ö„Åã„Åü„ÅÑÁêÜË´ñ„Çä„Çç„ÇìÊ≠¶Ë£Ö„Å∂„Åù„ÅÜ „Éó„É©„Ç§„Éâ„ÅÆÈÅéÂâ∞„Åã„Åò„Çá„ÅÜÂåÖË£Ö„Åª„ÅÜ„Åù„ÅÜ„Çí\nÊ≠£„Åü„Å†„Åó„Åï„Çà„Çä„ÇÇÂÑ™„ÇÑ„Åï„Åó„Åï„ÅåÊ¨≤„Åª„Åó„ÅÑ „Åù„Åó„Å¶„Åù„Çå„ÇíÂèó„ÅÜ„ÅëÂèñ„Å®„Çå„Çã„ÅÆ„ÅØ\n„Ç§„É´„Éü„Éç„Éº„Ç∑„Éß„É≥„Åø„Åü„ÅÑ„Å™ ‰∏çÁâπÂÆöÂ§öÊï∞„Åµ„Å®„Åè„Å¶„ÅÑ„Åü„Åô„ÅÜ„Åò„ÇÉ„Å™„Åè„Å¶„Åü„Å†1‰∫∫„Å≤„Å®„Çä\nÂêõ„Åç„Åø„Åß„ÅÇ„Å£„Å¶„Åª„Åó„ÅÑ\n„Åã„Åë„ÅüË®ÄËëâ„Åì„Å®„Å∞„Åß Ââ≤„Çè„Çå„Åü„Éí„Éì„ÇíÁõ¥„Å™„Åä„Åù„ÅÜ„Å®„Åó„Å¶\nË∂≥„Åü„Åó„Åô„Åé„ÅüÁÜ±Èáè„Å≠„Å§„Çä„Çá„ÅÜ„Åß Âºï„Å≤„Åã„Çå„Å¶„Åó„Åæ„Å£„Åü„Ç´„Éº„ÉÜ„É≥\n„Åù„Çì„Å™Â§±Êïó„Åó„Å£„Å±„ÅÑ‰Ωú„Åï„Åè„Çí Èáç„Åã„Åï„Å≠„Å¶ Èáç„Åã„Åï„Å≠„Å¶ Èáç„Åã„Åï„Å≠„Å¶\nË¶ã„Åø„Å§„Åë„Åü„ÅÑ„Çì„Å†„ÅÑ„Å§„Åã ÊúÄÈ´ò„Åï„ÅÑ„Åì„ÅÜ„ÅÆ‰∏ÄË®Ä„ÅÑ„Å°„Åî„Çì‰∏ÄÂè•„ÅÑ„Å£„Åè„Çí\nË®ÄËëâ„Åì„Å®„Å∞„ÅØ„Åæ„Çã„ÅßÈõ™„ÇÜ„Åç„ÅÆÁµêÊô∂„Åë„Åó„Çá„ÅÜ Âêõ„Åç„Åø„Å´„Éó„É¨„Çº„É≥„Éà„Åó„Åü„Å®„Åó„Å¶\nÊôÇÈñì„Åò„Åã„Çì„ÅåÁµå„Åü„Å£„Å¶„Åó„Åæ„Åà„Å∞Â§ßÊäµ„Åü„ÅÑ„Å¶„ÅÑ Ë®òÊÜ∂„Åç„Åä„Åè„Åã„ÇâÊ∫¢„Åì„Åº„Çå„ÇåËêΩ„Åä„Å°„Å¶Ê∫∂„Å®„Åë„Å¶„ÅÑ„Å£„Å¶\nÊ∂à„Åç„Åà„Å¶„Åó„Åæ„ÅÜ „Åß„ÇÇ\nÁµ∂„Åü„Åà„ÅöÂÉï„Åº„Åè„Çâ„ÅÆ„Çπ„Éà„Éº„É™„Éº„Å´ Ê∑ª„Åù„Åà„Çâ„Çå„ÅüÂ≠óÂπï„Åò„Åæ„Åè„ÅÆ„Çà„ÅÜ„Å´\nÊÄù„Åä„ÇÇ„ÅÑËøî„Åã„Åà„Åó„ÅüÊôÇ„Å®„Åç ‰∏çÊÑè„Åµ„ÅÑ„Å´ÁõÆ„ÇÅ„Çí„ÇÑ„ÇãÊôÇ„Å®„Åç„Å´\nÂêõ„Åç„Åø„ÅÆËÉ∏„ÇÄ„Å≠„ÇíÈúá„Åµ„Çâ„Çè„Åô„ÇÇ„ÅÆ Êé¢„Åï„Åå„ÅóÁ∂ö„Å§„Å•„Åë„Åü„ÅÑ\nÊÑõ„ÅÇ„ÅÑ„Åó„Å¶„Çã„Çà„Çä„ÇÇÊÑõ„ÅÇ„ÅÑ„ÅåÂ±ä„Å®„Å©„Åè„Åæ„Åß\n„ÇÇ„ÅÜÂ∞ë„Åô„Åì„Åó„Å†„ÅëÂæÖ„Åæ„Å£„Å¶„Å¶\nË®ÄËëâ„Åì„Å®„Å∞„Å™„Å©‰Ωï„Å™„Å´„ÇÇÊ¨≤„Åª„Åó„Åó„Åè„Å™„ÅÑ„Åª„Å© ÊÇ≤„Åã„Å™„Åó„Åø„Å´Âáç„ÅÑ„Å¶„Å§„ÅèÂ§ú„Çà„Çã„Åß„ÇÇ\nÂãùÊâã„Åã„Å£„Å¶„Å´Âêõ„Åç„Åø„ÅÆ„Åù„Å∞„Åß „ÅÇ„Çå„Åì„Çå„Å®ËÄÉ„Åã„Çì„Åå„Åà„Å¶„Çã\nÈõ™„ÇÜ„Åç„ÅåÊ∫∂„Å®„Åë„Å¶„ÇÇÊÆã„ÅÆ„Åì„Å£„Å¶„Çã\nRomaji # \u0026ldquo;Koori tsuita kokoro ni ha taiyou wo\u0026rdquo;, soshite \u0026ldquo;Boku ga kimi ni totte sono POJISHON wo\u0026rdquo;\nSonna daibu gooman na omoikomi wo kojirasete ta nda yo\nGomen ne (gomen ne), waratte (waratte), yatte\nYakedo shishou na hodo no POJITIBU no, tsumeta sa to zankoku sa ni kidzuita nda yo\nKitto kimi ni watashitai mono ha motto hinyari atsui mo no\nKireigoto janai kedo, kirei de yuruginai mo no\nUwabeyori mo mune no oku no oku wo atatameru mo no\nRisou dake ha aru kedo, kokoro no doko sagashitemo, marude mitsukaranai nda yo\nTsutaetai, tsutawaranai, sono fujouri ga ima, KITSU ku shibaritsukeru nda yo\nOkubyou na boku no, kono ikkyoshuittousoku wo\nKotoba ha maru de yuki no kesshou, kimi ni PUREZENTO shitakute mo\nMuchuu ni nareba naru hodo ni, katachi wa kuzure ochite tokete itte, kiete shimau kedo\nDemo boku ga erabu kotoba ga, soko ni takusareta omoi ga\nKimi no mune wo furuwasu no wo, akirame rarenai, aishiteru yori mo ai ga todoku made\nMou shukoshi dake matte te\nUsugide tada soba ni tattete mo, fuhitsuyou ni ase wo kaiteshimau boku nanka mou\nDoushitatte namarukute kimi wo itametsukete shimau no darou\n\u0026ldquo;Te no hiraga atsui hodo, kokoro ha tsumetai ndeshou?\u0026rdquo;\nJoudan de mo sonna zankoku na koto iwanaide yo\nBetsuni iebaii kedo, zen jinsei wo kakete mo, chanto kutsugaesa shite yo\nTsukuitai, tsukuwaretai, kono IKOORU ga ima, yasahiku hagashite ikunda yo\nKatai riron busou, PURAIDO no kajou housou wo\nTadashisa yori mo yasahisa ga hoshii, soshite sore wo uketoreru no ha\nIRUMINEESHON mitai na, futokuteitasuu janakute tada hitori\nKimi de atte hoshii\nKaketa kotoba de, wareta hibi wo naosou to shite\nTashi sugita netsuryou de, hikarete shimatta KAATEN\nSonna shippai saku wo, kasanete, kasanete, kasanete\nMitsuketai nda itsuka, saikou no ichigon ikku wo\nKotoba ha maru de yuki no keshou, kimi ni PUREZENTO shita toshite\nJikan ga tatteshimaeba taitei, kioku kara kobore ochite tokete ite\nKiete shimau demo\nTaezu boku ra no SUTOORI ni, soe rareta jimaku no you ni\nOmoi kaeshita toki, fui ni me wo yaru toki ni\nKimi no, mune wo furawasu mono, sagashi tsudzuketai\nAishiteru yori mo ai ga todoku made\nMou shukoshi dake matte te\nKotoba na do nani mo hoshikunai hodo, kanashimi ni itetsuku yoru demo\nKatte ni kimi no soba de, are kore to kangae teru\nYuki ga tokete mo, nokotteru\nTranslation # \u0026ldquo;Sun for a frozen heart\u0026rdquo; and \u0026ldquo;I want to be in that position for you\u0026rdquo;\nI complicated my strong arrogant assumption\nSorry, laugh at me\nI noticed a coldness and viciousness of burning positivity\nProbably something I want to give to you is a colder hot thing\nIt\u0026rsquo;s not fine-sounding talk but something beautiful and unwavering\nSomething warms up the core in the center of your heart, not just the surface\nI just have my ideal, but I can\u0026rsquo;t find it anywhere in my heart at all\nThis irrationality now binds everything that this coward guy like me does tightly\nI want to express but I fail to do so\nWords are now like crystals, even though I want to give you them as a gift\nThe more I get into you, the shapes collapses, melt away and disappear\nBut the words I choose and my feelings in them\nCannot give up on vibrating your heart. Instead of \u0026ldquo;I love you,\u0026rdquo;\nwait for a little bit for my love to reach you\nI get sweaty unnecessarily just by standing next to you while I\u0026rsquo;m dressed lightly\nAnything I do is lukewarm and I end up hurting you\n\u0026ldquo;A person with hotter palms has a colder heart, right?\u0026rdquo;\nYou may be joking, but don\u0026rsquo;t say such a cruel thing\nYou can say it, but let me definitely overturn what you said, even if I need to bet my whole life on it\nI want to save = I want to be saved, this equal sign now peels off\ngently both inflexible theoretical arguments and overwrapping for pride\nI want kindness more than correctness, and unlike\nthe illumination for the crowds, I want you to be only\nperson who receives it\nI tried to to fix the broken cracks with my broken words\nBut my excessive energy pushed you to pull a curtain\nAfter repeating my failures, over and over\nI want to find the best words and phrases it one day\nWords are now like crystals, even though I gave you them as a gift\nUsually, as time passes, memories overflow and melt away\nfrom your memories.\nBut like the Subtitles that are always added to our stories\nWhen we remember, when we abruptly take a quick glance\nI want to keep looking for things that vibrate your heart\nInstead of saying \u0026ldquo;I love you\u0026rdquo; to reach you\nPlease wait a little bit more\nEven on frozen nights by sadness when you do not want any words\nI selfishly think about many things by your side\nThey remain even after the snow melts away\nListen on:\nYouTube Music Spotify Apple Music ","date":"8 April 2023","permalink":"/lainnya/lirik-lagu/official-hige-dandism-subtitle/","section":"Lainnyas","summary":"\u0026ldquo;Subtitle\u0026rdquo; is a Japanese song by the band Official Hige Dandism, released on their album \u0026ldquo;Traveler\u0026rdquo; in 2019.","title":"Official Hige Dandism - Subtitle (Romaji, Furigana, and Translation)"},{"content":"PT. Bengkel Web Indonesia built the Hukum Waris app as a Commercial app. This SERVICE is provided by PT. Bengkel Web Indonesia and is intended for use as is.\nThis page is used to inform visitors regarding our policies with the collection, use, and disclosure of Personal Information if anyone decided to use our Service.\nIf you choose to use our Service, then you agree to the collection and use of information in relation to this policy. The Personal Information that we collect is used for providing and improving the Service. We will not use or share your information with anyone except as described in this Privacy Policy.\nThe terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which are accessible at Hukum Waris unless otherwise defined in this Privacy Policy.\nInformation Collection and Use # For a better experience, while using our Service, we may require you to provide us with certain personally identifiable information. The information that we request will be retained by us and used as described in this privacy policy.\nThe app does use third-party services that may collect information used to identify you.\nLink to the privacy policy of third-party service providers used by the app\nGoogle Play Services AdMob Google Analytics for Firebase Firebase Crashlytics Log Data # We want to inform you that whenever you use our Service, in a case of an error in the app we collect data and information (through third-party products) on your phone called Log Data. This Log Data may include information such as your device Internet Protocol (‚ÄúIP‚Äù) address, device name, operating system version, the configuration of the app when utilizing our Service, the time and date of your use of the Service, and other statistics.\nCookies # Cookies are files with a small amount of data that are commonly used as anonymous unique identifiers. These are sent to your browser from the websites that you visit and are stored on your device\u0026rsquo;s internal memory.\nThis Service does not use these ‚Äúcookies‚Äù explicitly. However, the app may use third-party code and libraries that use ‚Äúcookies‚Äù to collect information and improve their services. You have the option to either accept or refuse these cookies and know when a cookie is being sent to your device. If you choose to refuse our cookies, you may not be able to use some portions of this Service.\nService Providers # We may employ third-party companies and individuals due to the following reasons:\nTo facilitate our Service; To provide the Service on our behalf; To perform Service-related services; or To assist us in analyzing how our Service is used. We want to inform users of this Service that these third parties have access to their Personal Information. The reason is to perform the tasks assigned to them on our behalf. However, they are obligated not to disclose or use the information for any other purpose.\nSecurity # We value your trust in providing us your Personal Information, thus we are striving to use commercially acceptable means of protecting it. But remember that no method of transmission over the internet, or method of electronic storage is 100% secure and reliable, and we cannot guarantee its absolute security.\nLinks to Other Sites # This Service may contain links to other sites. If you click on a third-party link, you will be directed to that site. Note that these external sites are not operated by us. Therefore, we strongly advise you to review the Privacy Policy of these websites. We have no control over and assume no responsibility for the content, privacy policies, or practices of any third-party sites or services.\nChildren‚Äôs Privacy # These Services do not address anyone under the age of 13. We do not knowingly collect personally identifiable information from children under 13 years of age. In the case we discover that a child under 13 has provided us with personal information, we immediately delete this from our servers. If you are a parent or guardian and you are aware that your child has provided us with personal information, please contact us so that we will be able to do the necessary actions.\nChanges to This Privacy Policy # We may update our Privacy Policy from time to time. Thus, you are advised to review this page periodically for any changes. We will notify you of any changes by posting the new Privacy Policy on this page.\nThis policy is effective as of 2022-08-16\nContact Us # If you have any questions or suggestions about our Privacy Policy, do not hesitate to contact us at yourlovelydev@gmail.com.\n","date":"17 Maret 2023","permalink":"/privacy-policy/hawada/","section":"Privacy-policies","summary":"PT. Bengkel Web Indonesia built the Hukum Waris app as a Commercial app.","title":"Hawada (Hukum Waris Perdata) Privacy Policy"},{"content":"","date":"17 Maret 2023","permalink":"/privacy-policy/","section":"Privacy-policies","summary":"","title":"Privacy-policies"},{"content":"","date":"15 Maret 2023","permalink":"/tags/laravel/","section":"Tags","summary":"","title":"laravel"},{"content":"","date":"15 Maret 2023","permalink":"/tags/php/","section":"Tags","summary":"","title":"php"},{"content":"","date":"15 Maret 2023","permalink":"/tags/regex/","section":"Tags","summary":"","title":"regex"},{"content":"","date":"15 Maret 2023","permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"tutorial"},{"content":"","date":"15 Maret 2023","permalink":"/series/whatsapp-text-formatting-pada-php/","section":"Series","summary":"","title":"WhatsApp Text Formatting Pada PHP"},{"content":"Selamat datang di Part 3 dari tutorial ini. Kita lanjut membahas tentang mengubah UTF-16 dan UTF-32 ke bentuk UTF-8 HTML Entity yang bisa dibaca oleh browser.\n3. Unicode UTF-16 dan UTF-32 # Sebagai pengingat, saya berhasil menemukan pola RegEx yang tepat untuk pola UTF-16 dan UTF-32 yaitu /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/. Masalah selanjutnya adalah bagaimana cara mengubah kode unicode di bawah menjadi HTML Entity:\nMenggunakan fungsi preg_replace() secara langsung seperti ini tidak akan berhasil karena kita hanya menambah #\u0026amp;x di awal dan ; di akhir.\n\u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); $unicode = preg_replace(\u0026#39;/(\\\\\\(u|U)[a-fA-F0-9]{4,8})/\u0026#39;, \u0026#39;#\u0026amp;x$1;\u0026#39;, $monospace); return $unicode; } } Salah total karena jika dilihat, hasilnya akan seperti ini:\nDead end. Saya stuck. Tidak bisa berpikir lebih jauh. Saya bangkit dari workspace, jalan-jalan sedikit, nyeruput kopi yang sudah agak dingin, ambil nafas, lalu lanjut ngoding lagi.\nPermasalahan di atas membuat saya berpikir \u0026ldquo;pola yang saya buat harus menemukan kata-kata yang sudah dispesifikasikan, lalu setiap kata-kata itu saya hapus \\u-nya, lalu tambahkan #\u0026amp;x di awal dan ; di akhir\u0026rdquo;.\nSetelah browsing sejenak, saya menemukan fungsi ajaib, preg_replace_callback(). Langsung saya coba implementasikan ke WhatsAppService, hasilnya adalah sebagai berikut:\n\u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); $unicode = preg_replace_callback( [\u0026#39;/(\\\\\\(u|U)[a-fA-F0-9]{4,8})/\u0026#39;], function ($matches) { $code = preg_replace(\u0026#39;/\\\\\\u|\\\\\\U/\u0026#39;, \u0026#39;\u0026#39;, $matches[0]); return \u0026#34;\u0026amp;#x$code;\u0026#34;; }, $monospace ); return $unicode; } } Tebak apa yang terjadi? SUKSES BESAR!\nSaya bisa istirahat untuk sejenak. Menghabiskan kopi yang sudah dingin. Lalu rebahan, meluruskan punggung. Tidak berhenti sampai situ, ada 1 masalah lagi yang belum diselesaikan yaitu\n4. Link yang tidak bisa diklik layaknya WhatsApp # Lihat pesan di atas, lalu lihat pada link YouTube-nya, masih berbentuk plain text, dan tidak bisa diklik. Simpel saja, caranya sama seperti formatting pesan pada Part 2, langsung wrap \u0026ldquo;Pola Link\u0026rdquo; pada sebuah tag \u0026lt;a\u0026gt;.\nKarena waktu sudah larut malam, dan banyak sekali kasus RegEx untuk sebuah link, maka saya browsing dan menemukan pola RegEx berikut pada StackOverflow, berikut adalah polanya:\n/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#\\=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;\\/\\=]*)/. Sedikit penjelasan:\n/(http(s)?:\\/\\/.)?(www\\.) mencari apakah pesan tersebut dimulai dengan http://, https://, atau langsung www.. (www\\.)?[-a-zA-Z0-9@:%._\\+~#\\=]{2,256}\\.[a-z]{2,6} mencari apakah pola www. dilanjutkan dengan karakter URL yang valid dengan rentang 2 sampai dengan 256 karakter. Dilanjutkan dengan tld yang memiliki rentang 2 sampai dengan 6 karakter. \\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;\\/\\=]*)/ mencari pola URL yang valid. Hasil dari keseluruhan kode adalah sebagai berikut:\n\u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); $url = preg_replace( \u0026#39;/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#\\=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?\u0026amp;\\/\\=]*)/\u0026#39;, \u0026#39;\u0026lt;a class=\u0026#34;text-blue-500\u0026#34; href=\u0026#34;$0\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;$0\u0026lt;/a\u0026gt;\u0026#39;, $monospace ); $unicode = preg_replace_callback( [\u0026#39;/(\\\\\\(u|U)[a-fA-F0-9]{4,8})/\u0026#39;], function ($matches) { $code = preg_replace(\u0026#39;/\\\\\\u|\\\\\\U/\u0026#39;, \u0026#39;\u0026#39;, $matches[0]); return \u0026#34;\u0026amp;#x$code;\u0026#34;; }, $url ); return $unicode; } } \u0026hellip;dan ta-da! Hasilnya adalah seperti ini:\nKesimpulan # Ekspresi Regular atau RegEx, menurut saya adalah sebuah aspek dalam pemrograman yang sangat kuat dan potensial. RegEx dapat membantu teman-teman dalam memecahkan masalah yang sangat spesifik seperti yang saya hadapi sekarang.\nTerlepas dari sulitnya belajar RegEx, saya terbebas dari kemungkinan bahwa saya akan menulis ratusan baris kode demi membuat sebuah Formatter untuk pesan WhatsApp. Selain itu, saya juga terlepas dari kemungkinan waktu pengembangan yang panjang karena ketidaktahuan saya.\nIntinya, belajar dan terus belajar. Kita tidak akan tahu ilmu tersebut berguna atau tidak sampai kita bisa menyelesaikan suatu permasalahan dengan ilmu yang kita dapatkan.\nKode lengkap bisa Anda dapatkan pada repository saya. Terima kasih banyak sudah membaca üëã!\n#StayCode #CoffeeIsMyInspiration #Coffee24/7.\nThumbnail oleh Asterfolio dari Unsplash\n","date":"15 Maret 2023","permalink":"/artikel/whatsapp-text-formatting-pada-php-part-3/","section":"Artikel-artikel","summary":"Selamat datang di Part 3 dari tutorial ini.","title":"WhatsApp Text Formatting Pada PHP Part 3"},{"content":"Pada pengembangan aplikasi Dumas Presisi, sebuah projek aplikasi yang saya handle, pengimplementasian komunikasi WhatsApp melalui Website adalah salah satu fitur yang sudah lama kami ingin implementasikan. Namun karena kurang luasnya pengalaman dan penguasaan ilmu yang kami miliki, setelah 2 tahun projek ini di-launching oleh Kapolri pada hari Rabu, 24 Februari 2021, kami baru bisa mengimplementasikan fitur ini sebagai sarana konsultasi Masyarakat.\nProses pengintegrasian kami rasa cukup rumit karena adanya beberapa gateway yang harus kami untuk sarana analisis dan debugging. Jika dihitung berdasarkan hari, kami baru bisa mengimplementasikan fitur ini setelah 1 bulan pengembangan.\nPrototyping # Dibantu oleh TailwindCSS dan DaisyUI, kami bisa mengimplementasikan mockup fitur ini secara mudah. Apalagi dengan pembaharuan DaisyUI v2.51.4, penambahan fitur Chat Bubble sangat membantu kecepatan pembuatan mockup ini. Berikut adalah screenshot mockup pertama kami:\nSangat simpel bukan? Belum ada yang istimewa saat ini. Sebagai informasi tambahan, fitur ini dipresentasikan keesokan harinya kepada pimpinan. Tentunya kami berharap adanya masukkan dan kritik dari pimpinan terhadap fitur yang kami bangun.\nSemua berjalan lancar\u0026hellip; sampai hal yang tidak kami duga pun terjadi.\nPermasalahan # Issue yang sama sekali tidak kami duga karena tidak muncul pada saat testing, muncul pada saat presentasi. Tidak ada yang \u0026ldquo;terlukai\u0026rdquo; oleh bug ini, namun kami harus menyelesaikannya secepat mungkin.\n\u0026ldquo;Apa sih masalahnya sehingga kami merasa issue tersebut harus bisa diselesaikan? Toh kan cuma plain text yang di-render?\u0026rdquo;\nHaha, pada permukaan, betul yang kami render ini adalah plain text, namun jika plain text-nya terlihat seperti ini, apakah enak dipandang mata?\nHotline WhatsApp Dumas Presisi adalah sama seperti nomor WhatsApp pada umumnya, kami menerima keluhan, saran, bahkan broadcast yang secara random dikirimkan oleh masyarakat. Jadi, seluruh pesan yang dikirimkan kepada Hotline kami, akan kami terima apa adanya juga pada aplikasi.\nSetelah membaca sekilas pesan di atas, kami memetakan ada 4 permasalahan:\nLine break Formatting Emoji Link Mari kita selesaikan permasalahan ini satu per satu üî•.\n1. Line Break yang tidak ter-render # Di PHP, untuk pesan plain text seperti ini, mudah bagi kita para pengembang untuk mengubah New Line menjadi Break Line yang bisa di-render HTML. Fungsi tersebut adalah nl2br(), yang merupakan kependekan dari New line to \u0026lt;br/\u0026gt;.\nPertama, saya membuat sebuah Service yang bernamakan WhatsAppService, kurang lebih, seperti ini file-nya:\n\u0026lt;?php namespace App\\Services; class WhatsAppService { public static function formatMessage(string $raw_message): string { return $raw_message; } } Service di atas masih belum bisa mengubah New Line menjadi \u0026lt;br/\u0026gt;, karena itu kita gunakan fungsi nl2br supaya pesan yang kita terima bisa terformat dengan baik:\n\u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); return $nl2br_message; } } Setelah menerapkan fungsi nl2br, berikut adalah hasil dari pesan yang sudah diformat:\n2. Formatting yang tidak ter-render secara langsung # Dilansir dari halaman FAQ WhatsApp terkait dengan Text Formatting, kami mendapatkan 4 macam formatting yang harus diimplementasikan:\nBold, direpresentasikan dengan string yang diapit oleh bintang ( *string* ) Italic, direpresentasikan dengan string yang diapit oleh garis bawah ( _string_ ) Strikethrough, direpresentasikan dengan string yang diapit oleh tilde ( ~string~ ) Monospace, direpresentasikan dengan string yang diapit oleh tiga backtick ( ```string``` ) Saya berpikir, bagaimana caranya untuk me-replace simbol-simbol itu dengan tag HTMl ya? Beberapa metode terlintas di otak saya.\nPertama, saya bisa menggunakan str_replace() untuk mengubah simbol menjadi tag HTML. Namun saya juga ingat bahwa tag HTML haruslah ditutup. Berdasarkan fakta tersebut, saya tidak bisa semerta-merta menggunakan str_replace().\nKedua, saya bisa menggunakan preg_match() untuk mengambil seluruh simbol, lalu mengubahnya menjadi tag HTML. Sama seperti kasus di atas, tag HTML yang di-replace harus juga ditutup kembali. Selain itu, masalah yang akan dihadapi pada saat saya menggunakan preg_match() ialah fungsi tersebut hanya dapat me-return int yang mengindikasikan berapa banyak simbol yang ditemukan pada sebuah pesan.\nApproach yang saya lakukan menggunakan RegEx sudah benar, cuma saja saya hanya perlu menemukan fungsi yang tepat. Setelah berdiri sejenak, menyeduh kopi, dan meminumnya, saya menemukan sebuah solusi yang mujarab, preg_replace(). Long life coffee, our source of motivation ‚òïÔ∏è‚òïÔ∏è‚òïÔ∏è.\npreg_replace() adalah sebuah fungsi yang mencari sebuah pola berdasarkan bahasa ekspresi regular yang kita berikan, mendapatkan kata-kata berdasarkan pola yang kita berikan, lalu mengubahnya sesuai dengan apa yang kita inginkan.\nEkspresi Regular atau yang biasa sering kita sebut sebagai RegEx adalah bahasa ter-alien yang pernah saya pelajari. Bukan hanya sulit dipahami, namun juga kita harus memahami beberapa aturan baku. Saya pribadi baru bisa memahami bagaimana RegEx bekerja setelah belajar intensif selama 1 bulan.\nPenasaran bagaimana saya mengimplementasikannya? Kita lanjut ke Part 2 ya! Sampai jumpa di sana üëã.\nThumbnail oleh Asterfolio dari Unsplash\n","date":"15 Maret 2023","permalink":"/artikel/whatsapp-text-formatting-pada-php-part-1/","section":"Artikel-artikel","summary":"Pada pengembangan aplikasi Dumas Presisi, sebuah projek aplikasi yang saya handle, pengimplementasian komunikasi WhatsApp melalui Website adalah salah satu fitur yang sudah lama kami ingin implementasikan.","title":"WhatsApp Text Formatting Pada PHP Part 1"},{"content":"Selamat datang di Part 2 dari tutorial ini. Kita lanjut membahas tentang pengimplementasian formatting menggunakan RegEx.\n2. Formatting yang tidak ter-render secara langsung # Sebagai pengingat, kita butuh 4 macam formatting yang harus diimplementasikan:\nBold, direpresentasikan dengan string yang diapit oleh bintang ( *string* ) Italic, direpresentasikan dengan string yang diapit oleh garis bawah ( _string_ ) Strikethrough, direpresentasikan dengan string yang diapit oleh tilde ( ~string~ ) Monospace, direpresentasikan dengan string yang diapit oleh tiga backtick ( ```string``` ) Pada RegEx, kita harus bisa menerjemahkan sebuah pola yang ada ke dalam bahasa RegEx. Seperti contoh di bawah ini adalah sebuah pola RegEx yang digunakan untuk mendapatkan kata atau kalimat yang diapit oleh bintang, RegEx ini akan kita gunakan untuk formatting bold:\n/\\*(.*?)\\*/ - Pola Ekspresi Regular untuk formatting bold pada WhatsApp. Percaya atau tidak, itu adalah pola yang valid. Bagaimana cara membacanya? Akan saya jelaskan secara singkat.\n/ garis miring yang ada di awal dan di akhir pola RegEx disebut sebagai Delimiter. Delimiter ini berfungsi untuk membatasi scope dari pola RegEx yang akan dibaca; \\* setelah garis miring di awal dan sebelum garis miring di akhir menandakan bahwa ada simbol \u0026ldquo;bintang\u0026rdquo; di awal dan di akhir kata atau kalimat; () dalam kurung berfungsi sebagai penanda \u0026ldquo;grup\u0026rdquo;. Grup pada RegEx berfungsi untuk membuat sebuah \u0026ldquo;capture group\u0026rdquo; untuk mengekstrak sebuah substring; . dalam RegEx PHP berarti mencari semua karakter, entah itu string, integer, atau simbol, kecuali line break; * berarti mencocokkan 0 atau lebih karakter yang ada pada pola; serta ? adalah lazy, yang berarti RegEx akan mencari karakter sesedikit mungkin. Secara default, quantifier RegEx bersifat greedy yang berarti mencari karakter sebanyak mungkin. Bagaimana, pusing üòÖ? Demikian juga saya yang mencoba untuk membuat fitur ini. Namun karena pengalaman, hal seperti ini berhasil saya capai dengan cepat. Berikut adalah daftar RegEx yang berhasil saya kompulir untuk formatting pesan WhatsApp:\nTipe format Pola RegEx Bold /\\*(.*?)\\*/ Italic /\\_(.*?)\\_/ Strikethrough /\\~(.*?)\\~/ Monospace /\\```(.*?)\\```/ Setelah mendapatkan pola-pola tersebut, saya implementasikan ke dalam WhatsAppService:\n\u0026lt;?php namespace App\\Services; class WhatsAppService { public static function format_message(string $raw_message): string { $nl2br_message = nl2br($raw_message); $bold = preg_replace(\u0026#39;/\\*(.*?)\\*/\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#39;, $nl2br_message); $italic = preg_replace(\u0026#39;/\\_(.*?)\\_/\u0026#39;, \u0026#39;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#39;, $bold); $strikethrough = preg_replace(\u0026#39;/\\~(.*?)\\~/\u0026#39;, \u0026#39;\u0026lt;strike\u0026gt;$1\u0026lt;/strike\u0026gt;\u0026#39;, $italic); $monospace = preg_replace(\u0026#39;/\\```(.*?)\\```/\u0026#39;, \u0026#39;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#39;, $strikethrough); return $monospace; } } Kita lihat hasilnya pada aplikasi\n\u0026hellip;daaan berhasil. Sebuah pencapaian yang menurut saya luar biasa keren. Suatu langkah untuk sebuah aplikasi yang lebih sempurna.\n3. Unicode UTF-16 dan UTF-32 # Unicode yang saya lansir dari Wikipedia adalah sebuah standar teknis yang dirancang untuk mengizinkan teks dan simbol dari semua sistem tulisan di dunia untuk ditampilkan dan dimanipulasi. Namun, tidak semua Unicode yang dikirimkan bisa di-parse dan di-render begitu saja, harus ada tahap konversi lagi sehingga karakter yang diinginkan bisa ditampilkan.\nUTF-8 adalah standar encoding yang digunakan pada kebanyakan website dan browser. Secara umum, browser dan search engine akan gagal untuk memproses UTF-16, karenanya UTF-16 tidak digunakan pada teknologi website.\nOke, langsung saja ke permasalahan utamanya. Diberikan contoh kasus seperti ini:\nBerdasarkan dari pengalaman sebelumnya, saya memikirkan skenario berikut:\nHilangkan \\u dan \\U pada plain teks; lalu Tampilkan hasil teks dari unicode tersebut ke bentuk HTML dengan me-wrap hasil penggantian polanya dengan \u0026amp;#$1; Awalnya, saya menggunakan RegEx sebagai berikut /(\\\\\\(u|U)[a-zA-Z0-9])/, namun setelah saya coba mengecek bagaimana pola ini bekerja di Regexr.com, ternyata terdapat kesalahan pada pola yang saya buat:\nKarena pada awalnya saya mengira ini adalah emoji, maka saya mengambil salah satu unicode acak 0001f64f, lalu mencoba mencarinya di Google. Berikut adalah screenshot yang saya ambil dari laman fileformat.com\n\u0026ldquo;Betul saja, yang saya dapatkan adalah emoji!\u0026rdquo; ucap saya dalam hati. Setelah berhasil mengidentifikasi unicode tersebut adalah sebuah emoji yang dikonversi dari UTF-32, saya harus mengubahnya ke dalam bentuk UTF-8, atau langsung sebagai Hexadecimal HTML Entity. Saya pun merubah pola RegEx yang sudah saya buat menjadi seperti ini\n- /(\\\\\\(u|U)[a-zA-Z0-9])/ + /(\\\\\\(u|U)[a-zA-Z0-9]{4,8})/ Ya, saya hanya menambahkan prasyarat bahwa karakter unicode yang harus saya ambil harus memiliki panjang 4 s/d 8 karakter. Namun apa yang saya dapat? Kesalahan pola, lagi üòÖ.\nJika teman-teman lihat hasil match yang ada pada kalimat pertama, pola RegEx yang saya buat mengambil \\u2728RIZK. RIZK adalah pola yang tidak ingin saya ambil. Bagaimanakah solusinya?\nSimpelnya, saya ubah range huruf yang saya cari. Cukup dari a-f dan A-F.\n- /(\\\\\\(u|U)[a-zA-Z0-9]{4,8})/ + /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/ Saya pun berhasil mendapatkan pola RegEx yang sesuai dan bisa diimplementasikan ke aplikasi:\nJadi, pola RegEx yang \u0026ldquo;Fix\u0026rdquo; adalah seperti ini /(\\\\\\(u|U)[a-fA-F0-9]{4,8})/. Sedikit penjelasan:\n/ garis miring yang ada di awal dan di akhir pola RegEx disebut sebagai Delimiter. Delimiter ini berfungsi untuk membatasi scope dari pola RegEx yang akan dibaca; \\\\\\ tiga backslash digunakan untuk meng-escape karakter backslash pada PHP; () dalam kurung berfungsi sebagai penanda \u0026ldquo;grup\u0026rdquo;. Grup pada RegEx berfungsi untuk membuat sebuah \u0026ldquo;capture group\u0026rdquo; untuk mengekstrak sebuah substring. Grup pada RegEx di atas berisi (u|U) yang berarti kita menerima huruf u kecil atau U kapital setelah backslash; dilanjutkan dengan [a-fA-F0-9] yang berarti kita menerima huruf kecil a sampai dengan f, huruf A sampai dengan F kapital, lalu angka 0 sampai dengan 9. {4,8} berarti kita menerima karakter apapun yang ada pada prasyarat sebelumnya yaitu [a-fA-F0-9] dengan panjang sebanyak 4 sampai dengan 8 karakter. Begitulah cerita bagaimana saya mendapatkan pola UTF-16 dan UTF-32. Lalu bagaimana cara saya mengubah pola yang sudah didapatkan supaya bisa ditampilkan dalam bentuk HTML? Kita lanjut ke Part 3, sampai jumpa di sana üëã!\nThumbnail oleh Asterfolio dari Unsplash\n","date":"15 Maret 2023","permalink":"/artikel/whatsapp-text-formatting-pada-php-part-2/","section":"Artikel-artikel","summary":"Selamat datang di Part 2 dari tutorial ini.","title":"WhatsApp Text Formatting Pada PHP Part 2"},{"content":"Situasi ini dimulai ketika saya berencana untuk melakukan git pull pada sebuah proyek di server CentOS 7. Namun, berbeda dengan pengalaman saya sebelumnya, respon yang muncul adalah sebagai berikut:\nssh: Could not resolve hostname github.com: Temporary failure in name resolution fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. Sangat mengherankan, karena sebelumnya saya selalu bisa melakukan pull tanpa masalah apapun. Setelah berkonsultasi dengan seseorang yang ahli dalam menangani Server, solusinya cukup sederhana, yaitu dengan mengedit file /etc/resolv.conf dan menambahkan dua baris berikut:\nnameserver 8.8.8.8 nameserver 8.8.4.4 Jika Anda masih baru dalam menggunakan Linux, Anda dapat menggunakan perintah nano /etc/resolv.conf atau vi /etc/resolv.conf untuk mengedit file tersebut. Namun, perlu diingat bahwa cara penggunaan kedua text editor tersebut berbeda.\nSebagai tambahan informasi, jika Anda tidak memiliki akses untuk mengedit file tersebut, Anda bisa menambahkan perintah pkexec sebelum perintah nano atau vi. Dalam hal ini, Anda akan diminta untuk memasukkan password root untuk dapat mengedit file resolv.conf.\nSekian tutorial singkat sekaligus catatan pengembangan saya, semoga bermanfaat dan membantu teman-teman sekalian.\nThumbnail oleh Erik Mclean dari Unsplash\n","date":"23 Februari 2023","permalink":"/artikel/cara-mengatasi-could-not-resolve-hostname-github-com-pada-linux/","section":"Artikel-artikel","summary":"Situasi ini dimulai ketika saya berencana untuk melakukan git pull pada sebuah proyek di server CentOS 7.","title":"Cara Mengatasi Could Not Resolve Hostname Github Com Pada Linux"},{"content":"","date":"23 Februari 2023","permalink":"/tags/linux/","section":"Tags","summary":"","title":"linux"},{"content":"","date":"23 Februari 2023","permalink":"/tags/tips/","section":"Tags","summary":"","title":"tips"},{"content":"","date":"10 Februari 2023","permalink":"/tags/blog/","section":"Tags","summary":"","title":"blog"},{"content":"Pyramid Automation Testing, dilansir dari buku The Clean Coder yang ditulis oleh Robert C. Martin, adalah sebuah gambaran tentang jenis-jenis Test yang dibutuhkan oleh organisasi pengembang profesional.\nAda 5 bagian dari piramid ini yang masing-masing membutuhkan setidaknya persentase coverage dari setiap Test. Berikut adalah daftarnya:\nExploratory Test - 5% System Test - 10% Integration Test - 20% Component Test - 50% Unit Test - 100% Unit Test # Pada bagian ini, Test dengan bahasa pemrograman yang digunakan untuk membangun sistem ditulis oleh programmer, dan kembali untuk programmer. Test yang ditulis harus bisa menspesifikasikan kebutuhan kode pada level yang paling rendah, jika memungkinkan pada level abstraksi.\nUnit Test ini biasanya ditulis terlebih dahulu sebelum membuat kode production yang nantinya akan dijalankan secara otomatis oleh Continuous Integration sebelum dikirimkan ke production.\nUnit Test harus mengcover keseluruhan sistem paling sedikit 90%. Robert mengatakan bahwa 100% adalah hal yng mustahil, namun setidaknya kita mencapai titik asimptotik mendekati 100%.\nComponent Test # Component Test adalah Test yang ditulis oleh Quality Assurance dan Business Analyst, dengan bantuan programmer. Test ini harus bisa dimengerti oleh seluruh Stakeholder, QA, BA, serta programmer yang menulis Test atau yang tidak menulisnya.\nTest ini setidaknya meng-cover 50% dari sistem. Sifat dari Test ini lebih mencerminkan pada happy-path daripada unhappy-path.\nHappy path =\u0026gt; Mencerminkan bagaimana komponen itu berfungsi selayaknya, biasanya ditulis oleh BA atau Stakeholder yang menginginkan bagaimana komponen itu berjalan sesuai keinginan.\nUn-happy path =\u0026gt; Skenario-skenario terburuk yang mungkin terjadi pada komponen yang akan ditest, contohnya kemungkinan error yang akan terjadi, Exception yang akan dilempar. Un-happy path biasanya digunakan pada Test-Driven Development dan Behavioural-Driven Development.\nIntegration Test # Integration Test adalah tipe Test yang akan sangat berarti pada sistem yang lebih besar, yang memiliki banyak komponen. Testing ini akan menghimpun beberapa kopmonen sekaligus, dan mengecek kesesuaian komunikasi antar komponen. Test ini biasanya ditulis oleh System Architect atau Lead Designer.\nTest ini sering disebut juga sebagai Choreography Test, karena menggambarkan \u0026ldquo;bagaimana setiap komponen berdansa seirama dengan komponen lainnya\u0026rdquo;.\nTest ini tidak mengetes alur bisnis sama sekali, hanya mengetes komunikasi antar komponen. Biasanya, Integration Test tidak akan dijalankan bersamaan dengan CI, namun dijalankan setiap malam, atau mingguan karena cukup memakan waktu yang lama. Pada level ini, kita mengetes performa dan throughput dari sistem.\nSystem Test # Test tipe ini adalah tipe test yang terotomatisasi yang mengecek seluruh sistem secara terintegrasi. Test tipe ini tidak mengecek alur bisnis secara langsung, namun mengetes apakah sistem sudah disambung bersamaan dengan benar. Kita mengetest performa dan throughput dari sistem.\nTest ini ditulis oleh System Architect dan Technical Lead, yang biasanya ditulis dengan bahasa dan environment yang sama dengan Integration Test untuk UI. Test ini jarang dijalankan, karena durasi testingnya yang lama.\nSystem Test setidaknya meng-cover 10% dari sistem. Tujuan dari Test ini hanya memastikan susunan sistemnya, bukan perilaku sistemnya. Asumsimnya adalah testing perilaku sudah dipastikan ada pada Unit Test dan Component Test.\nManual Exploratory Test # Disini adalah bagian dimana manusia atau pengguna terlibat langsung. Karena kita sebagai pengembang tidak bisa menulis Test untuk keseluruhan sistem secara sempurna, maka dibutuhkanlah peran manusia.\nManusia adalah makhluk hidup kreatif yang akan selalu berfikir untuk merusak sebuah sistem yang dirancang secara sistematis. Kreatifitas manusia inilah yang akan digunakan untuk menjelajahi bagaimana perilaku sistem yang \u0026ldquo;seharusnya\u0026rdquo; terjadi, sesuai dengan ekspektasi mereka.\nBagian ini bukanlah Test yang diotomasi, namun lebih ke diskenariokan, yang dieksekusi secara manual, oleh masing-masing individu dengan gaya penggunaan yang unik. Secara spesifik, pekerjaan pada bidang ini adalah Bug Hunter.\nSeluruh bug yang ditemukan pada level ini akan ditulis kembali pada Unit Test, Component Test, serta Integration Test untuk memastikan bug yang sudah ditemukan tidak akan terjadi lagi di kemudian hari.\n","date":"10 Februari 2023","permalink":"/artikel/mengenal-testing-automation-pyramid/","section":"Artikel-artikel","summary":"Pyramid Automation Testing, dilansir dari buku The Clean Coder yang ditulis oleh Robert C.","title":"Mengenal Testing Automation Pyramid"},{"content":"","date":"10 Februari 2023","permalink":"/tags/tech/","section":"Tags","summary":"","title":"tech"},{"content":"","date":"7 Februari 2023","permalink":"/tags/lifestyle/","section":"Tags","summary":"","title":"lifestyle"},{"content":"Yap, kata-kata deskripsi singkat di atas adalah lontaran kata-kata yang saya terima dari teman-teman saya. Bukan hanya dari teman-teman, bahkan sebagian dari anggota keluarga saya mengatakan hal yang sama. \u0026ldquo;Beli laptop kok mahal banget sih? Liat tuh punya X, harga 5 juta doang bisa ngegame lancar\u0026rdquo;.\nReaksi awal saya tentunya kesal, bahkan sekarang saya cenderung menghindari orang-orang yang mengatakan sedemikian rupa. Di mata orang lain, mungkin laptop hanyalah sebuah perangkat yang menunjang kebutuhan Office bagi pekerja kantoran, tugas bagi mahasiswa, atau gaming bagi gamer kelas berat.\nAlasan saya kesal termasuk masuk akal, karena kebutuhan utama penggunaan laptop saya sehari-hari adalah untuk pekerjaan. Sebagai programmer, sebuah Personal Computer, entah itu Laptop, Desktop, ataupun AIO akan kita gunakan penuh dari pagi sampai malam (bahkan 24 jam kalau kejar deadline).\nNamun fakta bahwa saya mengeluarkan uang yang cukup besar untuk sebuah MacBook tidak bisa dipungkiri, toh barangnya ada, saya bawa laptop ini di tas setiap hari, jadi ya mau sekesal apapun juga ya harus dimaklumi.\nWalaupun awalnya blind buy, tapi setelah satu tahun pemakaian, saya merasakan perbedaan yang sangat jauh pada beberapa aspek jika dibanding dengan laptop biasa. Alasannya beragam.\nLoad Time # Foto oleh Clint Patterson dari Unsplash\nLoad Time berarti waktu berapa lama sebuah perangkat dapat menyelesaikan suatu tugas. Sebagai contoh pada saat kita membuka browser, contohnya Google Chrome, kita akan menunggu beberapa detik setelah kita meng-klik ikon browser tersebut. Berapa detik kita menunggu Google Chrome terbuka itu disebut dengan Load Time.\nSama halnya dengan Game, entah itu membuka daerah baru, atau pada saat transisi ke suatu ruangan, atau sebelum kita melawan final-boss, akan ada loading sebelum kita bisa melaksanakan aktivitas kita selanjutnya.\nTentu saja, ngoding juga perlu Load Time cepat. Saya pernah mendengar beberapa keluhan dari teman-teman programmer lainnya, bahkan teman-teman sesama mahasiswa Teknik Informatika:\nEh lu tau enggak? Gue kalau udah nungguin loading bisa sambil makan atau ngemil dulu. Atau tak tinggal boker. Lama banget dah! ü§¶‚Äç‚ôÇÔ∏è\nAtau bahkan lebih parah:\nGhits, gue pernah ya nungguin Flutter keinstal, lama banget, sampai pas nunggu gue main HP kan. Tapi ketika gue main HP, gue lupa waktu tuh, tau-tau udah malam.\nBuset dah. Tapi ya load time tidak bisa kita salahkan sepenuhnya dalam kasus ini, karena faktor utama penyebab load time lama adalah ketidakmampuan prosesor atau RAM dalam memproses dan mengalokasikan data yang diterima. Tentu saja kecepatan HDD / SSD juga berpengaruh.\nSaya sendiri memiliki pengalaman untuk mem-benchmark MacBook dengan laptop ASUS X441UV saya yang lama. Untuk membuka sebuah project Flutter, sampai running, perbedaan load time-nya sangat drastis.\nDevice Running Time MacBook Pro M1 2020 24s ASUS X441UV 1m 12s Jadi kesimpulannya, dengan mengeliminasi load time, kita sebagai pengembang bisa berfokus ke hal lain yang lebih penting seperti memikirkan logika dari suatu sistem yang dibangun. Mengeliminasi load time juga menghasilkan waktu produktif yang lebih lama.\nBattery Life # Foto oleh Panos Sakalakis dari Unsplash\nPada dasarnya, kebutuhan laptop itu bisa dibawa kemana saja, tanpa perlu mengkhawatirkan tidak ada stop kontak. Masalah utama pada laptop sekarang adalah masalah baterai. Laptop-laptop pada umumnya, memiliki battery cycle yang akan menurun seiring dengan penggunaan. Kasus yang saya alami pada laptop ASUS saya, laptop itu bisa bertahan tanpa perlu nge-charge di tahun pertama. Tahun kedua sudah mulai ngedrop, dan harus full charge di bulan ketiga.\nAda tiga opsi yang saya bisa lakukan:\nOpsi termurah, Colok terus, risikonya kalau tiba-tiba tercabut atau mati listrik. Agak mahal, ganti baterai. Opsi mahal, ganti laptop. Pada saat itu, sebagai pelajar SMK, saya tidak memiliki uang untuk membeli baterai. Jadi saya ambil opsi pertama. Sebenarnya risikonya tinggi, jika pada saat Windows Update, dayanya tercabut, ada kemungkinan Windowsnya corrupt. Atau pada saat ngegame atau ngedesain, ada kemungkinan data progressnya hilang.\nHari ini, pada saat blog ini ditulis, MacBook saya sudah berusia 1 tahun lebih, dan battery lifenya masih di angka 87%. Masih bisa survive seharian penuh dibawah workload yang banyak.\nBattery health 100% ke 87% dalam satu tahun termasuk boros karena ada sedikit kesalahan yang saya perbuat, saya menginstal VSCode versi Intel sementara MacBook saya menggunakan arsitektur ARM. Tentunya saat itu, terjadi battery drain dari 100% ke 20% dalam waktu 2 jam. Sangat boros.\nPerforma # Foto dari Tekno Cerdas.\nSiapa yang mengira bahwa Apple Silicon bisa melebihi performa prosesor Intel yang pada saat itu terbaru dan terkuat? Dilansir dari Techjourneyman, saat Apple Silicon M1 dirilis, ia berhasil mengalahkan prosesor Intel Generasi ke-10 yang terbaiknya (i9-10980HK) sehingga Intel harus melawan kembali.\nTentunya Intel berhasil mengalahkan M1 dengan merilis i9-11900K, namun dikalahkan lagi secara mutlak oleh M1 Max dan M1 Ultra. Secara performa, dan Integrated GPU, M1 jauh di atas Intel, karena Intel bergantung kepada External GPU seperti Nvidia.\n\u0026ldquo;Dengan performa sebaik itu, dan kekuatan setinggi itu, bagimana penggunaan baterainya, apakah boros?\u0026rdquo; Tidak. Karena arsitektur M1 yang merupakan ARM yang berfokus kepada keseimbangan ukuran prosesor, penggunaan daya yang lebih rendah, panas yang lebih rendah, kecepatan, dan kehidupan baterai yang lebih panjang. Berbeda dengan prosesor yang memiliki arsitektur x86 yang mengoptimisasikan performa, namun memakan daya yang sangat besar.\nKekurangan # Tidak adil jika saya hanya mengutarakan kelebihan MacBook sementara tidak mengutarakan kekurangannya. Tentunya, hal-hal yang saya rasakan ini memiliki impact yang sangat besar bagi saya:\nLearning Curve yang lumayan terjal. Sebagai pengguna MacBook baru, MacOS memiliki banyak fitur yang mengandalkan shortcut jika ingin bekerja lebih cepat. Terlebih lagi, perbedaan UI dari Windows ke MacOS sangatlah berbeda.\nTidak modular, sekalinya Anda membeli MacBook, tidak ada opsi untuk meng-upgradenya dari sisi storage, RAM, ataupun prosesor. Ya, semua komponen telah tersolder ke motherboard.\nAplikasi Windows tidak bisa diinstal pada MacOS. Walaupun ada beberapa pengembang yang bisa membawa aplikasinya ke MacOS, namun kebanyakan juga tidak bisa diinstal begitu saja. Solusinya, Anda bisa menggunakan versi web dari aplikasi tersebut, atau diinstal pada sebuah Virtual Machine seperti Parallels.\nFitur-fitur yang sudah lama disediakan oleh Windows, belum ada di MacOS. Fitur yang sering saya butuhkan di Windows adalah volume mixer. Software simpel yang bertujuan untuk mengatur suara tiap aplikasi, tidak disediakan pada MacOS. Entah dalam tahap pengembangan, atau Apple sengaja tidak membuatnya.\nKapitalisme at it\u0026rsquo;s best. Banyak program berbayar yang overpriced, bahkan untuk penambahan storage iCloud, kita harus membayar subscription. Setiap fitur bawaan Apple seperti Music, TV, Podcasts semuanya berbayar.\nPort. MacBook rilisan tahun 2020 ke atas, dengan seri 13-inch, tidak memiliki port yang cukup untuk kebutuhan sehari-hari. Hanya 2 port thunderbolt type C yang disediakan oleh Apple, dan tidak ada port lain. Jadi terpaksa saya harus membeli dongle, yang tentunya tak kalah mahal juga.\nAkhir kata # Disamping mewahnya Logo Apple yang disajikan, banyak kelebihan dari MacBook yang sudah saya rasakan. Namun apakah MacBook ini worth to buy, jujur, tidak. Saya secara pribadi lebih prefer ke Linux, dengan pengoptimasian yang sedemikian rupa (namun rumit), Anda bisa mendapatkan performa setara MacBook atau lebih dengan menggunakan Linux tanpa mengeluarkan budget puluhan juta.\nBahkan bisa saya katakan, laptop ASUS X441UV saya hampir mencapai performa MacBook M1 untuk basic daily usage ketika menggunakan Arch Linux. Jadi, untuk kalian yang ingin membeli produk Apple, pertimbangkan ulang budget-nya, ya üò¨.\n","date":"7 Februari 2023","permalink":"/artikel/macbook-gaya-doang-atau-emang-gahar/","section":"Artikel-artikel","summary":"Yap, kata-kata deskripsi singkat di atas adalah lontaran kata-kata yang saya terima dari teman-teman saya.","title":"Macbook Gaya Doang Atau Emang Gahar"},{"content":"4 Reality adalah sebuah tim Virtual YouTuber (biasa disebut VTuber) yang berada di Indonesia. Dinamakan 4 Reality karena penemu dari tim VTuber ini terdiri dari 4 karakter: Kurokami Itsuki, Raihan Ikeda, Karen, dan Vyula.\nDisamping munculnya Generasi ke-1 4 Reality, mereka juga menggagas tim Utaite (yang berfokus kepada konten cover lagu / menyanyi), juga terdiri dari 4 karakter: Cyanpile, Aura Lily, Yua Deyanara, Miasviel.\nWebsite ini dibangun dengan menggunakan:\nVue.js v3 - menggunakan compiler Vite v1 TailwindCSS v2 Vercel Pengembangan # Pengembangan website ini didasarkan pada rasa kesukaan saya terhadap salah satu karakter Utaite Aura Lily, suatu Peri cantik yang charming dan lucu. Setelah menjelajahi server Discord 4 Reality, saya bertemu Karen yang juga memanage seluruh asset dari tim ini. Dengan inisiatif ingin membuatkan Aura Lily sebuah wallpaper, saya mendapatkan desain karakternya dengan mudah.\nBerikut adalah desain wallpaper Aura Lily yang selanjutnya akan menjadi ide pengembangan website 4 Reality:\nDulu saya sangat menyukai konsep dari Broken Grid, namun tantangan terbesar yang akan saya hadapi ketika pengembangan adalah yang saya sebut sebagai stylesheet chaos. Kondisi dimana akan ada banyak sekali stylesheet yang redundan dan cenderung hanya bisa dipakai satu kali untuk karakter yang spesifik. Beruntung saya menemukan framework CSS yang bisa mengatasi ini, TailwindCSS.\nBisa dibayangkan bagaimana sulitnya membuat suatu halaman profil karakter yang memuat banyak informasi seperti:\nNama talent Jenis karakter yang diperankan Sosial media Motto Palet warna yang digunakan Informasi tambahan lainnya Setelah desain Aura Lily yang sedemikian rumit selesai, selanjutnya saya berfikir \u0026ldquo;Bagaimana jika saya kembangkan kembali website ini?\u0026rdquo;. Lihat pernyataan kembangkan kembali, pernyataan ini muncul karena website 4 Reality pada saat itu sudah ada, namun sangat jauh dari kata \u0026ldquo;layak\u0026rdquo;.\nTemplate Bootstrap 4 yang seadanya, ditambah dengan asset raw yang begitu besar hingga mencapai 10MB per gambar sehingga load time sangat terpengaruh, serta desainnya yang sangat simpel (karena template, tentunya).\nDilema Profile Section # Tantangan selanjutnya bukanlah bagaimana saya memikirkan tentang bagaimana desain websitenya, namun tentang bagaimana saya bisa menyajikan 8 talent sekaligus dalam suatu halaman, tanpa perlu mengganti halaman. Vue Dynamic Component akhirnya digunakan untuk menyimpan setiap informasi talent. Jadi pengunjung website tinggal meng-klik ikon talent yang ingin dilihat maka secara otomatis detail dari talent tersebut akan muncul.\nBerikut adalah rancangan dari Profile Section:\nNamun tentu saja, ada informasi yang tidak akan terlihat jika desain dari Profile Section ini berbentuk scrolling, tidak ada informasi \u0026ldquo;Bagian mana talent ini berasal? Apakah dia VTuber, atau Utaite? Lalu bagaimana jika ada Generasi 2, Generasi 3, dan seterusnya?\u0026rdquo; Tentu saja, ini adalah dilema tersendiri. Saya memiliki 2 opsi:\nMenampilkan informasi karakter apa yang diperankan oleh talent pada detail profilnya, dengan risiko desain akan menjadi tidak seimbang karena penambahan kata \u0026ldquo;Gen 1\u0026rdquo; atau \u0026ldquo;Utaite\u0026rdquo; yang tegas. Mengkategorikan karakter berdasarkan peranan masing-masing talent, dengan cara membuat \u0026ldquo;Tab\u0026rdquo; Saya memutuskan untuk menggunakan opsi 2, opsi yang paling mudah diimplementasikan, serta tidak mengubah keseluruhan desain yang sudah ada. Berikut adalah tampilan yang saya ambil dari website langsung\nTerus bagian lainnya gimana, Tsu? # Sebagai konteks, Tsu disini adalah sapaan dari kata Hatsu (Âàù / „ÅØ„Å§). Nickname saya pada saat itu adalah HatsuShiroyuki (ÂàùÁôΩÈõ™) - Salju Putih Pertama.\nItulah kalimat pertanyaan yang Karen ucapkan ketika saya selesai mengerjakan Character Section, sebuah pertanyaan sederhana namun cukup menguras otak saya untuk memikirkan bagaimana desain yang cocok untuk section Home, Visi Misi, Kontak Kami, dan Footer.\nBetul-betul bukan hal yang mudah, karena impresi pertama yang saya berikan adalah nuansa Broken Grid yang chaotic, namun tetap seimbang dan enak dipandang.\nHome # Section Home secara harfiah hanya menampilkan overview dari keseluruhan website. Setelah menguras otak cukup lama hanya untuk section Home, saya mengirimkan draft section home ini kepada Karen dan Itsuki:\nTidak ada penolakan, namun lebih kepada saran:\nGimana kalau di bawah 4 Reality Team ini lu tambahin kata-kata ini, Tsu: \u0026ldquo;Together Everyone Achieves More And There is no I in Team.\u0026rdquo;\n‚Äî Itsuki\nSama sekalian di atas ada header, terus warnanya jangan tok hitam. Agak ke abu-abu juga boleh keknya.\n‚Äî Karen\nChallenge accepted, Ki, Ren. Setelah beberapa menit menyesuaikan perubahan, berikut adalah desain yang saya kirimkan lagi ke mereka:\nSemua menyetujui desain Home Section, dilanjut ke About Us Section.\nAbout Us # Section ini juga adalah sebuah tantangan tersendiri karena kita ingin menampilkan 1 visi dan 3 misi mereka, namun sekaligus menceritakan secara singkat tentang tim mereka.\nSaya menggagas ide dimana saya akan menggunakan sub-section atas untuk Tentang Tim, dan sub-section bawah untuk Visi dan Misi. Tentunya desain ini tidak diterima dengan baik, dan cenderung merusak nuansa Broken Grid yang digunakan:\nTentu saja, saya rasa kalian sebagai pembaca juga sama kesalnya \u0026ldquo;kok gitu?\u0026rdquo;. Secara teknis tentu akan merusak tema, namun bagaimana lagi, otak juga sudah stuck üíÄ. Saya meminta waktu untuk mengistirahatkan otak saya selama beberapa hari, juga untuk mencari inspirasi untuk section ini.\n2 hari telah berlalu, dan saya mengirimkan desain ini:\nKonsep yang saya buat untuk About Us Section adalah sebagai berikut:\nPojok kiri atas berisi \u0026lsquo;V\u0026rsquo; atau \u0026lsquo;M\u0026rsquo;, yang berarti Visi atau Misi. Konten visi atau misi tidak terlalu panjang. Susunan Card akan berurut ke bawah, bukan zig-zag pada tampilan Tablet. About 4 Reality yang ada di bagian kiri berbentuk sticky, jadi akan secara otomatis scroll ke bawah ketika user juga scroll ke bawah. Ini alasan utama mengapa bagian kiri terkesan kosong. Desain diterima oleh semua anggota 4 Reality, lalu saya langsung menggabungkan desain yang ada, lalu slicing desain tersebut ke kode.\nSlicing # Slicing adalah tahap paling lama, memikirkan bagaimana tampilan dapat sesuai pada setiap viewport bukanlah suatu hal yang mudah. Pengetahuan akan responsive web design akan sangat berguna pada tahap ini.\nUntuk Home Section, relatif mudah, hanya memakan waktu beberapa jam untuk dapat menjadikannya responsif di seluruh viewport.\nAbout Us Section juga relatif mudah. Tampilkan Card secara zig-zag di bagian kanan pada viewport Desktop, tampilkan secara berurutan dari atas ke bawah pada viewport Tablet, dan hapus property sticky pada viewport Mobile.\nCharacter Section ini tantangan berat dari seluruh section.\nSaya harus membangun seluruh desain yang unik pada setiap Talent. Ditambah lagi ada permintaan unik dari beberapa Talent yang entah menginginkan opsi 2 warna, atau penggunaan arah nama yang berbeda (cek detail Aura Lily sebagai contoh). Saya harus mengkategorikan setiap Talent kepada bagian yang sesuai. Saya harus memastikan seluruh desain dapat dilihat dengan baik di seluruh viewport, lagi-lagi harus responsif. Sisanya untuk section Kontak dan Sosial Media hanya berupa section simpel yang tidak terlalu bagus, tetapi masih selaras dengan tema warna yang digunakan.\nAkhir kata # Sejauh karir saya dalam pengembangan website, 4 Reality ini adalah website ter-kompleks yang pernah saya buat. Namun hasil dari kerja keras ini terbayar dengan baik karena Website 4 Reality menjadi pemenang dalam 2 event Wibucode:\nJuara 1 Event Front-end 2021 Wibucode pada tanggal 14 Juni 2021\nJuara 2 Event Tailwind CSS 2021 Wibucode pada tanggal 13 Desember 2021\nSebuah prestasi kecil yang membanggakan üò¨.\nTerima kasih saya ucapkan kepada seluruh pihak yang terkait pada pengembangan Website ini. Terutama Karen yang selalu memberikan umpan balik yang positif dan membangun, Itsuki dan Nervia (staf) yang sering memberikan kritik pedas dan tajam, serta Aura Lily yang menjadi motivasi utama dibalik pengembangan Website ini.\n","date":"6 Februari 2023","permalink":"/portfolio/website/4reality/","section":"Portfolios","summary":"4 Reality adalah sebuah tim Virtual YouTuber (biasa disebut VTuber) yang berada di Indonesia.","title":"4 Reality - Web Tim Vtuber Indonesia"},{"content":"","date":"6 Februari 2023","permalink":"/tags/artikel/","section":"Tags","summary":"","title":"artikel"},{"content":"","date":"6 Februari 2023","permalink":"/tags/portfolio/","section":"Tags","summary":"","title":"portfolio"},{"content":"","date":"6 Februari 2023","permalink":"/tags/website/","section":"Tags","summary":"","title":"website"},{"content":"","date":"20 Oktober 2022","permalink":"/tags/coding/","section":"Tags","summary":"","title":"coding"},{"content":"","date":"20 Oktober 2022","permalink":"/series/prinsip-solid/","section":"Series","summary":"","title":"Prinsip SOLID"},{"content":"Oke, kita sudah belajar bagaimana prinsip Single Responsibilty secara abstrak. Sekarang kita coba implementasikan ke framework PHP tercinta, Laravel.\nStudi Kasus # Anggaplah kita memiliki sebuah controller PostController:\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\Post; use Illuminate\\Http\\Request; use Illuminate\\Http\\Response; class PostController { public function store(Request $request): Response { $request-\u0026gt;validate([ \u0026#39;title\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;min:20\u0026#39;, \u0026#39;max:100\u0026#39;], \u0026#39;body\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], ]); Post::create($request-\u0026gt;only(\u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;)); return redirect() -\u0026gt;route(\u0026#39;post.index\u0026#39;) -\u0026gt;withMessage(\u0026#39;Post created successfully\u0026#39;); } } Awalnya, controller ini sangatlah simpel, sehingga metode store() memiliki 3 tanggung jawab: memvalidasi data, menyimpan data, dan mengirimkan umpan balik berupa redirect dengan pesan.\nNamun bagaimana jika kita juga harus mengirimkan notifikasi kepada pengguna yang sudah berlangganan kepada aplikasi yang kita buat? Bagaimana jika kita butuh menyimpan gambar juga? Jika kedua tanggung jawab itu berada pada suatu metode store(), maka secara langsung metode ini memiliki 5 tanggung jawab.\nLalu bagaimana kita memisahkan meringankan tanggung jawab metode store() ini?\nLangkah 1: Memisahkan Validator ke Request class # Laravel memiliki sebuah namespace class khusus yang digunakan sebagai Validator. Yaitu Request class. Kita bisa membuatnya dengan cara menjalankan command Artisan php artisan make:request StorePostRequest.\nNaming convention yang digunakan Laravel untuk Request class adalah [Method][Model]Request. Contoh lain jika kita ingin melakukan update, maka Request class yang akan kita bangun adalah UpdatePostRequest.\nKita pindahkan fungsi validasi yang ada di PostController#store ke StorePostRequest#rules. Hasilnya adalah seperti berikut:\n\u0026lt;?php namespace App\\Http\\Requests; use Illuminate\\Foundation\\Http\\FormRequest; class StorePostRequest extends FormRequest { /** * Determine if user is authorized to make this request. * * @return bool */ public function authorize() { return false; } /** * Get the validation rules that apply to the request. * * @return array */ public function rules() { return [ \u0026#39;title\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;min:20\u0026#39;, \u0026#39;max:100\u0026#39;], \u0026#39;body\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], ]; } } \u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\Post; use App\\Http\\Requests\\StorePostRequest; use Illuminate\\Http\\Response; class PostController { // `Request $request` berubah menjadi `StorePostRequest $request` public function store(StorePostRequest $request): Response { Post::create($request-\u0026gt;only(\u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;)); // Blok kode menyimpan gambar // Blok kode mengirimkan email kepada pelanggan return redirect() -\u0026gt;route(\u0026#39;post.index\u0026#39;) -\u0026gt;withMessage(\u0026#39;Post created successfully\u0026#39;); } } Nah, kita telah meringankan sedikit beban metode store(). Selanjutnya adalah‚Ä¶\nLangkah 2: Membuat class Service (layanan) untuk model Post # Terminologi Service disini adalah suatu class yang berfungsi untuk mengolah data yang masuk melalui Request. Tidak ada naming convention untuk Service pada Laravel, jadi kita buat manual saja di \\App\\Services\\PostService.php.\n\u0026lt;?php namespace App\\Services; class PostService { public static function store(array $data): void { Post::create($data); // Blok kode menyimpan gambar // Blok kode mengirimkan email kepada pelanggan } } Karena metode store dari PostService adalah metode statis, maka kita bisa langsung memanggilnya pada PostController sebagai berikut:\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\Post; use App\\Http\\Requests\\StorePostRequest; use App\\Services\\PostService; use Illuminate\\Http\\Response; class PostController { public function store(StorePostRequest $request): Response { PostService::create($request-\u0026gt;only(\u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;)); return redirect() -\u0026gt;route(\u0026#39;post.index\u0026#39;) -\u0026gt;withMessage(\u0026#39;Post created successfully\u0026#39;); } } Nah sekarang, metode store dari PostController memiliki 1 tanggung jawab. Ia hanya bertanggung jawab untuk me-redirect ke rute post.index. Anda juga bisa menambahkan try-catch untuk mengantisipasi error yang akan ada.\nNamun, metode store dari PostService memiliki 3 tanggung jawab. Secara prinsip SOLID, blok kode ‚ÄúMenyimpan Gambar‚Äù serta blok kode ‚ÄúMengirim email kepada pelanggan‚Äù harus dipisah ke file tersendiri.\nSaya tidak akan menjelaskan secara lengkap kode dari kedua Service yang akan dipisah, namun kurang lebih struktur barunya adalah sebagai berikut:\nüóÇ app/ ‚îú‚îÄ‚îÄ üóÇ Http/ ‚îÇ ‚îî‚îÄ‚îÄ üóÇ Controllers/ ‚îÇ ‚îî‚îÄ‚îÄ üìÅ PostController/ ‚îÇ ‚îî‚îÄ‚îÄ #store(StorePostRequest $request): Response ‚îú‚îÄ‚îÄ üóÇ Notifications/ ‚îÇ ‚îî‚îÄ‚îÄ üìÅ NewPostNotification/ ‚îÇ ‚îú‚îÄ‚îÄ #__construct(): void ‚îÇ ‚îú‚îÄ‚îÄ #via(mixed $notifiable): array ‚îÇ ‚îú‚îÄ‚îÄ #toMail(mixed $notifiable): MailMessage ‚îÇ ‚îî‚îÄ‚îÄ #toArray(mixed $notifiable): array ‚îî‚îÄ‚îÄ üóÇ Services/ ‚îú‚îÄ‚îÄ üìÅ PostService/ ‚îÇ ‚îî‚îÄ‚îÄ #::create(array $data): void ‚îî‚îÄ‚îÄ üìÅ ImageService/ ‚îî‚îÄ‚îÄ #::upload(UploadedFile $file): void Begitulah kurang lebih penerapan prinsip SOLID yang pertama yaitu Single Responsibility. Terima kasih sudah membaca!\nDaftar Pustaka # Thumbnail oleh Mitchell Luo dari Unsplash\n","date":"20 Oktober 2022","permalink":"/artikel/prinsip-solid-1-single-responsibility-laravel-example/","section":"Artikel-artikel","summary":"Oke, kita sudah belajar bagaimana prinsip Single Responsibilty secara abstrak.","title":"Prinsip SOLID #1: Single Responsibility - Laravel Example"},{"content":"Single responsibility berarti, suatu metode haruslah memiliki satu tanggung jawab. Tidak boleh lebih dari satu. Dikutip dari SOLID, Single Responsibility berarti sebuah kelas harus memiliki satu, dan hanya satu alasan untuk diubah.\nStudi kasus. # Anggaplah kita membuat suatu aplikasi POS, Bapak Harry menginginkan sebuah laporan penjualan yang akan di-export ke bentuk CSV. Simpel saja, kita buat seperti ini:\n\u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Facades\\DB; class SaleReport { public function export(): string { $sales = DB::table(\u0026#39;sales\u0026#39;)-\u0026gt;latest()-\u0026gt;get(); return \u0026#39;CSV format\u0026#39;; } } Tapi, pak Harry ingin data bisa di-export pada rentang tanggal waktu tertentu, bukan data terakhir saja. Yah, karena permintaan client bisa berubah sewaktu-waktu, kita lakukan perubahan menjadi seperti ini:\n\u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Facades\\DB; class SaleReport { public function export( string $dateStart, string $dateEnd ): string { $sales = DB::table(\u0026#39;sales\u0026#39;) -\u0026gt;whereBetween(\u0026#39;created_at\u0026#39;, [$dateStart, $dateEnd]) -\u0026gt;get(); return \u0026#39;CSV format\u0026#39;; } } Revisi di-acc, dan kita bisa istirahat untuk hari ini. Keesokan harinya, setelah bangun tidur, cek notifikasi ‚ÄúEh, tambahin bentuk export untuk format lain ya. Usahakan bisa PDF, Excel, dan JSON‚Äù. Waduh nambah kompleks dong kelas SaleReport kita. Ya sudahlah gak apa-apa, kita ngoding lagi:\n\u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Facades\\DB; class SaleReport { public function export( string $dateStart, string $dateEnd, string $format = \u0026#39;csv\u0026#39; ): string { $sales = DB::table(\u0026#39;sales\u0026#39;) -\u0026gt;whereBetween(\u0026#39;created_at\u0026#39;, [$dateStart, $dateEnd]) -\u0026gt;get(); if ($format == \u0026#39;pdf\u0026#39;) { return \u0026#39;PDF format\u0026#39;; } if ($format == \u0026#39;xls\u0026#39;) { return \u0026#39;XLS format\u0026#39;; } if ($format == \u0026#39;json\u0026#39;) { return \u0026#39;JSON format\u0026#39;; } return \u0026#39;CSV format\u0026#39;; } } Lho he? Kok jadi panjang banget kelas SaleReport kita? Apalagi metode export() kita punya banyak tanggung jawab, mulai dari mengabil data sales, ngambil data berdasarkan tanggal, nge-export data pula. Ada 3 tanggung jawab yang metode export() miliki. Kita harus refaktor kode ini biar jadi rapih.\nPrinsip [S]ingle Responsibility. Satu kelas atau metode hanya memiliki satu tanggung jawab. # Kita bagi menjadi dua kategori kelas:\nKelas untuk mengambil data, SaleReport Kelas untuk meng-eksport data, xExport Pertama, kita mulai dengan memindahkan script untuk meng-export data ke masing-masing file berbeda:\n\u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Collection; class PdfExport { public function export(Collection $saleData): string { return \u0026#39;PDF export\u0026#39;; } } \u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Collection; class XlsExport { public function export(Collection $saleData): string { return \u0026#39;XLS export\u0026#39;; } } \u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Collection; class JsonExport { public function export(Collection $saleData): string { return \u0026#39;JSON export\u0026#39;; } } \u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Collection; class CsvExport { public function export(Collection $saleData): string { return \u0026#39;CSV export\u0026#39;; } } Kedua, kita refaktor kelas SaleReport menjadi seperti ini:\n\u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Collection; use Illuminate\\Support\\Facades\\DB; class SaleReport { public function between( string $dateStart, string $dateEnd ): Collection { return DB::table(\u0026#39;sales\u0026#39;) -\u0026gt;whereBetween(\u0026#39;created_at\u0026#39;, [$dateStart, $dateEnd]) -\u0026gt;get(); } } Lihat perubahan metode export menjadi between. Karena kelas SaleReport bertanggung jawab untuk mengambil data saja, maka ‚Äúmengambil data dari rentang waktu sekian hingga sekian‚Äù adalah salah satu tanggung jawab yang benar.\nTapi, apakah satu kelas hanya boleh memiliki satu metode saja?\nTentu saja tidak. Kita bisa menambahkan beberapa metode lain, NAMUN tetap memiliki tanggung jawab sebagai ‚Äúmengambil data‚Äù. Contohnya bagaimana? Anggap saja pak Harry menginginkan data berdasarkan Bulan, dan Tahun secara spesifik.\n\u0026lt;?php namespace App\\Reports; use Illuminate\\Support\\Collection; use Illuminate\\Support\\Facades\\DB; class SaleReport { public function between( string $dateStart, string $dateEnd ): Collection { return DB::table(\u0026#39;sales\u0026#39;) -\u0026gt;whereBetween(\u0026#39;created_at\u0026#39;, [$dateStart, $dateEnd]) -\u0026gt;get(); } public function forYear(int $year): Collection { return DB::table(\u0026#39;sales\u0026#39;) -\u0026gt;whereYear(\u0026#39;created_at\u0026#39;, $year) -\u0026gt;get(); } public function forMonth(int $month): Collection { return DB::table(\u0026#39;sales\u0026#39;) -\u0026gt;whereMonth(\u0026#39;created_at\u0026#39;, $month) -\u0026gt;get(); } } Sekarang kita memiliki beberapa file sebagai berikut:\nüóÇ app/ ‚îî‚îÄ‚îÄ üóÇ Reports/ ‚îú‚îÄ‚îÄ üìÅ SaleReport.php/ ‚îÇ ‚îú‚îÄ‚îÄ #between(string $dateStart, string $dateEnd): Collection ‚îÇ ‚îú‚îÄ‚îÄ #forYear(int $year): Collection ‚îÇ ‚îî‚îÄ‚îÄ #forMonth(int $month): Collection ‚îú‚îÄ‚îÄ üìÅ PdfExport.php/ ‚îÇ ‚îî‚îÄ‚îÄ #export(Collection $saleData): string ‚îú‚îÄ‚îÄ üìÅ XlsExport.php/ ‚îÇ ‚îî‚îÄ‚îÄ #export(Collection $saleData): string ‚îú‚îÄ‚îÄ üìÅ JsonExport.php/ ‚îÇ ‚îî‚îÄ‚îÄ #export(Collection $saleData): string ‚îî‚îÄ‚îÄ üìÅ CsvExport.php/ ‚îî‚îÄ‚îÄ #export(Collection $saleData): string Nah, sekarang kita memiliki kelas SaleReport yang memiliki tanggung jawab HANYA mengambil data penjualan. Lalu bagaimana kita mengaplikasikan kode yang telah kita tulis?\nPengaplikasian prinsip [S]ingle Responsibility # Anggap saja kode kita berjalan pada suatu route:\n\u0026lt;?php use App\\Reports\\SaleReport; use App\\Reports\\CsvExport; use Carbon\\Carbon; use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function() { $saleReport = new SaleReport(); $csvExport = new CsvExport(); return $csvExport-\u0026gt;export([ $saleReport-\u0026gt;between([ Carbon::now()-\u0026gt;subYear(), Carbon::now() ]) ); // returns: \u0026#39;CSV export\u0026#39; }); Bisa dilihat kode kita jauh lebih rapi dibandingkan dengan kode yang kita tulis sebelum refaktor.\nDaftar Pustaka # Thumbnail oleh Mitchell Luo dari Unsplash\n","date":"20 Oktober 2022","permalink":"/artikel/prinsip-solid-1-single-responsibility-brainstorming/","section":"Artikel-artikel","summary":"Single responsibility berarti, suatu metode haruslah memiliki satu tanggung jawab.","title":"Prinsip SOLID #1: Single Responsibility - Brainstorming"},{"content":"","date":"16 Agustus 2022","permalink":"/tags/coffee/","section":"Tags","summary":"","title":"coffee"},{"content":"So, coffee has been an exciting (and expensive) part of my life, it has been a year since I\u0026rsquo;m into this brewing field, and I guess it is my time to show what I have learnt throughout this year. Because I\u0026rsquo;m into this field, I write this article about coffee and its tools which I have in my home, and potentially, you could.\nThis is not a sponsored article, for real. I\u0026rsquo;m writing this just for fun and for knowledge purposes.\nCoffee Beans # Photo by Anastasiia Chepinska on Unsplash\nCoffee beans are the most essential part of a coffee brewing, I mean, you want to brew a cup coffee, not a tea, right? Talking about coffee beans, there are three varieties of coffee you can see on the market:\nArabica; which has fruity, acid, and vivid taste. Robusta; which has bitter, woody, and earthy taste. Blend; which is a mix of Arabica and Robusta, and usually used for an espresso brew. Now you know about the coffee varieties, let\u0026rsquo;s talk about the grind size. Photo courtesy of Know Your Grinder\nTo be honest, let\u0026rsquo;s talk about this grind size in a second. Grind size is hard to measure, it is more like a sense to decide which grind size is which. Grind size is varies from every type of grinding machine or grind tool manufacturer, they have their own standard. For example, my Timemore Slim Chestnut has a grind size 5 to 11 for an espresso grind, 15 to 17 for a pourover, and more. So, take it as a grain of beans when it comes to grind size.\nIn general, there are three settings of the grind size (which are indicated in bold). There are:\nType Particle Size General Use Extra Coarse 1.5mm Cold Brew Coarse 1mm French Press, Plunger, Percorator Medium-coarse 0.8mm to 0.7mm Cupping, Chemex, Clever Dripper, Flat Bottom Medium 0.6mm Cone-shaped filters Medium-fine 0.5mm V60, Siphon, Aeropress Fine 0.35mm Moka Pot, Espresso Extra Fine 0.1mm Turkish Coffee/Cezve Table reference are taken from Roastercoffees on Pinterest.\nTools # This section is the most expensive of all, even though it\u0026rsquo;s a one-time buy, the initial cost is relatively high in comparison to the coffee beans. These are some what I have in my home:\nThe Grinder, Timemore Chestnut Slim # Photo by Timemore Malaysia on Bunamarket\nYes, the grinder itself. This tool is the most expensive tool I have. It cost around $100, and it is a hand-grinder. Because it is a hand grinder, I can easily carry the grinder and the beans for a brew to wherever I want. But, the cons are, it is heavy, and not suitable for an espresso grind. I mean, it is possible to make an espresso grind, but it is very time consuming and consume a lot of energy.\nA grinder in your hand can help you to make a fresh grounded coffee brew every single day. I prefer a fresh ground coffee because it has more aroma, more flavor, and more complexity.\nDripper, V60 # Photo by Ke Vin on Unsplash\nBy mentioning V60, you need two tools to get. A V60 dripper, and a V60 filter. Filter comes in two types, there are paper filters, and mesh filters. Paper filters are cheap, and potentially filters more softer coffee particles rather than mesh filters. But mesh filters can save you extra money in the long run because it is reusable and washable.\nThis tool is the cheapest one you can get. Buying a V60 kit will cost you around $10, depends on the material used on V60 dripper and the paper quality. The kit won\u0026rsquo;t include the serving kit such as the carafe to hold the brewed coffee, you can directly put a mug under the V60 dripper if you want.\nDripper, and a carafe, Chemex # Photo by Zarak Khan on Unsplash\nChemex, to me, is a fancier V60, it has two purposes in one Chemex. A holder for V60 filter, and a carafe. It also make coffee looks beautiful to see under the light.\nBrewing in a Chemex is a little bit slower than V60. My brew time is usually 3m 15s for a V60 brew, resulting in 225ml of coffee, but for a Chemex, using the same brew profile, it could be around 4m.\nThe reason why a Chemex brew is slower is because, there are little to none of airflow. The only airflow Chemex has is only in the pouring tunnel, which are usually clogged during the brewing process. This issue could be fixed by using a chopstick in the tunnel to let it breathe. A V60 dripper has a spiral-shaped little bumps to help the airflow, meanwhile the Chemex has none.\nThat is the reason why Chemex brew needs coarser coffee beans than a V60 brew. A Chemex bootleg would cost around $10, meanwhile the real one would cost $80.\nMoka Pot # Photo by Mostafa Mahmoudi on Unsplash\nWhen it come to espresso brew, this tool is the closest one and the cheapest one to get, at least to mimic the strength of an espresso itself. Moka Pot brew is very technical, and difficult brew to master. It has a lot of things to consider, the coffee, the grind size, the water temperature, the technique used, it all combines into one Moka Pot brew.\nIt took me 4 months of trials and errors to finally pull a great, strong but balanced shot, which is ideal for my espresso standard. In comparison for an espresso shot to a Moka Pot shot is the amount of coffee and the muddiness. Moka Pot brew tends to have a lot of water, resulting in 2 to 3 shots of espresso (a shot is 30ml, so it should be 90ml), and muddy. This muddiness came from the extra fine grind that passes through the filter, which Moka Pot\u0026rsquo;s filter hole are larger than espresso machine.\nThe one I have is Conalli Moka Pot, which can produce 3 shots of espresso in a single brew. It costs $20.\nScale, Latina Newton Scale # Photo by Philocoffee on Tokopedia\nFor a good brew, it is important to have a scale. To be honest, it is a geeky kind-of-thing, when you bought a scale and a thermometer for a single brew, but really, it is worth the money you spend. The feeling of making a good brew to start your day is just a satisfaction in another level. It cost $15, an entry level scale.\nThermometer, Latina Thermo Blanco Lollipop # Photo by Philocoffee on Tokopedia\nAnother entry level thermometer, not so accurate but helpful to make a good brew. Again, it\u0026rsquo;s \u0026ldquo;geeky\u0026rdquo; to actually have either or both a scale and/or a thermometer. Owning a thermometer will prevent your brew from under-extracting or over-extracting.\nWater temperature will greatly impact the quality of the brew, but if you don\u0026rsquo;t have one, use this rule of thumb:\nIf the beans\u0026rsquo; roast profile is a light roast, let the water boils and chill it down for a while for around 30s, this will put down the water temperature to 95¬∫C. It is my standard temperature for doing a light roast. Preferences might vary. For a medium roast, the water temperature needs to be around 88¬∫C to 92¬∫C. It also usually used for a specialty roasts where the roaster mix some additive during the process. For a dark roast, it should be around 82¬∫C to 85¬∫C. Kettle, Latina Olive Kettle # Photo by Philocoffee on Tokopedia\nIf you\u0026rsquo;re noticing, I\u0026rsquo;ve been buying this Latina brand recently, because it is fairly cheap, and good for an amateur brew. It can pulls a great brew, so why not? This kettle is small, so it fits me for my daily home brew, it can carry 420ml of water.\nAs you can see the design, the handle is metal, so the heat from the chamber is also transferred to the handle. So every time I make a brew, my hand burns a little. This one costs $7.\nThe end? # So, that\u0026rsquo;s all about my brewing kit. In total, it would costs around $250, it could cost more if I bought mid-end thermometer, kettle, and scale, but I think it\u0026rsquo;s not worth it for now. Just a reminder that even a professional barista can make a good coffee without an expensive machinery. This remarks that anything you own, can brings you to mastery.\nFootnote # Thumbnail by Julien Labelle on Unsplash.\n","date":"16 Agustus 2022","permalink":"/artikel/my-home-brewing-kit-an-expensive-hobby/","section":"Artikel-artikel","summary":"So, coffee has been an exciting (and expensive) part of my life, it has been a year since I\u0026rsquo;m into this brewing field, and I guess it is my time to show what I have learnt throughout this year.","title":"My Home Brewing Kit an Expensive Hobby"},{"content":"Hai, lama tak jumpa üëã. Udah lama gak nulis juga, jadi agak kangen sedikit sama blog yang isinya daging semua. Well, berhubung ada waktu, jadi let\u0026rsquo;s go üò¨.\nJadi kasusnya itu, barusan Saya mau refaktor project legacy, tapi karena ini adalah fase awal refaktor, jadi sebisa mungkin databasenya nggak berganti dulu. Karena pasti butuh waktu ekstra juga buat remigrate database lama ke database yang baru dengan struktur dan skema yang berbeda. Mari kita kupas.\nLaravel Breeze # Laravel Breeze ini adalah sebuah package yang disediakan oleh Laravel, secara official yang bisa teman-teman unduh disini. Breeze ini udah nyediain view untuk Login, Register, Lupa Password, Verifikasi Email, dan lain sebagainya yang bisa mempersingkat waktu development kalian.\nSekedar info barangkali males buka dokumentasi, cara instal Breeze adalah sebagai berikut:\n# 1. Tambahkan Breeze ke packages.json atau dengan cara menjalankan perintah: composer require laravel/breeze --dev # 2. Instal Breeze Scaffolding untuk Laravel dengan cara menjalankan perintah: php artisan breeze:install # 3. Jalankan npm install \u0026amp;\u0026amp; npm run dev npm install \u0026amp;\u0026amp; npm run dev Dengan kelebihannya ini, Breeze memiliki beberapa kelemahan jika digunakan secara bawaan. Breeze hanya mengenal Email dan Password sebagai \u0026ldquo;key\u0026rdquo; dari autentikasi mereka. Lantas, bagaimana jika Saya ingin mengubah kolom autentikasi default Breeze? Cukup mudah sebetulnya, cuma butuh waktu sekitar 3 menitan, namun karena Saya orang dokumentasi, jadi Saya sekalian ngulik ke file vendor-nya juga wkwkwk.\nSkema Database # Anggap saja Saya memiliki tabel user dengan struktur seperti ini:\nmysql\u0026gt; SHOW COLUMNS FROM MUSR; +------------+--------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +------------+--------------+------+-----+---------+-------+ | USRID | int | NO | PRI | NULL | | | USREM | varchar(100) | NO | | NULL | | | USRNM | varchar(100) | NO | | NULL | | | USRPW | text | NO | | NULL | | +------------+--------------+------+-----+---------+-------+ 4 rows in set (0.00 sec) Agak complicated karena strukturnya aneh ya, tapi sedikit penjelasan:\nUSRID adalah singkatan dari user_id USREM adalah singkatan dari email USRNM adalah singkatan dari username USRPW adalah singkatan dari password Nyeleneh semisal kita terbiasa ngikutin naming convention dari Laravel. Apalagi nama tabelnya MUSR, bukan users, tapi no worries, I got you covered.\nOverriding Breeze\u0026rsquo;s Authentication # CATATAN: Project ini dibuat untuk Laravel 9.x, jika teman-teman menggunakan versi dibawahnya, mohon cek dokumentasi lebih lanjut untuk mengecek ulang apakah metode yang sama sudah diimplementasi pada versi-versi sebelumnya.\nPertama-tama, kita harus ubah metode authenticate() pada App\\Http\\Requests\\Auth\\LoginRequest. Fungsi ini ada pada baris ke-44:\n\u0026lt;?php // app/Http/Requests/Auth/LoginRequest.php // ... class LoginRequest extends FormRequest { // ... public function authenticate() { $this-\u0026gt;ensureIsNotRateLimited(); if (! Auth::attempt($this-\u0026gt;only(\u0026#39;email\u0026#39;, \u0026#39;password\u0026#39;), $this-\u0026gt;boolean(\u0026#39;remember\u0026#39;))) { RateLimiter::hit($this-\u0026gt;throttleKey()); throw ValidationException::withMessages([ \u0026#39;email\u0026#39; =\u0026gt; trans(\u0026#39;auth.failed\u0026#39;), ]); } RateLimiter::clear($this-\u0026gt;throttleKey()); } // ... } Nah, jika teman-teman lihat pada bagian Auth::attempt(), Breeze secara default menggunakan email dan password sebagai key dari autentikasinya. Untuk menyesuaikan skema Breeze dengan skema tabel User yang saya punya, kita harus mengubahnya dengan kode sebagai berikut:\n\u0026lt;?php // app/Http/Requests/Auth/LoginRequest.php // ... class LoginRequest extends FormRequest { // ... public function authenticate() { $this-\u0026gt;ensureIsNotRateLimited(); if (! Auth::attempt([\u0026#39;USREM\u0026#39; =\u0026gt; $this-\u0026gt;email, \u0026#39;password\u0026#39; =\u0026gt; $this-\u0026gt;password], $this-\u0026gt;boolean(\u0026#39;remember\u0026#39;))) { RateLimiter::hit($this-\u0026gt;throttleKey()); throw ValidationException::withMessages([ \u0026#39;email\u0026#39; =\u0026gt; trans(\u0026#39;auth.failed\u0026#39;), ]); } RateLimiter::clear($this-\u0026gt;throttleKey()); } // ... } Nah, dengan ini, autentikasi \u0026ldquo;Custom* bisa kita implementasikan.\n\u0026ldquo;Bentar Ghits, ngubah 1 file doang?\u0026rdquo; nggak kok wkwkwk, kita akan ubah 1 file lagi\nKedua, sesuaikan model User. Hal ini meliputi perubahan atribut $fillable, $hidden, dll:\n\u0026lt;?php // app/Models/User.php class User extends Authenticatable { use HasApiTokens, HasFactory, Notifiable, SoftDeletes; protected $table = \u0026#34;MUSR\u0026#34;; protected $primaryKey = \u0026#34;USRID\u0026#34;; public $incrementing = false; public function getAuthPassword() { return $this-\u0026gt;USRPW; } /** * The attributes that are mass assignable. * * @var array\u0026lt;int, string\u0026gt; */ protected $fillable = [ \u0026#39;USREM\u0026#39;, \u0026#39;USRPW\u0026#39;, \u0026#39;USRNM\u0026#39;, ]; /** * The attributes that should be hidden for serialization. * * @var array\u0026lt;int, string\u0026gt; */ protected $hidden = [ \u0026#39;USRPW\u0026#39;, ]; } Jangan bingung dulu, berikut penjelasannya:\nAtribut $table akan mengatur nama tabel yang kita pakai. Teman-teman juga bisa menggunakan nama tabel lain untuk autentikasi kalian. Seperti pengguna, mod_user, mod_anggota, dlsb. Bebaskanlah kreasi kalian, tapi tetap gunakan nama yang meaningful. Atribut $primaryKey akan mengatur Primary Key yang digunakan. Secara default, Laravel akan mengatur kolom ini ke id. Menurut dokumentasinya, Primary Key yang dimaksud oleh Laravel adalah sebuah kolom yang Auto Incrementable. Atribut $incrementing adalah penanda bahwa atribut $primaryKey adalah sebuah AUTO_INCREMENT. Karena USRID adalah bukan sebuah Auto Increment, maka Saya mengatur atribut ini ke false. Metode getAuthPassword(): string adalah sebuah metode yang digunakan oleh kontrak Authenticatable, yang dimana ia akan memberikan hashed value dari password yang ada di database, lalu diverifikasi oleh kontrak UserProvider. Pembahasan ini akan sangat mendalam untuk dibahas di artikel ini, jadi akan saya simpan untuk pembahasan lain hari. Intinya, teman-teman harus me-return value dari kolom \u0026ldquo;password\u0026rdquo; yang ada pada database. Daaaaaan, voilla. Aplikasi yang Anda bangun sekarang bisa diakses menggunakan tabel user legacy ü•≥üéâ. Sekian artikelnya, semoga bermanfaat. Jika ada pertanyaan terkait artikel ini, silahkan cantumkan di kolom komentar.\n","date":"1 Agustus 2022","permalink":"/artikel/autentikasi-custom-laravel-9-dengan-breeze/","section":"Artikel-artikel","summary":"Hai, lama tak jumpa üëã.","title":"Autentikasi Custom Laravel 9 Dengan Breeze"},{"content":"","date":"1 Agustus 2022","permalink":"/tags/technology/","section":"Tags","summary":"","title":"technology"},{"content":"Bayangkan di hari yang panas terik, kerjaan banyak, suntuk, haus juga. Semua perasaan jadi satu. Mau marah tapi nggak bisa, ngelawan hukum alam apalagi. Nggak ada solusi yang lebih ngepas ketimbang buat kopi dengan metode Filtered Iced Coffee Brew, atau lebih dikenal sebagai Japanese Cold Brew.\nMetode ini berbeda dari Cold Brew biasa yang biasanya menggunakan French Press, lalu disimpan di dalam lemari es dan didiamkan selama seharian penuh. Japanese Cold Brew menggunakan es batu, langsung di dalam server. Jadi kopi ini bisa langsung dinikmati tanpa harus menunggu esok hari.\nTulisan ini Saya rangkum dari channel YouTube James Hoffman di videonya yang berjudul Better than Cold Brew: How to make Iced Filter Coffee.\nPre-brewing # Untuk takaran kopi, gunakan rasio 65g / liter, atau 5g kopi lebih banyak dari Filtered Coffee biasa. Jadi semisal teman-teman biasa menggunakan 15g kopi untuk V60 atau Flat Bottom, tambahkan 5g lebih banyak untuk metode ini. Grind size harus sedikit lebih fine daripada Filtered Coffee. Di grinder Timemore Slim 3 yang saya gunakan, untuk Filtered Coffee biasa Saya gunakan grind setting 17. Jadi untuk Japanese Cold Brew ini, saya gunakan grind setting 14 s/d 15. Rasio air, karena ada keterlibatan es batu disini, kita harus membagi berapa gram yang harus dialokasikan untuk es batu, dan berapa gram yang dialokasikan untuk air panas. Untuk es batu, kita gunakan 40% dari total brew. Jadi jika kita mentargetkan 225g air untuk satu kali brew, maka kita bisa pakai 90g untuk es, dan 135g air panas. It\u0026rsquo;s Brewing Time # Sebelum membuat kopi, pastikan paper filter dibilas terlebih dahulu dengan air panas. Hal ini bertujuan untuk menghilangkan rasa kertas yang terdapat pada paper filter. Berpengaruh untuk sebagian orang, dan tidak berpengaruh untuk sebagian yang lain.\nMasukkan 90g es batu ke dalam server. Siapkan kopi di paper filter, kalian akan membutuhkan alat V60 atau Flat Bottom untuk metode ini. Tare timbangan kopi, dan mulai timer. Untuk fase blooming, gunakan 2x s/d 3x dari berat kopi. Jadi untuk 20g kopi, kalian akan membutuhkan 40g s/d 60g air. Fase blooming ini penting untuk mengatur acidity dari kopi, lebih sedikit air yang digunakan untuk blooming, maka rasa dari kopi akan semakin asam, semakin banyak maka akan semakin manis. Blooming phase akan berlangsung selama 45 detik. Brewing phase akan berlangsung selama 2,5 menit s/d 3 menit. Di jangka waktu ini, sisa air dibagi 3x pour. Jika sisa air adalah 75g, maka setiap pour adalah 25g. Interval setiap pour adalah 30 detik. Sama seperti blooming phase, fase ini bisa dibagi sesuai preferensi 2x s/d 4x pour. Dan selamat, teman-teman berhasil membuat Japanese Iced Coffee. Jika teman-teman masih bingung, berikut tabel brew timeline yang Saya gunakan sebagai referensi untuk setiap personal brew untuk kopi sebanyak 20g kopi. 90g es dan 135g air panas.\nWaktu Fase Pour Air 0s Blooming 40g 45s Brewing, gentle swirl 32g 1m 15s Brewing 32g 1m 45s Brewing, gentle stir 1x clockwise, 1x counter-clockwise 32g 2m 15s Tunggu sisa drawdown s/d 3m - Foto oleh Wade Austin Ellis dari Unsplash.\n","date":"24 Juli 2022","permalink":"/artikel/how-to-brew-filtered-iced-coffee/","section":"Artikel-artikel","summary":"Bayangkan di hari yang panas terik, kerjaan banyak, suntuk, haus juga.","title":"Cara Membuat Filtered Iced Coffee (Japanese Brew)"},{"content":"Siapa yang tidak tahu Faker? Sebuah library yang berguna untuk membuat Factory sehingga kita bisa mendapatkan ratusan, ribuan, atau jutaan data dummy dalam waktu singkat. Dalam update Laravel 9.x 28 hari lalu saat tulisan ini dibuat, Pull Request yang dibuat Tim Mac Donald disetujui dan di-merge ke Laravel 9.x.\nSeluruh pengguna Laravel 9 saat ini bisa menggunakan helper ini langsung pada view sehingga mempercepat proses mockup.\nContoh langsung cara penggunaan dari Pull Request di atas adalah sebagai berikut:\n// resources/views/sebuah-view.blade.php @for($i = 0; $i \u0026lt; 10; $i++) \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Name\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{{ fake()-\u0026gt;name() }}\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Phone\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{{ fake()-\u0026gt;phoneNumber() }}\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; @endfor Atau jika teman-teman ingin melihat cara penggunaan langsungnya, berikut adalah contoh dari sebuah projek yang Saya sedang kembangkan:\n@for ($i = 0; $i \u0026lt; 12; $i++) \u0026lt;a href=\u0026#34;{{ route(\u0026#39;show\u0026#39;, $productName = str()-\u0026gt;slug(fake()-\u0026gt;productName)) }}\u0026#34; class=\u0026#34;col-span-12 sm:col-span-6 md:col-span-4 lg:col-span-3 xl:col-span-2 border border-gray-200 rounded\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;aspect-w-1 aspect-h-1\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://via.placeholder.com/300.png\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;w-full h-full rounded-t object-cover\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;p-2\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex flex-col justify-between h-full\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;font-bold text-orange-500 tracking-wide\u0026#34;\u0026gt; Rp{{ number_format(rand(150000, 1000000), 0, \u0026#39;.\u0026#39;, \u0026#39;.\u0026#39;) }} \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-gray-600 text-sm mb-1\u0026#34;\u0026gt; {{ str()-\u0026gt;headline($productName) }} \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;flex text-xs items-center mb-2\u0026#34;\u0026gt; \u0026lt;x-phosphor-star-fill class=\u0026#34;w-4 h-4 text-yellow-400\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;border-r border-gray-300 pr-2 mx-1\u0026#34;\u0026gt; {{ rand(1, 5) }} \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; {{ rand(1, 50) }} Ulasan \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;button class=\u0026#34;transition duration-300 ease-in-out text-center w-full text-sm bg-blue-500 hover:bg-blue-600 rounded p-2 text-white mt-auto\u0026#34;\u0026gt; Lihat Produk \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; @endfor dan berikut adalah hasilnya: Tim Mac Donald berhasil mewakilkan seluruh perasaan Saya pada proses prototyping dengan mengeluarkan statement\nWhen it comes to a Rapid Application Development framework like Laravel, speed of prototyping a feature is through the roof. But often you will want to prototype a view without having the even create any backing models or anything. You just wanna throw some tailwind and some blade at the problem and get some eyes on it.\nFoto oleh Mohammad Rahmani dari Unsplash.\n","date":"19 Juli 2022","permalink":"/artikel/percepat-pembuatan-mockup-laravel-menggunakan-helper-faker/","section":"Artikel-artikel","summary":"Siapa yang tidak tahu Faker?","title":"Percepat Pembuatan Mockup Laravel Menggunakan Helper Faker"},{"content":"Hai, Devs! Hari ini Saya ingin sharing tentang 2 helper yang sangat membantu untuk membuat sebuah blog. Langsung ke inti saja.\nSlug # Pembuatan slug selalu digunakan pada hampir semua blog. Dari beberapa opsi URI ke detail tulisan di internet, beberapa adalah pilihannya:\nDate-Slug, biasanya ditulis dalam format YYYY-mm-dd-nama-blog. Biasanya digunakan oleh penulis yang menulis banyak artikel dalam satu hari. Date, hanya ditulis dalam format YYYY-mm-dd. Digunakan oleh penulis yang menulis satu artikel dalam satu hari, jarang digunakan. Slug, nama artikel ditulis dalam lowercase, serta menggunakan pemisah tanda strip sebagai pengganti spasi. Opsi ini paling banyak digunakan karena calon audiens bisa mengetahui sebagian isi konten hanya dengan melihat URL-nya saja. ID, detail artikel diambil dalam bentuk angka urut sesuai dengan apa yang disimpan pada database. Jarang digunakan dan juga tidak dianjurkan karena crawler bisa melihat berapa artikel yang ada di website tersebut. Selain itu, jika tidak ada pengaman yang diatur dalam controller, maka website tersebut akan rawan terkena SQL Injection. Kita ambil kasus pada saat kita akan menyimpan tulisan:\n\u0026lt;?php // app/Http/Controllers/BlogController.php use App\\Models\\Blog; use Illuminate\\Http\\Request; namespace App\\Http\\Controllers; class BlogController { // ... public function store(Request $request) { // ... $blog = new Blog; $blog-\u0026gt;title = $request-\u0026gt;title; // Input: Laravel 9 impact for the developers around the world $blog-\u0026gt;slug = strtolower(str_replace(\u0026#39; \u0026#39;, \u0026#39;-\u0026#39;, $request-\u0026gt;title)); // dd($blog-\u0026gt;slug); // laravel-9-impact-for-the-developers-around-the-world $blog-\u0026gt;save(); // ... } // ... } Kita bisa mempersimpel kode kita dengan menggunakan Fasad Str dari Laravel. Cara menggunakannya adalah sebagai berikut:\n\u0026lt;?php // app/Http/Controllers/BlogController.php use App\\Models\\Blog; use Illuminate\\Http\\Request; use Illuminate\\Support\\Str; namespace App\\Http\\Controllers; class BlogController { // ... public function store(Request $request) { // ... $blog = new Blog; $blog-\u0026gt;title = $request-\u0026gt;title; // Input: Laravel 9 impact for the developers around the world $blog-\u0026gt;slug = Str::slug($request-\u0026gt;title); // dd($blog-\u0026gt;slug); // laravel-9-impact-for-the-developers-around-the-world $blog-\u0026gt;save(); // ... } // ... } Lebih simpel bukan? Namun jika teman-teman lebih suka menggunakan helper ketimbang fasad, maka teman-teman bisa menggunakan kode berikut:\n\u0026lt;?php // app/Http/Controllers/BlogController.php use App\\Models\\Blog; use Illuminate\\Http\\Request; namespace App\\Http\\Controllers; class BlogController { // ... public function store(Request $request) { // ... $blog = new Blog; $blog-\u0026gt;title = $request-\u0026gt;title; // Input: Laravel 9 impact for the developers around the world $blog-\u0026gt;slug = str()-\u0026gt;slug($request-\u0026gt;title); // dd($blog-\u0026gt;slug); // laravel-9-impact-for-the-developers-around-the-world $blog-\u0026gt;save(); // ... } // ... } Tidak suka simbol - di URL teman-teman? Jangan khawatir, teman-teman bisa menggunakan _ dengan menambahkannya sebagai parameter ke-2:\n\u0026lt;?php // app/Http/Controllers/BlogController.php use App\\Models\\Blog; use Illuminate\\Http\\Request; namespace App\\Http\\Controllers; class BlogController { // ... public function store(Request $request) { // ... $blog = new Blog; $blog-\u0026gt;title = $request-\u0026gt;title; // Input: Laravel 9 impact for the developers around the world $blog-\u0026gt;slug = str()-\u0026gt;slug($request-\u0026gt;title, \u0026#39;_\u0026#39;); // dd($blog-\u0026gt;slug); // laravel_9_impact_for_the_developers_around_the_world $blog-\u0026gt;save(); // ... } // ... } Diambil dari dokumentasi str Helper Laravel, fungsi str() me-return sebuah instans dari Illuminate\\Support\\Stringable. Fungsi ini ekuivalen dengan Str::of.\nPenggunaan helper str() hanya tersedia pada Laravel 9 ke atas. Jika teman-teman menggunakan Laravel 8 ke bawah, gunakanlah fasad Str.\nHeadline # Jika teman-teman membuat blog berbahasa Inggris, teman-teman akan terbantu dengan helper ini. str()-\u0026gt;headline() mengubah huruf kecil ke huruf besar pada setiap hurufnya secara otomatis. Helper ini juga menghapus simbol - dan _. Sangat berguna jika teman-teman hanya menyimpan slug, dan tidak mempunyai kolom title.\nBerikut adalah contohnya:\n\u0026lt;?php // app/Http/Controllers/BlogController.php use App\\Models\\Blog; use Illuminate\\Http\\Request; namespace App\\Http\\Controllers; class BlogController { // ... public function store(Request $request) { // ... $blog = new Blog; // Headline input: \u0026#34;Create an immersive-blog using Laravel\u0026#34; $blog-\u0026gt;title = str()-\u0026gt;headline($request-\u0026gt;title); // dd($blog-\u0026gt;title) // \u0026#34;Create An Immersive Blog Using Laravel\u0026#34; $blog-\u0026gt;slug = str()-\u0026gt;slug($request-\u0026gt;title); $blog-\u0026gt;save(); // ... } // ... } Sekian informasi yang bisa saya tulis, semoga bermanfaat üëã. Thumbnail oleh Sincerely Media dari Unsplash.\n","date":"19 Juli 2022","permalink":"/artikel/membuat-blog-dengan-laravel-ketahui-2-helper-berguna-ini/","section":"Artikel-artikel","summary":"Hai, Devs!","title":"Membuat Blog Dengan Laravel? Ketahui 2 Helper Berguna Ini"},{"content":"","date":"16 Juli 2022","permalink":"/tags/codeigniter/","section":"Tags","summary":"","title":"codeigniter"},{"content":"Halo semua, lama tidak berjumpa. Akhirnya bisa nulis lagi setelah sibuk di projek lain. Kali ini Saya ingin membahas salah satu class yang sering digunakan di CodeIgniter. Entah apakah teman-teman sadar atau tidak, kita sering berinteraksi dengan suatu class bernama IncomingRequest. Yuk kenalan lebih dalam.\nApa itu IncomingRequest class? # Class ini adalah suatu representatif berbentuk objek yang didapat dari sebuah HTTP Request yang dikirim dari sebuah client, seperti browser contohnya. Atau saat kalian membuat RESTful API, maka mungkin teman-teman menggunakan Postman sebagai client-nya. IncomingRequest berisi metode-metode dari \\CodeIgniter\\HTTP\\Request serta CodeIgniter\\HTTP\\Message.\nBagaimana cara menggunakan IncomingRequest? # Sebenarnya kita secara tidak sadar sering menggunakan class ini di sebuah Controller, dengan cara memanggil $this-\u0026gt;request. Nah, property request ini sebenarnya sudah terinstansiasi pada CodeIgniter\\Controller, jadi secara universal bisa diakses dari controller apapun.\nNamun jika teman-teman bukan berada pada sebuah controller dan ingin mengakses isi dari request, contoh kasus seperti pada saat membuat suatu service, teman-teman bisa menggunakan kode ini:\n\u0026lt;?php $request = \\Config\\Services::request(); Cara menentukan tipe request apa yang dipakai # Asal request bisa dibagi menjadi beberapa tipe, diantaranya melalui AJAX atau CLI. Request dari kedua tipe request tersebut bisa dicek menggunakan metode isAJAX() atau isCLI(), keduanya me-return boolean.\n\u0026lt;?php // Check for AJAX request. if ($request-\u0026gt;isAJAX()) { // ... } // Check for CLI Request if ($request-\u0026gt;isCLI()) { // ... } Metode isAJAX() sangat bergantung pada header X-Requested-With, yang sementara tidak dikirim secara default oleh XHR JavaScript (contoh: fungsi fetch). Teman-teman bisa menambahkan header ini secara manual.\nTeman-teman juga bisa mengecek metode yang dikirim dari HTTP dengan menggunakan metode getMethod().\n\u0026lt;?php // Returns \u0026#39;post\u0026#39; $method = $request-\u0026gt;getMethod(); Secara default, metode ini selalu mengirimkan value berbentuk lowercase, jadi jika teman-teman butuh versi uppercase-nya, bisa di-wrap dengan metode strtoupper\n\u0026lt;?php // Returns \u0026#39;GET\u0026#39; $method = strtoupper($request-\u0026gt;getMethod()); Mengambil data dari Input # Nah, ada beberapa kontroversi di komunitas CodeIgniter. Ada yang bilang bahwa \u0026ldquo;mengambil input harus dengan getVar() atau harus dengan getPost\u0026rdquo;, menurut Saya pribadi, teman-teman bebas bisa menggunakan apapun yang teman-teman suka asalkan sesuai konteksnya.\nMaksudnya sesuai konteks gimana? Pada suatu metode di suatu controller, jika metode tersebut berfokus pada request yang menggunakan GET, maka gunakanlah $request-\u0026gt;getGet(). Jika terfokus pada POST, maka gunakanlah $request-\u0026gt;getPost().\n\u0026ldquo;Semisal Saya sedang membuat RESTful API dan dari kedua metode tersebut tidak cocok seperti PUT atau PATCH, itu gimana?\u0026rdquo; gunakanlah $request-\u0026gt;getRawInput().\nIni adalah bagian dari standarisasi kode Saya, dimana tentu saja penggunaan metode dari sebuah class haruslah spesifik menurut konteks. Teman-teman tetap bebas menggunakan metode manapun karena tulisan ini hanya berisi opini pribadi.\nJadi, kurang lebih perbedaannya seperti ini:\nMetode HTTP Metode Request GET $request-\u0026gt;getGet() POST $request-\u0026gt;getPost() PUT/PATCH $request-\u0026gt;getRawInput() Sebagai tambahan, ada beberapa kasus dimana teman-teman mengirim request dari kedua HTTP method seperti GET dan POST secara bersamaan. Bagaimana cara mengecek apakah salah satu value ini ada di setiap method? Gunakan getGetPost() atau getPostGet():\nMetode Keterangan $request-\u0026gt;getGetPost() Mengecek GET dulu, lalu POST $request-\u0026gt;getPostGet() Mengecek POST dulu, lalu GET Mengambil sebuah value atau banyak value? # Tergantung pemakaian, sebagai contoh Saya biasa menggunakan mass-insert, jadi Saya nggak perlu capek-capek ngambil setiap data yang ada di request, terus diinput ke model:\n\u0026lt;?php // app/Controllers/BlogController.php class BlogController extends BaseController { public function store() { try { $data = $this-\u0026gt;request-\u0026gt;getPost([ \u0026#39;kolom_a\u0026#39;, \u0026#39;kolom_b\u0026#39;, \u0026#39;kolom_c\u0026#39;, ]); $blog = new \\App\\Models\\BlogModel; if (!$blog-\u0026gt;insert($data)) { return redirect() -\u0026gt;back() -\u0026gt;with(\u0026#39;errors\u0026#39;, $blog-\u0026gt;errors()) -\u0026gt;withInput(); } } catch (\\Throwable $th) { return redirect() -\u0026gt;back() -\u0026gt;with(\u0026#39;error\u0026#39;, \u0026#39;Gagal membuat blog: \u0026#39; . $th-\u0026gt;getMessage()); } return redirect() -\u0026gt;back() -\u0026gt;with(\u0026#39;success\u0026#39;, \u0026#39;Berhasil membuat blog\u0026#39;); } } Nah, jika asumsinya nama-nama field yang ada pada view adalah SAMA PERSIS dengan kolom-kolom yang ada di tabel, maka teman-teman bisa langsung ambil datanya dari request. Di atas adalah contoh kasus mengambil banyak value, lantas bagaimana kasusnya jika ingin mengambil satu value?\nDari kasus di atas, Saya akan ambil kasus dimana Saya ingin menambahkan thumbnail untuk blog Saya:\n\u0026lt;?php // app/Controllers/BlogController.php class BlogController extends BaseController { public function store() { try { $data = $this-\u0026gt;request-\u0026gt;getPost([ \u0026#39;kolom_a\u0026#39;, \u0026#39;kolom_b\u0026#39;, \u0026#39;kolom_c\u0026#39;, ]); $blog = new \\App\\Models\\BlogModel; if (!$blog-\u0026gt;insert($data)) { return redirect() -\u0026gt;back() -\u0026gt;with(\u0026#39;errors\u0026#39;, $blog-\u0026gt;errors()) -\u0026gt;withInput(); } $thumbnail = $this-\u0026gt;request-\u0026gt;getFile(\u0026#39;thumbnail\u0026#39;); if ($thumbnail != null \u0026amp;\u0026amp; $thumbnail-\u0026gt;isValid()) { $blog-\u0026gt;thumbnail = $thumbnail-\u0026gt;store(); $blog-\u0026gt;save(); } } catch (\\Throwable $th) { return redirect() -\u0026gt;back() -\u0026gt;with(\u0026#39;error\u0026#39;, \u0026#39;Gagal membuat blog: \u0026#39; . $th-\u0026gt;getMessage()); } return redirect() -\u0026gt;back() -\u0026gt;with(\u0026#39;success\u0026#39;, \u0026#39;Berhasil membuat blog\u0026#39;); } } Itu saja yang bisa Saya sampaikan dalam tulisan singkat ini, untuk referensi lebih lengkap silahkan kunjungi Dokumentasi CI4 - IncomingRequest. Sampai jumpa di kesempatan lain üëã.\n","date":"16 Juli 2022","permalink":"/artikel/kupas-ci4-incomingrequest-class/","section":"Artikel-artikel","summary":"Halo semua, lama tidak berjumpa.","title":"Kupas CI4: IncomingRequest Class"},{"content":"","date":"4 Juli 2022","permalink":"/series/standarisasi-ci4/","section":"Series","summary":"","title":"Standarisasi CI4"},{"content":"Hai, nggak kerasa udah 4 artikel yang sudah Saya tulis di seri \u0026ldquo;Standarisasi CI4\u0026rdquo;. Karena mungkin banyak dari teman-teman yang butuh rangkuman cepatnya, akan Saya kutip sesuai urutan flow pembuatan CRUD. Tapi jangan lupa untuk baca artikelnya satu-per-satu ya, karena banyak penjelasan yang cukup penting juga demi pemahaman teman-teman.\nEnvironment # CI_ENVIRONMENT digunakan untuk mengatur CI apakah error handling akan ditampilkan atau tidak. Konstanta ini merepresentasikan apakah aplikasi berada di lingkungan development atau production. app_baseURL digunakan untuk mengatur URL default aplikasi. database.default.database digunakan untuk mengatur database mana yang akan digunakan. database.default.username digunakan untuk mengatur username yang akan digunakan untuk mengakses database. database.default.password digunakan untuk mengatur password dari user yang akan digunakan untuk mengakses database. Routing # Single-method, digunakan jika suatu modul hanya memiliki sedikit metode; alternatif jika $routes-\u0026gt;resource() ataupun $routes-\u0026gt;presenter() dianggap mubazir. \u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;get(\u0026#39;/user\u0026#39;, \u0026#39;UserController::index\u0026#39;); $routes-\u0026gt;get(\u0026#39;/user/new\u0026#39;, \u0026#39;UserController::new\u0026#39;); $routes-\u0026gt;get(\u0026#39;/user/(:num)/edit\u0026#39;, \u0026#39;UserController::edit/$1\u0026#39;); $routes-\u0026gt;get(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::show/$1\u0026#39;); $routes-\u0026gt;post(\u0026#39;/user\u0026#39;, \u0026#39;UserController::create\u0026#39;); $routes-\u0026gt;patch(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::update/$1\u0026#39;); // Gunakan Patch atau Put, sama saja. $routes-\u0026gt;put(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::update/$1\u0026#39;); $routes-\u0026gt;delete(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::delete/$1\u0026#39;); Restful routing, digunakan jika suatu modul adalah bagian dari CRUD atau RESTful API. \u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [\u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;]); $routes-\u0026gt;presenter(\u0026#39;blog\u0026#39;, [\u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;BlogController\u0026#39;]); Option pada RESTful routing: \u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, // Nama Controller yang digunakan \u0026#39;placeholder\u0026#39; =\u0026gt; \u0026#39;:num\u0026#39;, // Mengatur regex yang digunakan controller untuk penerimaan parameter \u0026#39;websafe\u0026#39; =\u0026gt; true, // Mengatur versi yang aman untuk HTTP (hanya berlaku untuk resource, bukan presenter) \u0026#39;only\u0026#39; =\u0026gt; [\u0026#39;method1\u0026#39;, \u0026#39;method2\u0026#39;], // Mengatur metode apa saja yang bisa dipakai \u0026#39;except\u0026#39; =\u0026gt; [\u0026#39;method3\u0026#39;, \u0026#39;method4\u0026#39;], // Mengatur metode apa saja yang akan dibuang ]); Controller # Controller biasa. Penggunaan: digunakan jika modul tersebut digunakan untuk komputasi, dan bukan untuk CRUD. Bisa juga digunakan sebagai modul ekstensi dari sebuah modul CRUD. Command: php spark make:controller Nama --suffix Bare Controller. Penggunaan: digunakan jika seluruh controller tidak memiliki fungsi atau helper yang di-load secara default. Command: php spark make:controller Nama --suffix --bare Resource Controller. Penggunaan: digunakan bersamaan dengan $routes-\u0026gt;resource() pada konfigurasi rute. Biasanya digunakan dalam pembuatan RESTful API. Command: php spark make:controller Nama --suffix --restful controller Presenter Controller. Penggunaan: digunakan bersamaan dengan $routes-\u0026gt;presenter() pada konfigurasi rute. Biasanya digunakan dalam pembuatan CRUD. Gunakan opsi ini jika teman-teman ingin membuat modul CRUD dengan lebih cepat. Command: php spark make:controller Nama --suffix --restful presenter. Model # Buat model menggunakan command line dengan perintah php spark make:model Nama --suffix. Flag --suffix akan menambahkan kata Model di akhir nama secara otomatis. Atur penggunaan tabel yang digunakan pada suatu model dengan mengatur property $table. Atur bentuk balikan dari model dengan mengatur property $returnType ke array atau object. Property $allowedFields digunakan untuk mengatur kolom-kolom apa saja yang bisa diisi. Property $validationRules digunakan untuk mengatur validasi dari kolom-kolom yang ada di property $allowedFields. Property $validationMessages digunakan untuk mengatur pesan error dari validasi yang tidak memenuhi kriteria $validationRules. Model Callback berguna untuk memanipulasi data sebelum data tersebut diolah lebih lanjut. Validasi model akan berjalan saat fungsi insert(), update(), atau save() dipanggil. Daftar Pustaka # Standarisasi CI4 - Routing oleh Aghits Nidallah. Standarisasi CI4 - Environment oleh Aghits Nidallah. Standarisasi CI4 - Controller oleh Aghits Nidallah. Standarisasi CI4 - Model Query oleh Aghits Nidallah. ","date":"4 Juli 2022","permalink":"/artikel/standarisasi-ci4-tl-dr/","section":"Artikel-artikel","summary":"Hai, nggak kerasa udah 4 artikel yang sudah Saya tulis di seri \u0026ldquo;Standarisasi CI4\u0026rdquo;.","title":"TL:DR Standarisasi CI4 Part 1 s/d Part 4"},{"content":"Halo semua, kembali lagi di seri \u0026ldquo;Standarisasi CI4\u0026rdquo;. Kali ini kita akan membahas Controller, sebuah aspek dari MVC yang berguna untuk memanipulasi data.\nDi tulisan ini, kita akan mengupas tentang:\nNaming convention, bagaimana sebuah penamaan mempengaruhi kode. Bare Controller, sebuah controller kosong. Restful Controller, sebuah controller dengan beberapa metode yang sudahpre-generated. Naming Convention # Pada saat inisiasi sebuah projek CI4, mereka sendiri secara default tidak menamakan Controller Home sebagai HomeController, namun hanya Home saja. Untuk Saya, CI4 sendiri kesannya tidak ingin mengimplementasikan sebuah standar penamaan, tapi lebih kepada kebebasan penamaan.\nSecara teknis, anggaplah jika controller Home yang sudah ada sebagai bawaan CI4 ini adalah suatu controller di aplikasi besar. Secara nama, bagaimana kita mengidentifikasikan bahwa Home ini adalah sebuah controller?\nDari namespace yang terdapat pada file controller tersebut. Dengan melihat struktur folder dimana file itu berada. Dengan menggunakan Intellisense. Oke, ketiga poin di atas masuk akal. Tapi, apakah kita bisa menyimpulkan bahwa file tersebut adalah sebuah controller? Tentunya tidak. Karena itu, suffix dari sebuah controller sangatlah dibutuhkan. Bukan hanya controller, namun hampir dari semua modul seperti migration, seeder, filter, entity, dll. Sebab, suffix bisa merepresentasikan sebuah file, tanpa kita harus membuka apa isi dari file tersebut.\nUntuk membuat sebuah controller yang ber-suffix, kita jalankan:\nphp spark make:controller Home --suffix\nPerintah di atas akan secara otomatis menambahkan tambahan Controller di akhir nama. Perintah di atas akan membuat sebuah file baru bernama HomeController. Berikut contoh lainnya:\n# 1 php spark make:controller User --suffix CodeIgniter v4.2.1 Command Line Tool - Server Time: 2022-07-03 06:05:44 UTC-05:00 File created: APPPATH/Controllers/UserController.php # 2 php spark make:controller Master/Mahasiswa --suffix CodeIgniter v4.2.1 Command Line Tool - Server Time: 2022-07-03 06:06:39 UTC-05:00 File created: APPPATH/Controllers/Master/MahasiswaController.php Flag --suffix akan membantu kita membuat sebuah controller tanpa harus mengetikkan \u0026ldquo;Controller\u0026rdquo; secara eksplisit ke parameter nama.\nBare Controller # Bare Controller adalah sebuah controller kosong, teman-teman bisa mengisi metode dari controller ini sesuka hati. Gunakan Bare Controller jika teman-teman tidak menggunakan service atau helpers tambahan secara default.\nKenapa? Karena ada perbedaan secara fundamental dari controller yang dibuat dengan flag --bare dan tanpa --bare. Apa perbedaannya? Mari kita lihat.\n\u0026lt;?php // Dibuat dengan perintah `php spark make:controller ABare --bare --suffix` namespace App\\Controllers; use CodeIgniter\\Controller; class ABareController extends Controller { public function index() { // } } Lalu\n\u0026lt;?php // Dibuat dengan perintah `php spark make:controller WithoutBareFlag --suffix` namespace App\\Controllers; use App\\Controllers\\BaseController; class WithoutBareFlagController extends BaseController { public function index() { // } } Perbedaan dari kedua controller di atas adalah penggunaan ekstensi dari Parent Controller. Controller yang menggunakan flag --bare akan menggunakan controller bawaan dari CI4 yaitu CodeIgniter\\Controller, sementara controller yang tidak menggunakan flag --bare akan menggunakan App\\Controllers\\BaseController.\nLalu apa perbedaannya? Perbedaannya adalah, CodeIgniter\\Controller adalah class utama controller di CI4, sementara App\\Controllers\\BaseController adalah class yang meng-extends CodeIgniter\\Controller.\nJadi secara default, tidak ada perbedaan yang mendasar. Namun akan terdapat perbedaan jika Anda ingin \u0026ldquo;menerapkan sebuah helper atau service secara default di semua controller\u0026rdquo;. Seperti contoh jika teman-teman ingin menggunakan helper html dan text secara di seluruh controller:\n\u0026lt;?php // app/Controllers/BaseController.php namespace App\\Controllers; use CodeIgniter\\Controller; abstract class BaseController extends Controller { // ... protected $helpers = [\u0026#39;html\u0026#39;, \u0026#39;text\u0026#39;]; // ... Atau contoh lain jika teman-teman ingin membuat sebuah property session yang bisa diakses secara umum di semua controller:\n\u0026lt;?php // app/Controllers/BaseController.php namespace App\\Controllers; use CodeIgniter\\Controller; abstract class BaseController extends Controller { // ... /** * @var \\CodeIgniter\\Session\\Session; */ protected $session; public function initController(/* ... */) { // Do Not Edit This Line parent::initController($request, $response, $logger); $this-\u0026gt;session = \\Config\\Services::session(); } } Catatan: Jangan pernah mengedit file yang ada pada folder system bawaan CI4, jika ingin merubah behaviour dari sebuah class, buatlah sebuah child class yang meng-extends class tersebut. Biarkan script murni tanpa adanya modifikasi.\nRestful Controller # Restful Controller adalah sebuah controller yang didalamnya sudah terdapat berbagai macam metode yang bisa langsung digunakan untuk rute resource atau presenter (silahkan baca tulisan sebelumnya yang berjudul Standarisasi CI4 - Routing untuk detail lebih lanjut mengenai rute resource atau presenter).\nAda 2 tipe Restful Controller, Resource Controller dan Presenter Controller\nResource Controller # Resource Controller lebih cocok digunakan untuk pengembang yang sedang membuat REST API karena adanya kesesuaian metode-metode yang di-generate dengan $routes-\u0026gt;resource().\nCara membuat Resource Controller adalah php spark make:controller User --suffix --restful controller. Secara otomatis, perintah ini akan membuat sebuah controller yang meng-extends CodeIgniter\\RESTful\\ResourceConroller:\n\u0026lt;?php // app/Controllers/UserController namespace App\\Controllers; use CodeIgniter\\RESTful\\ResourceController; class UserController extends ResourceController { public function index() { } public function show($id = null) { } public function new() { } public function create() { } public function edit($id = null) { } public function update($id = null) { } public function delete($id = null) { } } Presenter Controller # Presenter Controller lebih cocok digunakan untuk pengembang yang sedang membuat fitur CRUD pada sebuah modul melalui website karena controller ini sesuai dengan metode-metode yang diimplementasikan oleh $routes-\u0026gt;presenter().\nCara membuat sebuah Presenter Controller adalah dengan menjalankan perintah php spark make:controller User --suffix --restful presenter. Secara otomatis, perintah ini akan membuat sebuah controller yang meng-extends CodeIgniter\\RESTful\\ResourcePresenter:\n\u0026lt;?php // app/Controllers/UserController namespace App\\Controllers; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function index() { } public function show($id = null) { } public function new() { } public function create() { } public function edit($id = null) { } public function update($id = null) { } public function remove($id = null) { } public function delete($id = null) { } } Daftar Pustaka # Extending the Controllers dari Dokumentasi CI4. Pengalaman menggunakan CI4 selama 6 bulan. ","date":"3 Juli 2022","permalink":"/artikel/standarisasi-ci4-controller/","section":"Artikel-artikel","summary":"Halo semua, kembali lagi di seri \u0026ldquo;Standarisasi CI4\u0026rdquo;.","title":"Standarisasi CI4 - Controller"},{"content":"Halo, selamat datang lagi ke seri artikel \u0026ldquo;Standarisasi CI4\u0026rdquo;. Kali ini kita akan membahas sebuah file khusus bernama .env (baca: dot-envi). \u0026ldquo;Kenapa kok ada titiknya?\u0026rdquo; karena simpelnya, dotenv ini adalah sebuah file pengaturan, dimana sistem UNIX (seperti Linux, dan Mac) tidak bisa membaca file ini secara eksplisit, walaupun Windows bisa.\nSaya membuat tulisan ini sebab keresahan pribadi Saya terhadap teman-teman yang mengatur konfigurasi sesuai mesinnya sendiri, tanpa memikirkan bagaimana kedepannya jika kode ini di-maintain pengembang lain.\nFile .env ini berisi pengaturan-pengaturan sensitif seperti kredensial database, key dari sebuah REST API, atau bahkan sebuah key untuk meng-enkripsi sebuah data yang ada pada database teman-teman.\nKenapa kita harus mengatur .env? # Jika kita bekerja dengan tim, kita harus mengetahui bahwa mesin setiap orang berbeda-beda. Bisa saja kasusnya seperti ini:\nDeveloper A Menggunakan XAMPP Databasenya memiliki password dengan nilai root. Base URL dari projectnya adalah localhost/project-ci Developer B Menggunakan Laragon Databasenya memiliki password dengan nilai toor. Base URL dari projectnya adalah project-ci.dev Developer C Menggunakan NGINX Databasenya tidak ber-password Base URL dari projectnya adalah 127.0.0.1:8080/project_ci Developer D Menggunakan Valet Databasenya memiliki password dengan nilai laravelisthebest. Base URL dari projectnya adalah project-ci.test Jika teman-teman menggunakan Git sebagai version control, maka tentu teman-teman akan mengetahui bahwa file config lokal akan terpantau perubahannya, dan akan terkirim ke upstream karena tidak masuk ke dalam daftar .gitignore. Karena itu, .env sangat berguna pada projek tim karena setiap pengembang bisa menyesuaikan konfigurasinya sendiri, secara independen sesuai mesin masing-masing.\nLalu bagaimana cara mengatur .env? # Sangat mudah, pada saat menginisialisasi suatu project CI4, Anda akan melihat struktur seperti ini:\nüìÅ„ÄÄproject-ci/ ‚îú‚îÄ üìÅ„ÄÄapp/ ‚îú‚îÄ üìÅ„ÄÄpublic/ ‚îú‚îÄ üìÅ„ÄÄsystem/ ‚îú‚îÄ üìÅ„ÄÄtests/ ‚îú‚îÄ üìÅ„ÄÄwritable/ ‚îú‚îÄ CHANGELOG.md ‚îú‚îÄ composer.json ‚îú‚îÄ deptrac.yaml ‚îú‚îÄ env ‚îú‚îÄ LICENSE ‚îú‚îÄ README.md ‚îú‚îÄ SECURITY.md ‚îú‚îÄ spark Teman-teman bisa buka file bernama env, lalu simpan file tersebut sebagai file baru bernama .env. Jangan hapus atau rename file env biasa, file ini berfungsi sebagai template konfigurasi untuk developer lain.\nPENTING:\nUntuk mengatur sebuah konstanta environment variables, sangatlah mudah. Anda hanya perlu menghapus tanda # di awal sebuah konstanta, lalu mengatur isi dari konstanta itu setelah tanda =.\nMari kita bahas isi dari file .env ini satu-per-satu. Saya akan bahas pengaturan-pengaturan yang sering Saya gunakan:\nEnvironment # #-------------------------------------------------------------------- # ENVIRONMENT #-------------------------------------------------------------------- # CI_ENVIRONMENT = production Environment akan memberikan petunjuk ke CI4 apakah aplikasi ini ada di fase \u0026ldquo;Pengembangan\u0026rdquo;/development, atau \u0026ldquo;Dirilis\u0026rdquo;/production. Pengaturan ini mempengaruhi bagaimana CI4 meng-handle sebuah error.\nPada environment development semua error akan dikeluarkan oleh CI4, memberikan insight secara penuh terhadap keseluruhan error. Dimana letak kesalahan secara persis. **Anda harus mengatur konstan CI_ENVIRONMENT ke development pada masa pengembangan.\nLalu bagaimana CI4 meng-handle kode ketika CI_ENVIRONMENT diatur ke production? Simpelnya, seluruh error akan disembunyikan dalam sebuah halaman 500: Internal Server Error. Secara default, CI4 akan menampilkan halaman Whoops! We seem to have hit a snag. Please try again later\u0026hellip; Hanya atur CI_ENVIRONMENT ke production pada saat aplikasi sudah dirilis, karena kita tidak ingin pengguna tahu dimana letak error yang sebenarnya.\n\u0026ldquo;Lho, kalau kita nggak tau errornya dimana pas production, terus gimana caranya kita memperbaiki bug yang ada?\u0026rdquo; tenang, kita punya file Logs! Logs ini, menurut Saya adalah media \u0026ldquo;penyempurnaan\u0026rdquo; sebuah aplikasi. Jadi seluruh error yang terjadi pada saat production bisa teman-teman temukan di folder writable/logs/log-{date}.log. File ini akan menyimpan seluruh error yang terjadi pada hari itu.\nIsi dari sebuah file log, berisi kurang lebih seperti ini:\nCRITICAL - 2022-07-02 05:06:10 --\u0026gt; Class \u0026#34;App\\Controllers\\User\u0026#34; not found in APPPATH/Controllers/Home.php on line 9. 1 SYSTEMPATH/CodeIgniter.php(896): App\\Controllers\\Home-\u0026gt;index() 2 SYSTEMPATH/CodeIgniter.php(466): CodeIgniter\\CodeIgniter-\u0026gt;runController(Object(App\\Controllers\\Home)) 3 SYSTEMPATH/CodeIgniter.php(349): CodeIgniter\\CodeIgniter-\u0026gt;handleRequest(null, Object(Config\\Cache), false) 4 FCPATH/index.php(55): CodeIgniter\\CodeIgniter-\u0026gt;run() 5 /Users/shiroyuki/.composer/vendor/laravel/valet/server.php(234): require(\u0026#39;FCPATH/index.php\u0026#39;) Base URL # Saya bilang di atas bahwa:\nJika kita bekerja dengan tim, kita harus mengetahui bahwa mesin setiap orang berbeda-beda\nItu betul adanya, dan ini adalah salah satu pengaturan yang krusial. Karena setiap pengembang memiliki base URL yang berbeda-beda tergantung pada setiap host engine yang dimiliki.\n#-------------------------------------------------------------------- # APP #-------------------------------------------------------------------- # app_baseURL = \u0026#39;\u0026#39; Mengatur base URL sangat penting pada saat pemanggilan URL pada aplikasi. Kita akan simulasikan keadaan fungsi base_url() pada setiap developer jika mereka tidak mengatur konstanta app_baseURL.\nPerlu diketahui bahwa secara default, fungsi base_url() akan mengembalikan nilai http://localhost:8080. Berikut adalah hasil akses ke browser, jika setiap pengembang tidak mengatur konstanta app_baseURL terlebih dahulu:\nPengembang A: 404: Error Not Found Pengembang B: 404: Error Not Found Pengembang C: 200: OK Pengembang D: 404: Error Not Found Maka dari itu, setiap pengembang perlu mengatur konstansta app_baseURL-nya masing-masing. Jika disimulasikan, maka setiap pengembang akan mengatur konstanta app_baseURL menjadi seperti ini:\nPengembang A: Mengatur app_baseURL ke localhost/project-ci Hasil akses browser: 200: OK Pengembang B: Mengatur app_baseURL ke project-ci.dev Hasil akses browser: 200: OK Pengembang C: Mengatur app_baseURL ke 127.0.0.1:8080/project-ci Hasil akses browser: 200: OK Pengembang D: Mengatur app_baseURL ke project-ci.test Hasil akses browser: 200: OK Bagaimana? Sudah paham bagaimana pentingnya mengatur Base URL kan? Yuk kita lanjut ke pengaturan penting lainnya.\nDatabase # #-------------------------------------------------------------------- # DATABASE #-------------------------------------------------------------------- # database.default.hostname = localhost # database.default.database = ci4 # database.default.username = root # database.default.password = root # database.default.DBDriver = MySQLi # database.default.DBPrefix = Sama halnya seperti pengaturan konstanta app_baseURL, setiap pengembang juga mungkin memiliki pengaturan yang berbeda-beda dalam mengakses database-nya.\nSecara default, CI4 akan mengatur konfigurasi database seperti ini (akan Saya ambil beberapa pengaturan yang sering dipakai):\n// app/Config/Database.php public $default = [ \u0026#39;hostname\u0026#39; =\u0026gt; \u0026#39;localhost\u0026#39;, \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;database\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;DBDriver\u0026#39; =\u0026gt; \u0026#39;MySQLi\u0026#39;, \u0026#39;port\u0026#39; =\u0026gt; 3306, ]; Ini yang akan terjadi kepada seluruh pengembang tidak mengatur konfigurasi database pada saat mencoba mengambil data dari database:\nCodeIgniter\\Database\\Exceptions\\DatabaseException #8 Unable to connect to the database. Main connection [MySQLi]: Access denied for user \u0026#39;\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) Ya, setiap pengembang tidak dapat terkoneksi ke database, bahkan pada konfigurasi XAMPP yang tidak menggunakan password secara default. Solusinya? Atur konstansta environment berikut sesuai mesin masing-masing:\nPengembang A: Mengatur database.default.username ke root Mengatur database.default.password ke root Pengembang B: Mengatur database.default.username ke root Mengatur database.default.password ke toor Pengembang C: Mengatur database.default.username ke root Pengembang D: Mengatur database.default.username ke root Mengatur database.default.password ke laravelisthebest Dengan ini, setiap pengembang tidak akan mendapatkan error terkait koneksi ke database. Rangkuman konstanta .env yang penting # CI_ENVIRONMENT, ubah ke development, production atau testing. Ubah ke development jika aplikasi dalam tahap pengembangan. Ubah ke produciton jika aplikasi sudah dirilis. Ubah ke testing jika ingin menjalankan test. app.baseURL, mengatur URL yang akan dipanggil oleh fungsi base_url(). Hal ini akan mempengaruhi pemanggilan assets dan routing. app.forceGlobalSecureRequests, atur ke true atau false. Pengaturan ini akan memaksa skema URL yang digunakan ke https. database.default.hostname, mengatur nama host dari server database yang dipakai. database.default.database, mengatur nama database yang ingin dipakai. database.default.username, mengatur username dari user dari host. database.default.password, mengatur password dari user yang terdaftar di host. database.default.DBDriver, mengatur engine dari database yang dipakai. Daftar Pustaka # Configuration dari Dokumentasi CI4 Pengalaman pribadi menggunakan CI4 selama 6 bulan. ","date":"2 Juli 2022","permalink":"/artikel/standarisasi-ci4-environment/","section":"Artikel-artikel","summary":"Halo, selamat datang lagi ke seri artikel \u0026ldquo;Standarisasi CI4\u0026rdquo;.","title":"Standarisasi CI4 - Environment"},{"content":"Hai, kembali lagi di seri tulisan \u0026ldquo;Standarisasi CI4\u0026rdquo;. Kali ini kita akan membahas tentang query builder yang terdapat pada CI4. Selama ini, Saya melihat penggunaan model pada CI4 ini tidak terarah. Ada yang pakai native SQL di class model-nya, ada yang nge-query secara native di Controller, wah banyak deh yang bisa bikin Model ini acak-acakan.\nBerikut adalah cuplikan kode dari sebuah project legacy yang Saya maintain:\n\u0026lt;?php // app/Models/SebuahModel.php class SebuahModel extends Model { public function daftarData($id) { $sql = \u0026#34;SELECT * FROM table WHERE id = ? ORDER BY col1, col2\u0026#34;; return $this-\u0026gt;db-\u0026gt;query($sql, $id); } } Setelah ngeliat kode di atas, secara spontan Saya langsung hadeh, kebiasaan. Tapi gimana lagi ya, Saya punya standar kode tersendiri untuk setiap Framework, dan CI4 bukanlah pengecualian. Jadi, ayo kita ulik apa yang salah, dan kembali ke kaidah per-CI-an yang benar dan lurus.\nNaming Convention # Seperti halnya controller serta modul-modul lain, model juga memerlukan suffix. Suffix di CI4 ini ibarat sebuah identitas untuk menyatakan bahwa class ini adalah bagian dari sebuah modul. Contohnya, BlogController adalah sebuah controller yang bernama Blog, lalu AuthenticationFilter adalah sebuah filter yang digunakan untuk autentikasi.\nSama halnya dengan modul lain, Model haruslah memiliki sebuah suffix untuk membedakan bahwa ia adalah sebuah model, bukan sebuah controller ataupun filter.\nUntuk membuat sebuah model dengan suffix Model, teman-teman memiliki 2 opsi:\nDengan menuliskan nama secara eksplisit, seperti contoh php spark make:model UserModel; atau Dengan menggunakan flag --suffix, seperti contoh php spark make:model User --suffix. Keduanya adalah perintah yang valid untuk membuat sebuah model bernama UserModel.\nGunakan Command untuk men-generate Model. # Jujur, Saya kurang suka ketika pada suatu projek CI4, pengembang tidak menggunakan Spark untuk membuat filter, migration, controller, bahkan di kasus ini model pun sampai dibikin manual. Mungkin karena terbawa suasana CI3 yang serba manual ya? Atau tidak mengetahui fitur spark ini?\nBerhubung teman-teman udah ada disini, yuk sekalian kita belajar cara membuat model dengan menggunakan Spark. Untuk membuat sebuah model, kita jalankan php spark make:model NamaModel, sebagai contoh:\nphp spark make:model User --suffix CodeIgniter v4.2.1 Command Line Tool - Server Time: 2022-07-02 03:38:01 UTC-05:00 File created: APPPATH/Models/UserModel.php Nah, perintah di atas akan membuat satu model bernamakan User, ayo kita cek apa isi di dalamnya:\n\u0026lt;?php // app/Models/UserModel.php namespace App\\Models; use CodeIgniter\\Model; class UserModel extends Model { protected $DBGroup = \u0026#39;default\u0026#39;; protected $table = \u0026#39;users\u0026#39;; protected $primaryKey = \u0026#39;id\u0026#39;; protected $useAutoIncrement = true; protected $insertID = 0; protected $returnType = \u0026#39;array\u0026#39;; protected $useSoftDeletes = false; protected $protectFields = true; protected $allowedFields = []; // Dates protected $useTimestamps = false; protected $dateFormat = \u0026#39;datetime\u0026#39;; protected $createdField = \u0026#39;created_at\u0026#39;; protected $updatedField = \u0026#39;updated_at\u0026#39;; protected $deletedField = \u0026#39;deleted_at\u0026#39;; // Validation protected $validationRules = []; protected $validationMessages = []; protected $skipValidation = false; protected $cleanValidationRules = true; // Callbacks protected $allowCallbacks = true; protected $beforeInsert = []; protected $afterInsert = []; protected $beforeUpdate = []; protected $afterUpdate = []; protected $beforeFind = []; protected $afterFind = []; protected $beforeDelete = []; protected $afterDelete = []; } \u0026ldquo;Buset, Ghits, kok banyak banget isinya? Kita sih nggak perlu kode-kode ini kali,\u0026rdquo; iya, tapi bentar dulu Saya jelasin sedikit, biar temen-temen juga paham. Kita akan pakai model ini sebagai contoh. Akan Saya hapus beberapa kode yang tidak diperlukan untuk demo ini.\nUntuk kali ini, kita tidak membutuhkan section Callback, dan Dates. Jadi akan kita hapus kedua section tersebut untuk mempersingkat kode. Juga, akan Saya hapus beberapa property yang secara otomatis diatur oleh CI4, jadi kurang lebih seperti ini hasilnya:\n\u0026lt;?php // app/Models/UserModel.php namespace App\\Models; use CodeIgniter\\Model; class UserModel extends Model { protected $table = \u0026#39;users\u0026#39;; protected $returnType = \u0026#39;array\u0026#39;; protected $allowedFields = []; protected $validationRules = []; protected $validationMessages = []; } Yuk kita bahas satu-per-satu tentang property-property yang ada:\n$table mengatur nama tabel yang dipakai oleh model. $returnType mengatur tipe keluaran pada saat kita menggunakan fungsi find() atau findAll(). Bisa diisi dengan array atau object. $allowedFields mengatur kolom-kolom apa saja yang boleh digunakan untuk diinput ke dalam tabel users. $validationRules mengatur validasi terhadap kolom-kolom yang digunakan. $validationMessages mengatur pesan-pesan ketika terjadi error pada saat memvalidasi data yang diinput. Fair enough ya? Yuk kita mulai gimana cara ngeimplementasiin kode ini, mengikuti standar yang Saya pakai.\nAtur property $returnType ke \u0026lsquo;object\u0026rsquo; # Gunanya adalah, supaya kita bisa menggunakan arrow function karena data yang di-return adalah berbentuk objek, bukan array. Bagi yang belum tahu, kode penggunaan arrow function adalah seperti ini:\n\u0026lt;?php // Objek echo $user-\u0026gt;name; // Array echo $user[\u0026#39;name\u0026#39;]; Secara pribadi, penggunaan arrow function ini lebih menghemat kode, karena untuk mengakses suatu data, kita hanya perlu menggunakan -\u0026gt;property, bukan ['property']. Lumayan lah, ngehemat 2 karakter juga. Kita akan coba implementasikan penggunaan model ini menjadi lebih singkat.\nJadi, pada model yang kita buat tadi, kita atur:\n\u0026lt;?php // app/Models/UserModel.php namespace App\\Models; use CodeIgniter\\Model; class UserModel extends Model { protected $table = \u0026#39;users\u0026#39;; protected $returnType = \u0026#39;object\u0026#39;; protected $allowedFields = []; protected $validationRules = []; protected $validationMessages = []; } Kita akan bahas property $allowedFields, $validationRules, dan $validationMessages lebih lanjut nanti.\nImplementasi Model pada Controller # Nah, jika teman-teman baca tulisan kemarin Saya yang berjudul Standarisasi CI4 - Routing dan Standarisasi CI4 - Controller, teman-teman pasti menyadari bahwa $route-\u0026gt;presenter akan sedara otomatis meng-assign 8 metode (7 metode untuk $route-\u0026gt;resource) yang digunakan pada Controller kan? Jika lupa, berikut metode-metode yang diassign:\nGET index GET show/$1 GET new POST create, atau bisa juga pakai POST / GET edit/$1 POST update/$1 GET remove/$1 (tidak ada di $route-\u0026gt;resource) POST delete/$1 Kita akan mencoba mengimplementasikan best-pratice dari model yang telah kita buat ke masing-masing metode di controller tersebut. Implementasi query builder pada controller menurut Saya adalah best practice dari CI4. Penggunaan bisa bervariasi tergantung masing-masing pengembang.\nImplementasi pada index() # Metode index() pada sebuah controller, biasanya mengembalikan sebuah view yang berisi seluruh data yang tersedia pada sebuah tabel.\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function index() { return view(\u0026#39;users/index\u0026#39;, [ \u0026#39;users\u0026#39; =\u0026gt; (new UserModel())-\u0026gt;findAll(), ]); } } Agak asing? Atau sudah pernah pakai? Intinya, seluruh query dilakukan langsung di controller, bukan di dalam model. Nanti kita akan bahas kenapa kita juga butuh query di dalam model di akhir artikel.\nImplementasi pada show() # Metode show() biasanya menampilkan sebuah detail dari suatu model. Jika index() hanya menampilkan seluruh data secara singkat, makan show() ini digunakan untuk menampilkan salah satu data secara detail.\nBerikut adalah implementasinya:\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourceController; class UserController extends ResourceController { public function show($id = null) { if ((new UserModel())-\u0026gt;find($id) === null) return \u0026#34;Data tidak ditemukan\u0026#34;; return view(\u0026#39;users/show\u0026#39;, [ \u0026#39;user\u0026#39; =\u0026gt; (new UserModel())-\u0026gt;find($id), ]); } } Karena model pada CI4 tidak memiliki metode findOrFail() secara default, maka simpelnya, kita butuh mengecek dulu apakah data tersebut ada di database, jika tidak ada maka tampilkan pesan \u0026ldquo;Data tidak ditemukan\u0026rdquo;. Contoh di atas adalah contoh kasar, implementasi kode mungkin berbeda untuk tiap projek.\nImplementasi pada new() # Sebenarnya tidak ada yang perlu diimplementasi pada metode ini selain kita hanya butuh mereturn instance dari view(). Namun ada kalanya kita ingin menampilkan beberapa data untuk sebuah dropdown atau pilihan\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\ProvinceModel; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function new() { return view(\u0026#39;users/new\u0026#39;, [ \u0026#39;provinces\u0026#39; =\u0026gt; (new ProvinceModel)-\u0026gt;findAll(), ]); } } Implementasi pada create() # Nah disinilah dimana beberapa akan diimplementasi. Pertama kita akan mengatur $allowedFields, $validationRules dan $validationMessages pada model, lalu kita akan menggunakan try-catch block pada saat menyimpan data.\nAnggap saja pada tabel users kita memiliki kolom sebagai berikut:\nmysql\u0026gt; describe users; +------------+--------------+------+-----+-------------------+-------------------+ | Field | Type | Null | Key | Default | Extra | +------------+--------------+------+-----+-------------------+-------------------+ | id | int | NO | PRI | NULL | auto_increment | | email | varchar(255) | NO | UNI | NULL | | | name | varchar(255) | NO | | NULL | | | password | varchar(255) | NO | | NULL | | | created_at | timestamp | NO | | CURRENT_TIMESTAMP | DEFAULT_GENERATED | | updated_at | timestamp | YES | | NULL | | +------------+--------------+------+-----+-------------------+-------------------+ 6 rows in set (0.03 sec) Kita akan atur $allowedFields terlebih dahulu pada UserModel, kurang lebih seperti ini:\n\u0026lt;?php // app/Models/UserModel.php namespace App\\Models; use CodeIgniter\\Model; class UserModel extends Model { // ... protected $allowedFields = [ \u0026#39;email\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;password\u0026#39;, ]; // ... } Lalu, kita atur $validationRules dan $validationMessages seperti ini:\n\u0026lt;?php // app/Models/UserModel.php namespace App\\Models; use CodeIgniter\\Model; class UserModel extends Model { // ... protected $validationRules = [ \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;required|valid_email|is_unique[users.email,id,{id}]\u0026#39;, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|alpha_numeric_space|min_length[3]\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;required|min_length[8]\u0026#39;, \u0026#39;password_confirmation\u0026#39; =\u0026gt; \u0026#39;required_with[password]|matches[password]\u0026#39;, ]; protected $validationMessages = [ \u0026#39;email\u0026#39; =\u0026gt; [ \u0026#39;valid_email\u0026#39; =\u0026gt; \u0026#39;Email harus memiliki format yang valid.\u0026#39;, \u0026#39;is_unique\u0026#39; =\u0026gt; \u0026#39;Maaf, email sudah terdaftar. Silahkan coba menggunakan email lain.\u0026#39;, ], \u0026#39;name\u0026#39; =\u0026gt; [ \u0026#39;min_length\u0026#39; =\u0026gt; \u0026#39;Panjang minimal untuk nama adalah {param} karakter.\u0026#39;, ], \u0026#39;password\u0026#39; =\u0026gt; [ \u0026#39;min_length\u0026#39; =\u0026gt; \u0026#39;Panjang minimal untuk password adalah {param} karakter.\u0026#39;, ], \u0026#39;password_confirmation\u0026#39; =\u0026gt; [ \u0026#39;matches\u0026#39; =\u0026gt; \u0026#39;Password tidak sama.\u0026#39;, ], ]; // ... } Pelajari lebih lengkap tentang validation di dokumentasi CI4 bagian Validation.\nNah setelah mengatur semua itu pada model, langsung saja kita implementasikan pada controller, berikut kodenya:\n\u0026lt;?php namespace App\\Controllers; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function create() { try { $user = new UserModel(); $data = $this-\u0026gt;request-\u0026gt;getPost([\u0026#39;name\u0026#39;, \u0026#39;email\u0026#39;, \u0026#39;password\u0026#39;, \u0026#39;password_confirmation\u0026#39;]); if ($user-\u0026gt;insert($data) === false) { return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;errors\u0026#39;, $user-\u0026gt;errors()); } } catch (\\Throwable $th) { return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;error\u0026#39;, \u0026#39;Gagal menambahkan data: \u0026#39; . $th-\u0026gt;getMessage()); } return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;success\u0026#39;, \u0026#39;Berhasil menambahkan data\u0026#39;); } } Ya, akan ada 3 return yang diskenariokan.\nReturn ketika model gagal menyimpan data karena validasi gagal. Validasi akan dijalankan secara otomatis pada saat menjalankan fungsi insert(), update(), atau save(). Return ketika terjadi error pada server atau secara syntax pada bagian blok catch. Return ketika model berhasil menyimpan data. Catatan: kode di atas bukanlah kode terbaik untuk menyimpan User, karena password akan disimpan secara plaintext. Untuk menyimpan password yang secara otomatis ter-enkripsi, teman-teman perlu mengatur bagian callback pada model.\n\u0026lt;?php // app/Models/UserModel.php namespace App\\Models; use CodeIgniter\\Model; class UserModel extends Model { // ... protected $allowCallbacks = true; protected $beforeInsert = [\u0026#39;hash_password\u0026#39;]; protected $beforeUpdate = [\u0026#39;hash_password\u0026#39;]; protected function hash_password(array $properties) { if (!isset($properties[\u0026#39;data\u0026#39;][\u0026#39;password\u0026#39;])) { return $properties; } $properties[\u0026#39;data\u0026#39;][\u0026#39;password\u0026#39;] = password_hash($properties[\u0026#39;data\u0026#39;][\u0026#39;password\u0026#39;], PASSWORD_DEFAULT); return $properties; } // ... } Kode di atas akan mengenkripsi password pada saat menambahkan dan memperbarui data.\nImplementasi pada edit() # Sama halnya seperti new(), hanya saja disini kita harus mengambil data model terlebih dulu. Disini gabungkan kode dari show() serta new(). Pertama kita harus mengecek dulu apakah model dengan id yang dicari tersedia atau tidak, jika tersedia, maka return sebuah view.\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\ProvinceModel; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function edit($id = null) { if ((new UserModel())-\u0026gt;find($id) === null) return \u0026#34;Data tidak ditemukan\u0026#34;; return view(\u0026#39;users/new\u0026#39;, [ \u0026#39;provinces\u0026#39; =\u0026gt; (new ProvinceModel())-\u0026gt;findAll(), \u0026#39;user\u0026#39; =\u0026gt; (new UserModel())-\u0026gt;find($id), ]); } } Implementasi pada update() # Untuk kode update, ini lumayan panjang karena ada beberapa lapisan yang harus divalidasi.\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\ProvinceModel; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function update($id = null) { if ((new UserModel())-\u0026gt;find($id) === null) return \u0026#34;Data tidak ditemukan\u0026#34;; try { $user = new UserModel(); $data = $this-\u0026gt;request-\u0026gt;getPost([\u0026#39;name\u0026#39;, \u0026#39;email\u0026#39;]); $data[\u0026#39;id\u0026#39;] = $id; // Memperbarui password if ( $this-\u0026gt;request-\u0026gt;getPost(\u0026#39;password\u0026#39;) !== \u0026#34;\u0026#34; \u0026amp;\u0026amp; $user-\u0026gt;update($id, $this-\u0026gt;request-\u0026gt;getPost([\u0026#39;password\u0026#39;, \u0026#39;password_confirmation\u0026#39;])) === false ) { return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;errors\u0026#39;, $user-\u0026gt;errors()); } // Memperbarui data if ($user-\u0026gt;update($id, $data) === false) { return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;errors\u0026#39;, $user-\u0026gt;errors()); } } catch (\\Throwable $th) { return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;error\u0026#39;, \u0026#39;Gagal memperbarui data: \u0026#39; . $th-\u0026gt;getMessage()); } return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;success\u0026#39;, \u0026#39;Berhasil memperbarui data\u0026#39;); } } Kode di atas jika dijelaskan kurang lebih seperti ini:\nMengecek apakah data ada pada database; Meng-assign data yang ada pada $this-\u0026gt;request ke variabel $data, lalu memasukkan id untuk menghindari error pada saat unique validation. Bisa teman-teman baca terkait ini di bagian Validation Placeholder. Memperbarui password jika kolom password diisi ada. Memperbarui data user. Implementasi pada remove() # Kurang lebih sama seperti show(), implementasi view remove() kurang lebih hanya menampilkan form pesan konfirmasi seperti Apakah Anda yakin ingin menghapus User atas nama {n}?.\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\ProvinceModel; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function remove($id = null) { if ((new UserModel())-\u0026gt;find($id) === null) return \u0026#34;Data tidak ditemukan\u0026#34;; return view(\u0026#39;users/remove\u0026#39;, [ \u0026#39;user\u0026#39; =\u0026gt; (new UserModel())-\u0026gt;find($id), ]); } * Implementasi pada delete() # Metode ini digunakan untuk menghapus data. Sangat straightforward\n\u0026lt;?php // app/Controllers/UserController.php namespace App\\Controllers; use App\\Models\\ProvinceModel; use App\\Models\\UserModel; use CodeIgniter\\RESTful\\ResourcePresenter; class UserController extends ResourcePresenter { public function delete($id = null) { if ((new UserModel())-\u0026gt;find($id) === null) return \u0026#34;Data tidak ditemukan\u0026#34;; try { (new UserModel())-\u0026gt;delete($id); } catch (\\Throwable $th) { return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;error\u0026#39;, \u0026#39;Gagal menghapus data: \u0026#39; . $th-\u0026gt;getMessage()); } return redirect()-\u0026gt;back()-\u0026gt;with(\u0026#39;success\u0026#39;, \u0026#39;Berhasil menghapus data\u0026#39;); } } daaan selesai! Kita sudah berada di akhir artikel. Terima kasih untuk teman-teman yang sudah membaca seri \u0026ldquo;Menstandarisasi CI4\u0026rdquo;. Masih ada beberapa tulisan di seri ini untuk kedepannya, dan tentunya akan lebih menarik lagi.\nSpoiler: modul yang akan dibahas adalah Migration, Seeder, serta Filter üëÄ. Stay tuned ya!\nDaftar Pustaka: # Dokumentasi CI4, Validation Dokumentasi CI4, Defining Callbacks ","date":"2 Juli 2022","permalink":"/artikel/standarisasi-ci4-model-query/","section":"Artikel-artikel","summary":"Hai, kembali lagi di seri tulisan \u0026ldquo;Standarisasi CI4\u0026rdquo;.","title":"Standarisasi CI4 - Model Query"},{"content":"CodeIgniter, siapa yang tidak kenal dengan salah satu framework PHP ini? Mungkin bagi teman-teman yang baru masuk ke dunia PHP, framework ini sering dibicarakan sebagai salah satu framework yang beginner-friendly. Bagaimana tidak? Kodenya yang native-like, kode yang mirip sekali dengan kode PHP Native, sehingga semua orang bisa memahaminya.\nNamun ada salah satu hal, yang tidak Saya sukai tentang CodeIgniter ini. Tidak adanya standarisasi di setiap kodenya, bahkan dokumentasinya terlalu acak, sehingga dari banyaknya tutorial di luar sana, tidak ada satupun yang sama. Hampir dari seluruh tutorial CodeIgniter yang pernah Saya ikuti berbeda. Entah itu berdasarkan code of conductnya, standar kodenya, semua mengikuti preferensi sendiri-sendiri. Sehingga tiba pada saatnya di sebuah projek CodeIgniter besar yang membutuhkan tim untuk mengerjakannya, kode menjadi acak-acakan dan tidak beraturan.\nKarena itu, di seri \u0026ldquo;Standarisasi CodeIgniter\u0026rdquo; ini, saya akan mencoba untuk memperbaiki, serta menstandarisasi beberapa hal, sehingga kode yang ditulis menjadi lebih rapi. Tentu saja ini adalah tulisan berdasarkan opini pribadi, sehingga teman-teman bisa mengkritisi, menyarankan, atau bahkan menyanggah opini Saya di kolom komentar.\nRouting # Routing adalah suatu aspek paling penting yang ada di sebuah Framework yang berbasis MVC (Model, View, Controller). Beberapa hal yang Saya benci dari hal ini adalah segmentasi URL. Banyak dari tutorial yang Saya ikuti, menggunakan getSegment() untuk mendapatkan sebuah segmentasi dari URL. Menurut Saya, hal ini dapat dipersingkat.\nSatu hal yang pasti, sebelum memulai ini, nonaktifkan fitur Auto-routing pada CI4, menurut dokumentasi pada file app/Config/Routes.php: The Auto Routing (legacy) is very dangerous. It is easy to create vulnerable apps where controller filters or CSRF are bypassed. Uncomment baris 28 pada app/Config/Routes.php untuk menonaktifkan fitur Auto-routing.\nAnggaplah pada suatu tutorial, ada salah satu rute seperti ini:\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;get(\u0026#39;/users/(:num)/edit\u0026#39;, \u0026#39;UserController::edit\u0026#39;); dan, pada app/Controllers/UserController.php@edit, berisi:\n\u0026lt;?php // app/Controllers/UserController.php public function edit() { $uri = current_url(true); $user_id = $uri-\u0026gt;getSegment(3); echo $user_id; } Saya akui, fungsi segmentasi URL adalah suatu layanan CI4 yang sangat kuat, namun hal ini akan berpengaruh sangat besar, ketika Anda menggunakan fitur Route resource CI4. Kita akan coba perbaiki kode di atas menjadi seperti berikut:\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;get(\u0026#39;/users/(:num)/edit\u0026#39;, \u0026#39;UserController::edit/$1\u0026#39;); Kode di atas, kurang lebih sama, namun CI4 akan segmentasi :num sebagai parameter pertama pada metode edit().\n\u0026lt;?php // app/Controllers/UserController.php public function edit($user_id) { echo $user_id; } Dengan kode yang lebih singkat, kita bisa melakukan semua hal yang terkait dengan segmentasi menjadi efisien, bahkan ketika ada perubahan skema routing terjadi\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;get(\u0026#39;/users/edit_user/(:num)\u0026#39;, \u0026#39;UserController::edit/$1\u0026#39;); UserController masih akan bisa menerima parameter pertama dengan normal:\n\u0026lt;?php // app/Controllers/UserController.php public function edit($user_id) { echo $user_id; } Route Resource # Route resource adalah sebuah fitur yang ada pada CI4 yang berguna untuk mempersingkat CRUD. Mengapa demikian? Bayangkan teman-teman memiliki beberapa rute seperti ini:\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;get(\u0026#39;/user\u0026#39;, \u0026#39;UserController::index\u0026#39;); $routes-\u0026gt;get(\u0026#39;/user/new\u0026#39;, \u0026#39;UserController::new\u0026#39;); $routes-\u0026gt;get(\u0026#39;/user/(:num)/edit\u0026#39;, \u0026#39;UserController::edit/$1\u0026#39;); $routes-\u0026gt;get(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::show/$1\u0026#39;); $routes-\u0026gt;post(\u0026#39;/user\u0026#39;, \u0026#39;UserController::create\u0026#39;); $routes-\u0026gt;patch(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::update/$1\u0026#39;); // Gunakan Patch atau Put, sama saja. $routes-\u0026gt;put(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::update/$1\u0026#39;); $routes-\u0026gt;delete(\u0026#39;/user/(:num)\u0026#39;, \u0026#39;UserController::delete/$1\u0026#39;); Tentunya me-manage rute di atas sangatlah tidak efisien, selain memperbanyak file Routes, file Routes juga sulit dibaca karena banyaknya kode, hanya untuk 1 modul CRUD. Solusinya? Route Resource!\n// app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, ]); CI4 akan mengintruksikan routing dengan URI user menggunakan UserController sebagai Controller Resource. Jika kita jalankan php spark routes pada terminal, maka kita akan dapatkan response sebagai berikut:\nphp spark routes +--------+----------------+--------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+----------------+--------------------------------------------+----------------+---------------+ | GET | user | \\App\\Controllers\\UserController::index | | toolbar | | GET | user/new | \\App\\Controllers\\UserController::new | | toolbar | | GET | user/(.*)/edit | \\App\\Controllers\\UserController::edit/$1 | | toolbar | | GET | user/(.*) | \\App\\Controllers\\UserController::show/$1 | | toolbar | | POST | user | \\App\\Controllers\\UserController::create | | toolbar | | PATCH | user/(.*) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | PUT | user/(.*) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | DELETE | user/(.*) | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | CLI | ci(.*) | \\CodeIgniter\\CLI\\CommandRunner::index/$1 | | | +--------+----------------+--------------------------------------------+----------------+---------------+ Referensi Route Resource lengkap adalah sebagai berikut:\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;uri\u0026#39;, $options); $options yang Route Resource CI4 terima adalah sebagai berikut:\ncontroller, mengatur Controller apa yang akan digunakan.\nAnda bisa menggunakan opsi ini seperti:\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [\u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;]); $routes-\u0026gt;resource(\u0026#39;blog\u0026#39;, [\u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;BlogController\u0026#39;]); $routes-\u0026gt;resource(\u0026#39;comments\u0026#39;, [\u0026#39;controllers\u0026#39; =\u0026gt; \u0026#39;Blog/CommentsController\u0026#39;]); placeholder, mengatur regex yang digunakan oleh Router. Secara default, CI4 menerima (:any) atau (.*) yang berarti menerima seluruh bentuk parameter, entah itu numerik, huruf, atau simbol.\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, \u0026#39;placeholder\u0026#39; =\u0026gt; \u0026#39;:num\u0026#39;, ]); Opsi ini akan mengintruksikan Router untuk menerima hanya numerik sebagai parameter. Jika kita jalankan php spark routes pada terminal, maka ini yang akan ditampilkan:\nphp spark routes +--------+--------------------+--------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+--------------------+--------------------------------------------+----------------+---------------+ | GET | user | \\App\\Controllers\\UserController::index | | toolbar | | GET | user/new | \\App\\Controllers\\UserController::new | | toolbar | | GET | user/([0-9]+)/edit | \\App\\Controllers\\UserController::edit/$1 | | toolbar | | GET | user/([0-9]+) | \\App\\Controllers\\UserController::show/$1 | | toolbar | | POST | user | \\App\\Controllers\\UserController::create | | toolbar | | PATCH | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | PUT | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | DELETE | user/([0-9]+) | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | CLI | ci(.*) | \\CodeIgniter\\CLI\\CommandRunner::index/$1 | | | +--------+--------------------+--------------------------------------------+----------------+---------------+ websafe, jika Anda mengetahui bahwa protokol HTTP tidak dapat menggunakan metode seperti PATCH, PUT, atau DELETE, maka inilah solusinya.\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, \u0026#39;placeholder\u0026#39; =\u0026gt; \u0026#39;:num\u0026#39;, \u0026#39;websafe\u0026#39; =\u0026gt; true, ]); Kode di atas akan menghasilkan rute seperti ini:\nphp spark routes +--------+----------------------+--------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+----------------------+--------------------------------------------+----------------+---------------+ | GET | user | \\App\\Controllers\\UserController::index | | toolbar | | GET | user/new | \\App\\Controllers\\UserController::new | | toolbar | | GET | user/([0-9]+)/edit | \\App\\Controllers\\UserController::edit/$1 | | toolbar | | GET | user/([0-9]+) | \\App\\Controllers\\UserController::show/$1 | | toolbar | | POST | user | \\App\\Controllers\\UserController::create | | toolbar | | POST | user/([0-9]+)/delete | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | POST | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | PATCH | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | PUT | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | DELETE | user/([0-9]+) | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | CLI | ci(.*) | \\CodeIgniter\\CLI\\CommandRunner::index/$1 | | | +--------+----------------------+--------------------------------------------+----------------+---------------+ Seperti yang teman-teman bisa lihat, ada 2 metode baru yang dibuat dari opsi websafe ini, keduanya dapat membantu teman-teman untuk menghapus (DELETE), serta memperbarui data (UPDATE).\n+--------+----------------------+--------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+----------------------+--------------------------------------------+----------------+---------------+ | POST | user/([0-9]+)/delete | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | POST | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | only dan except. Sebuah opsi untuk \u0026ldquo;hanya gunakan\u0026rdquo; atau \u0026ldquo;kecuali\u0026rdquo;. Dari kedua opsi ini, teman-teman hanya bisa menggunakan salah satu, keduanya tidak bisa dipakai secara bersamaan. Hal ini berguna jika teman-teman tidak ingin menggunakan beberapa, atau hanya menggunakan salah satu dari sebuah rute. only dan except hanya menerima array yang berisi metode yang digunakan.\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, \u0026#39;placeholder\u0026#39; =\u0026gt; \u0026#39;:num\u0026#39;, \u0026#39;websafe\u0026#39; =\u0026gt; true, \u0026#39;only\u0026#39; =\u0026gt; [\u0026#39;index\u0026#39;, \u0026#39;create\u0026#39;, \u0026#39;show\u0026#39;], ]); Kode di atas menghasilkan rute sebagai berikut\nphp spark routes +--------+---------------+------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+---------------+------------------------------------------+----------------+---------------+ | GET | user | \\App\\Controllers\\UserController::index | | toolbar | | GET | user/([0-9]+) | \\App\\Controllers\\UserController::show/$1 | | toolbar | | POST | user | \\App\\Controllers\\UserController::create | | toolbar | | CLI | ci(.*) | \\CodeIgniter\\CLI\\CommandRunner::index/$1 | | | +--------+---------------+------------------------------------------+----------------+---------------+ Bisa dilihat, bahwa hanya metode index, show, serta create yang digunakan. Metode lain akan dikecualikan, dan tidak bisa digunakan. Sekarang kita akan mencoba opsi except\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;resource(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, \u0026#39;placeholder\u0026#39; =\u0026gt; \u0026#39;:num\u0026#39;, \u0026#39;websafe\u0026#39; =\u0026gt; true, \u0026#39;except\u0026#39; =\u0026gt; [\u0026#39;index\u0026#39;, \u0026#39;create\u0026#39;, \u0026#39;show\u0026#39;], ]); Kode di atas akan menghasilkan\nphp spark routes +--------+----------------------+--------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+----------------------+--------------------------------------------+----------------+---------------+ | GET | user/new | \\App\\Controllers\\UserController::new | | toolbar | | GET | user/([0-9]+)/edit | \\App\\Controllers\\UserController::edit/$1 | | toolbar | | POST | user/([0-9]+)/delete | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | POST | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | PATCH | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | PUT | user/([0-9]+) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | DELETE | user/([0-9]+) | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | CLI | ci(.*) | \\CodeIgniter\\CLI\\CommandRunner::index/$1 | | | +--------+----------------------+--------------------------------------------+----------------+---------------+ Bisa teman-teman lihat bahwa metode index, show, serta create tidak ditemukan dalam daftar rute.\nRoute Presenter # Route Presenter adalah versi HTTP-safe dari Route Resource. Bisa dibilang secara singkat dari penggunaan keduanya sedikit berbeda, perbedaannya Saya buat seperti di bawah:\nUse case Route Resource Route Presenter Penamaan routing Lebih cocok untuk API Lebih contoh untuk HTTP Metode yang dihasilkan GET. POST, PUT, PATCH, DELETE GET, POST Opsi yang tersedia untuk parameter $option controller, websafe, placeholder controller, placeholder Sekarang, bagaimana caranya menerapkan Route Presenter ini?\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;presenter(\u0026#39;user\u0026#39;, [ \u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;, ]); Kode di atas akan menghasilkan daftar rute seperti ini:\nphp spark routes +--------+------------------+--------------------------------------------+----------------+---------------+ | Method | Route | Handler | Before Filters | After Filters | +--------+------------------+--------------------------------------------+----------------+---------------+ | GET | user | \\App\\Controllers\\UserController::index | | toolbar | | GET | user/show/(.*) | \\App\\Controllers\\UserController::show/$1 | | toolbar | | GET | user/new | \\App\\Controllers\\UserController::new | | toolbar | | GET | user/edit/(.*) | \\App\\Controllers\\UserController::edit/$1 | | toolbar | | GET | user/remove/(.*) | \\App\\Controllers\\UserController::remove/$1 | | toolbar | | GET | user/(.*) | \\App\\Controllers\\UserController::show/$1 | | toolbar | | POST | user/create | \\App\\Controllers\\UserController::create | | toolbar | | POST | user/update/(.*) | \\App\\Controllers\\UserController::update/$1 | | toolbar | | POST | user/delete/(.*) | \\App\\Controllers\\UserController::delete/$1 | | toolbar | | POST | user | \\App\\Controllers\\UserController::create | | toolbar | | CLI | ci(.*) | \\CodeIgniter\\CLI\\CommandRunner::index/$1 | | | +--------+------------------+--------------------------------------------+----------------+---------------+ Bisa teman-teman lihat di atas, bahwa tidak ada sekalipun metode PUT, PATCH, atau DELETE yang digunakan. Maka bisa Saya simpulkan bahwa Route Presenter adalah HTTP-safe.\nPerlu diingat, penggunaan Route Resource atau Route Presenter mewajibkan teman-teman untuk menggunakan standar penamaan metode yang ada di dalam Controller. Penamaan tersebut antara lain:\nMetode Route Resource Route Presenter index Mengembalikan semua data, bisa juga berbentuk pagination Halaman Index show Mengembalikan data spesifik Halaman Detail new - Halaman Form pembuatan data create Menyimpan data Menyimpan data edit - Halaman Form pengeditan data update Memperbarui data Memperbarui data remove - Halaman konfirmasi penghapusan data delete Menghapus data Menghapus data Pemanggilan Route # Entah kenapa CI4 tidak dapat mengimplementasikan named route seperti halnya Laravel. Padahal fungsi ini sangat membantu, karena, jika suatu saat ada suatu perubahan pada rute, teman-teman harus mengubah semua kode yang teman-teman panggil. Seperti contoh seperti ini:\n\u0026lt;?php // app/Config/Routes.php $routes-\u0026gt;presenter(\u0026#39;user\u0026#39;, [\u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;]); // diubah menjadi: $routes-\u0026gt;presenter(\u0026#39;dashboard/user\u0026#39;, [\u0026#39;controller\u0026#39; =\u0026gt; \u0026#39;UserController\u0026#39;]); Lalu bayangkan teman-teman memiliki kode seperti:\n// app/views/sebuah-view.php \u0026lt;?= base_url(\u0026#39;/user/\u0026#39; . $user-\u0026gt;id); ?\u0026gt; // Kode di atas akan menghasilkan: // \u0026#39;/user/$id\u0026#39; // // Namun, setelah perubahan: // \u0026#39;/user/$id\u0026#39; \u0026lt;- akan menghasilkan error 404 karena rute tidak ditemukan di 12 file atau halaman yang berbeda. Menggantinya satu-per-satu merupakan sebuah aksi refaktor yang sangat melelahkan. Maka dari itu, kita akan gunakan fungsi route_to yang disediakan CI4. Fungsi ini sama saja seperti fungsi named route pada Laravel. Penggunaannya seperti ini:\n// app/views/sebuah-view.php \u0026lt;?= base_url(route_to(\u0026#39;UserController::show\u0026#39;, $user-\u0026gt;id)) ?\u0026gt; // Kode di atas akan menghasilkan: // \u0026#39;/user/$id\u0026#39; // // Setelah perubahan route: // \u0026#39;/dashboard/user/$id\u0026#39; Nah, sangat membantu kan teman-teman? Setiap perubahan apapun yang terjadi di dalam app/Config/Routes.php, CI4 akan secara otomatis mengkonversi rute lama ke rute baru. Fungsi ini akan membantu teman-teman untuk mengubah rute, tanpa adanya refaktor.\nTerima kasih sudah membaca tulisan yang panjang ini, semoga bermanfaat!\nDaftar Pustaka # Working with URLs, dokumentasi CodeIgniter 4 URI routing, dokumentasi CodeIgniter 4 Pengalaman pribadi menggunakan CI4 selama 6 bulan. ","date":"2 Juli 2022","permalink":"/artikel/standarisasi-ci4-routing/","section":"Artikel-artikel","summary":"CodeIgniter, siapa yang tidak kenal dengan salah satu framework PHP ini?","title":"Standarisasi CI4 - Routing"},{"content":"Tahapan desain sistem ini memikirkan bagaimana menggambarkan sistem dari mendapatkan gambaran pada tahap analisis sistem.\nDesain Sistem dibagi menjadi dua bagian:\nDesain Sistem Secara Umum/General Design System, atau disebut conceptual design. Desain Sistem Terinci, atau disebut physical design. Arti Desain # Tahap setelah analisis dari siklus pengembangan sistem. Pendefinisian dari kebutuhan fungsional. Persiapan untuk rancang bangun implementasi. Menggambarkan bagaimana suatu sistem dibentuk. Dapat berupa penggambaran, perencanaan \u0026amp; pembuatan sketsa/pengaturan dari beberapa elemen yang terpisah ke dalam satu kesatuan yang utuh \u0026amp; berfungsi. Termasuk menyangkut mengkonfirmasi komponen-komponen perangkat lunak \u0026amp; perangkat system keras dari suatu sistem. Tujuan Desain # Untuk memenuhi kebutuhan pemakai sistem. Untuk memberikan gambaran yang jelas \u0026amp; rancang bangun yang lengkap kepada pemrogram komputer \u0026amp; ahli-ahli teknik lain yang terlibat. Agar Tujuan tercapai, analis sistem harus mencapai sasaran:\nDesain Sistem harus berguna, mudah dipahami \u0026amp; nantinya mudah digunakan. Desain Sistem harus dapat mendukung tujuan utama perusahaan, sesuai dengan yang telah didefinisikan pada tahap perencanaan sistem. Desain Sistem harus efisien \u0026amp; efektif untuk dapat mendukung pengolahan transaksi, pelaporan manajemen \u0026amp; mendukung keputusan yang dilakukan manajemen. Desain Sistem harus dapat mempersiapkan rancang bangun yang terinci, yang terdiri antara lain: data, informasi, file, metode-metode, prosedur, SDM, H/W, S/W. Daftar Pustaka # Foto oleh Bal√°zs K√©tyi dari Unsplash. Muhamad Ahmadin dari DetikCepat. ","date":"1 Juli 2022","permalink":"/lainnya/kuliah/desain-sistem/","section":"Lainnyas","summary":"Tahapan desain sistem ini memikirkan bagaimana menggambarkan sistem dari mendapatkan gambaran pada tahap analisis sistem.","title":"Desain Sistem"},{"content":"","date":"1 Juli 2022","permalink":"/tags/kuliah/","section":"Tags","summary":"","title":"kuliah"},{"content":"","date":"1 Juli 2022","permalink":"/authors/muhamadahmadin/","section":"Authors","summary":"","title":"muhamadahmadin"},{"content":"Teknik pengumpulan data merupakan teknik atau metode yang digunakan untuk mengumpulkan data yang akan diteliti. Artinya, teknik pengumpulan data memerlukan langkah yang strategis dan juga sistematis untuk mendapatkan data yang valid dan juga sesuai dengan kenyataannya.\nSelain itu, teknik atau metode pengumpulan data ini biasanya digunakan untuk peneliti demi mengumpulkan data yang merujuk pada satu kata abstrak yang tidak diwujudkan dalam benda, tetapi hanya dapat dilihat penggunaannya. Misalnya adalah melalui angket, wawancara, pengamatan, uji atau tes, dokumentasi, dan lain sebagainya.\nDilakukannya pengumpulan data untuk penelitian agar data dan teori yang ada di dalamnya valid dan juga sesuai kenyataan, sehingga peneliti harus benar-benar terjun langsung dan mengetahui teknik pengumpulan data tersebut. Dengan demikian, peneliti akan mengetahui validitas atau kebenaran konsep penelitiannya.\nSecara umum, teknik pengumpulan data ini digunakan peneliti untuk dapat mengumpulkan data atau informasi berdasarkan fakta pendukung yang ada di lapangan demi keperluan penelitian dan teknik yang dilakukan sangat ditentukan oleh metodologi penelitian yang dipilih oleh peneliti itu sendiri.\nDi dalam melakukan teknik pengumpulan data atau proses mengumpulkan data, keberadaan instrumen penelitian menjadi bagian yang sangat integral dan termasuk ke dalam komponen metodologi penelitian karena instrumen penelitiannya berupa alat yang digunakan untuk mengumpulkan, memeriksa, dan menyelidiki masalah yang diteliti.\nTentu saja, keberadaan instrumen tersebut akan membantu berbagai penelusuran terhadap gejala yang ada pada penelitian sehingga dapat digunakan untuk membuktikan kebenaran atau untuk menyanggah berbagai hipotesis. Oleh sebab itu, instrumen yang digunakan harus memiliki validitas dan reliabilitas yang baik.\nSebelum memulai melakukan teknik pengumpulan data, ada beberapa hal yang harus diperhatikan yaitu:\nData biasanya sudah ditentukan oleh beberapa variabel penelitian. Ketika semua data terkumpul, langkah berikutnya adalah mengolah data, sehingga data yang dikumpulkan memiliki arti karena diolah dengan sistematis. Data yang sudah diolah tersebut dipakai dan dipilih berdasarkan data yang berhubungan atau relevan dengan konsep, kejadian, atau objek penelitian. Datanya bisa berbentuk huruf, angka, simbol, gambar, dan lainnya. Setelah itu, pengumpulan data dilakukan untuk memperoleh informasi yang dibutuhkan dalam rangka mencapai tujuan penelitian yang diungkap dalam bentuk hipotesis yaitu jawaban sementara terhadap pertanyaan penelitian. Data yang sudah dikumpulkan ditentukan oleh berbagai variabel yang ada di dalam hipotesis dan dikumpulkan dalam bentuk sampel yang sudah ditentukan sebelumnya dan sampelnya digunakan untuk menganalisis sasaran penelitian. Proses Pengumpulan Data # Dalam teknik pengumpulan data, tentu saja ada proses yang harus dilakukan. Prosesnya harus terlaksana secara sistematis dan terarah agar data yang dikumpulkan bisa dibuktikan kebenarannya. Karena pada dasarnya, proses pengumpulan data dalam teknik mengumpulkan data ini nanti harus bisa membuktikan hipotesis dari data yang hasilnya sudah dikumpulkan oleh peneliti.\nBerikut ini, ada 8 tahap atau proses yang harus dilakukan sebagai tahapan pengumpulan data:\nTinjau literatur dan konsultasi dengan ahli\nProses atau tahap pertama yang harus dilakukan untuk mengumpulkan data yakni mengumpulkan berbagai informasi yang berhubungan dengan masalah penelitian. Informasi ini diperoleh melalui tinjauan literatur dan konsultasi dengan para ahli sehingga peneliti benar-benar mengerti isu, konsep, dan variabel yang ada di dalam penelitian.\nMempelajari dan melakukan pendekatan terhadap kelompok masyarakat di mana data akan dikumpulkan\nTahap kedua atau proses yang dilakukan setelah tinjauan literatur adalah peneliti harus mempelajari dan melakukan pendekatan terhadap kelompok masyarakat yang kemudian penelitiannya bisa diterima dan juga berkaitan dengan tokoh-tokoh yang bersangkutan.\nMembina dan memanfaatkan hubungan yang baik dengan responden dan lingkungannya\nTahap selanjutnya adalah membina hubungan baik dengan responden dan lingkungannya. Ini termasuk pada mempelajari bagaimana kebiasaan yang dilakukan responden dan cara berpikir mereka, melakukan sesuatu, bahasa yang digunakan, dan lain sebagainya untuk mendukung berlangsungnya penelitian.\nUji coba atau pilot study\nSelanjutnya, tahapan yang harus dilakukan adalah melakukan uji coba instrumen penelitian pada kelompok masyarakat yang merupakan bagian dari populasi, bukan sampel. Maksudnya untuk mengetahui apakah instrumen yang digunakan cukup dipahami, bisa digunakan, komunikatif atau tidak, dan lain sebagainya.\nMerumuskan dan menyusun pertanyaan\nSetelah itu, instrumen yang sudah didapatkan disusun dalam bentuk pertanyaan yang relevan dengan tujuan penelitian. Pertanyaan yang dirumuskan harus mengandung makna yang signifikan dan substantif.\nMencatat dan memberi kode (recording and coding)\nSetelah instrumen penelitian disiapkan, dilakukan pencatatan terhadap data yang dibutuhkan dari setiap responden. Berbagai informasi yang diperoleh ini perlu dicatat guna memudahkan proses analisis.\nCross checking, validitas, dan reliabilitas\nSetelah itu, dilakukan metode cross checking terhadap data yang didapatkan untuk menguji lagi kebenarannya dan memeriksa sehingga tidak ada keraguan terhadap validitas dan reliabilitasnya.\nPengorganisasian dan kode ulang data yang telah terkumpul supaya dapat dianalisis\nTerakhir, setelah data terkumpul, penulis harus melakukan koordinasi terhadap berbagai data yang sudah dikumpulkan, dan Anda bisa mulai menganalisis data tersebut sehingga tidak ada data yang kurang valid.\nTeknik Pengumpulan Data # Setelah memahami pengertian dan juga proses pengumpulan data, selanjutnya akan dijelaskan mengenai berbagai teknik pengumpulan data. Setidaknya ada empat teknik pengumpulan data. Berikut ini merupakan teknik pengumpulan data menurut Sugiyono (2017).\nObservasi\nTeknik observasi artinya melakukan pengamatan dan pencatatan secara sistematis mengenai gejala yang tampak pada objek penelitian. Observasi ini tergolong teknik pengumpulan data yang paling mudah dilakukan dan biasanya juga banyak digunakan untuk statistika survei, misalnya meneliti sikap dan perilaku suatu kelompok masyarakat.\nDengan teknik observasi, peneliti biasanya terjun ke lokasi yang bersangkutan untuk memutuskan alat ukur yang tepat untuk digunakan.\nKuesioner\nTeknik yang kedua adalah kuestioner atau kuesioner yang artinya teknik pengumpulan data dengan cara memberikan seperangkat pertanyaan atau pernyataan kepada orang lain yang berperan sebagai responden agar dapat menjawab pertanyaan dari peneliti. Meski terlihat mudah, teknik ini cukup sulit dilakukan jika jumlah respondennya besar dan tersebar di berbagai wilayah.\nAda beberapa prinsip yang harus diperhatikan saat memilih teknik pengumpulan data kuesioner, yaitu:\nIsi dan tujuan pertanyaannya ditujukan untuk mengukur mana yang harus ada dalam skala yang jelas dan dalam pilihan jawaban. Bahasa yang digunakan harus sesuai dengan kemampuan responden, sehingga tidak mungkin menggunakan bahasa yang penuh dengan istilah asing atau bahasa asing yang tidak dimengerti responden. Tipe dan bentuk pertanyaannya bisa terbuka atau tertutup. Terbuka artinya jawaban yang diberikan bebas, dan tertutup artinya responden hanya boleh memilih jawaban yang sudah disediakan. Interview (Wawancara)\nTeknik wawancara atau interview ini dilakukan secara tatap muka melalui tanya jawab antara peneliti atau pengumpul data dengan responden atau narasumber atau sumber data. Teknik pengumpulan data dengan wawancara biasanya dilakukan sebagai studi pendahuluan, karena teknik ini tidak mungkin dilakukan jika respondennya dalam jumlah besar.\nDocument (Dokumen)\nTeknik pengumpulan data yang terakhir adalah dokumen yang mana peneliti mengambil sumber penelitian atau objek dari dokumen atau catatan dari peristiwa yang sudah berlalu, baik dalam bentuk tulisan, gambar, atau karya monumental dari seseorang. Bisa diambil dari catatan harian, sejarah kehidupan, biografi, peraturan, dan lain sebagainya.\nDaftar Pustaka # Foto oleh Campaign Creator dari Unsplash. Muhamad Ahmadin dari DetikCepat ","date":"1 Juli 2022","permalink":"/lainnya/kuliah/pengumpulan-data/","section":"Lainnyas","summary":"Teknik pengumpulan data merupakan teknik atau metode yang digunakan untuk mengumpulkan data yang akan diteliti.","title":"Pengumpulan Data"},{"content":"Analisis Sistem atau System Analysis adalah suatu teknik atau metode pemecahan masalah dengan cara menguraikan system ke dalam komponen-komponen pembentuknya untuk mengetahui bagaimana komponen-komponen tersebut bekerja dan saling berinteraksi satu sama lain untuk mencapai tujuan system.\nSystem Analysis biasanya dilakukan dalam membuat System Design. System Design adalah salah satu langkah dalam teknik pemecahan masalah dimana komponen-komponen pembentuk system digabungkan sehingga membentuk satu kesatuan system yang utuh. Hasil dari System Design merupakan gambaran system yang sudah diperbaiki. Teknik dari System Design ini meliputi proses penambahan, penghilangan, dan pengubahan komponen-komponen dari system semula.\nLangkah-langkah Analisa Sistem # Langkah-langkah dalam tahap analisa sistem akan hampir sama dengan yang akan langkah-langkah yang akan dilakukan dalam mendefinisikan proyek-proyek sistem yang akan dibesarkan di tahap perencanaan sistem. Perbedaannya terletak pada ruang-ruang lingkup tugasnya. Di analisa sistem ini, penelitian yang akan dilakukan oleh analisis sistem adalah penelitian terinci, sedangkan di perencanaan sistem sifatnya hanya penelitian pendahuluan\nDi dalam tahap analisa sistem terdapat beberapa langkah-langkah dasar yang harus dilakukan oleh analis sistem, sebagai berikut yakni:\nIdentify, merupakan mengidentifikasikan masalah Understand, merupakan memahami kerja dari sistem yang ada Analyze, merupakan menganalisis sistem Report, merupakan membuat laporan hasil analisis Tujuan Analisa Sistem # Tujuan analisis sistem informasi yakni utuk merancang sistem baru maupun menyempurnakan sistem yang sudah ada sebelumnya. Berikut ini, tujuan dari analisis keuangan diantaranya yakni:\nKita dapat Membuat keputusan jika sistem saat ini bermasalah ataupun juga tidak berfungsi dengan baik \u0026amp; hasil analisisnya akan digunakan sebagai dasar untuk memperbaiki sistem. Mengetahui ruang lingkup pekerjaan yang akan dapat ditandatangani. Mengidentifikasi masalah atau mencari pemecah masalahnya. Mempelajari sistem yang sedang berjalan saat ini. Memberikan pelayanan kebutuhan informasi kepada fungsi manajerial di dalam pengendalian pelaksanaan kegiatan operasional perusahaan. Membantu para pengambil keputusan. Mengevaluasi sistem yang telah ada. Merumuskan tujuan yang ingin dicapai berupa pengolahan data maupun pembuatan laporan baru. Menyusun suatu tahap rencana pengembangan sistem. Analisa dan Perancangan Sistem Informasi (ANSI); adalah proses penguraian suatu pokok dan menyelidiki kedaan yang sebenarnya dalam sebuah entitas atau guna mencari indikasi komponen dan unsur-unsur penting dalam membangun sebuah sistem informasi. Analisis PIECES # PIECES adalah singkatan dari Performance (kinerja) berkaitan dengan analisis kemampuan dan kapasitas kerja sistem; Information (informasi) terkait dengan laporan informasi yang dihasilkan sistem; Economy (ekonomi) berkaitan dengan penghematan waktu, keuangan dan tenaga sistem; kontrol terkait dengan keamanan; Efficiency (efisiensi) atau ketepatan fungsi sistem dengan tidak membuang waktu, biaya, ruang dan tenaga; dan Services (layanan) sistem.\nDaftar Pustaka # Foto oleh National Cancer Institute dari Unsplash. Muhamad Ahmadin dari DetikCepat. ","date":"1 Juli 2022","permalink":"/lainnya/kuliah/analisa-sistem/","section":"Lainnyas","summary":"Analisis Sistem atau System Analysis adalah suatu teknik atau metode pemecahan masalah dengan cara menguraikan system ke dalam komponen-komponen pembentuknya untuk mengetahui bagaimana komponen-komponen tersebut bekerja dan saling berinteraksi satu sama lain untuk mencapai tujuan system.","title":"Analisa Sistem"},{"content":"Pengembangan sistem (system development) dapat berarti menyusun suatu sistem yang baru untuk menggantikan sistem yang lama secara keseluruhan atau memperbaiki sistem yang telah ada.\nPerancangan Sistem dapat dibagi dalam 2 bagian, yaitu:\nPerancangan sistem secara umum/perancangan konseptual, perancangan logikal/perancangan secara makro Perancangan sistem terinci/perancangan sistem secara fisik. Sistem yang lama perlu diperbaiki atau diganti disebapkan karena beberapa hal, yaitu sebagai berikut ini:\nKetidakberesan\nKetidakberesan dalam sistem yang lama menyebabkan sistem tidak dapat beroperasi sesuai yang di harapkan. Ketidak beresan ini berupa:\nKecurangan-kecurangan disengaja yang menyebabkan tidak amannya harta kekayaan perusahaan dan kebenaran dari data sehingga kurang menjamin; Kesalahan-kasalahan yang tidak di sengaja yang juga dapat menyebabkan kebenaran dari data kurang terjamin; Tidak efisiennya operasi; Tidak ditaatinya kebijaksanaan manajemen yang telah ditetapkan Pertumbuhan Organisasi\nPertumbuhan organisasi yang menyebabkan harus disusunnya sistem yang baru. Pertumbuhan organisasi diantaranya adalah kebutuhan informasi yang semakin luas, volume pengolahan data semakin maningkat, perubahan prinsip akuntansi yang baru. Karena adanya perubhan ini, maka menyebabkan sistem yang lama tidak efektif lagi, sehingga sistem yang lama sudah tidak dapat memenuhi lagi semua kebutuhan informasi yang dibutuhkan manajemen.\nTahapan Perancangan Sistem # Tahap setelah analisis dari siklus pengembangan sistem Pendefinisian dari kebutuhan-kebutuhan sistem Persiapan untuk rancang bangun implementasi Menggambarkan bagaimana suatu sistem dibentuk Dapat berupa penggambaran, perencanaan dan pembuatan sketsa atau pengaturan dari beberapa elemen yang terpisah ke dalam satu kesatuan yang utuh dan berfungsi. Tujuan Perancangan Sistem # Tujuan dari Perancangan Proses Sistem adalah Untuk menjaga agar proses data lancar dan teratur sehingga menghasilkan informasi yang benar dan Untuk mengawasi proses dari sistem Perancangan\nUntuk memenuhi kebutuhan kepada pemakai sistem Untuk memberikan gambaran yang jelas dan rancang bangun yang lengkap kepada pemrogram komputer (Programmer) dan useryang terlibat Alat dan Teknik Pengembangan Sistem # Untuk dapat melakukan langkah-langkah sesuai dengan yang diberikan oleh metodologi pengembangan sistem yang terstruktur, maka dibutuhkan alat dan teknik untuk melaksanakannya. Alat-alat yang digunakan dalam suatu metodologi umumnya berupa suatu gambar atau diagram atau grafik. Penggunaan diagram atau gambar ini dipandang lebih mengena dan lebih mudah dimengerti seperti kata suatu ungkapan ‚ÄúSuatu gambar bernilai ribuan kata‚Äú. Selain berbentuk gambar, alat-alat yang digunakan juga ada yang tidak berupa gambar atau grafil seperti misalnya data dictionary, structured english, serta formulir-formulir untuk mencatat dan menyajikan data.\nAnalisis Sistem dan Pemrogram # Analis sistem adalah orang yang menganalisis sistem untuk mengidentifikasikan pemecahan yang beralasan. Sebutan lain untuk analis sistem ini adalah analis informasi, analis bisnis, perancang sistem, konsultan sistem dan ahli teknik sistem. Pemrogram adalah orang yang menulis kode program untuk suatu aplikasi tertentu berdasarkan rancang bangun yang telah dibuat oleh analis sistem.\nPengetahuan dan Keahlian yang diperlukan Analis Sistem # Pengetahuan dan keahlian tentang teknik pengolahan data, teknologi komputer dan pemrograman komputer. Pengetahuan tentang bisnis secara umum. Pengetahuan tentang metode kuatitatif. Keahlian pemecahan masalah. Keahlian komunikasi antar personil Keahlian membina hubungan antar personil Tim Pengembangan sistem # Manager analisis sistem Ketua analis sistem Analis sistem senior Analis sistem Analis sistem junior Pemrogram aplikasi junior Pemrogram aplikasi Pemrogram aplikasi junior Daftar Pustaka # Foto oleh charlesdeluvio dari Unsplash. Muhammad Ahmadin dari DetikCepat. ","date":"1 Juli 2022","permalink":"/lainnya/kuliah/tinjauan-umum-pengembangan-sistem/","section":"Lainnyas","summary":"Pengembangan sistem (system development) dapat berarti menyusun suatu sistem yang baru untuk menggantikan sistem yang lama secara keseluruhan atau memperbaiki sistem yang telah ada.","title":"Tinjauan Umum Pengembangan Sistem"},{"content":"Kemarin Saya memposting sebuah video tentang redirection ke website lokal jika Saya ingin membuka YouTube atau media sosial lainnya yang notabene mengurangi waktu produktif. Videonya cukup viral, Saya lihat tulisan ini dibuat sudah ada 66 shares. Karena ada yang minta tutorial, ya sudah Saya buatkan disini üòÖ.\nSebagai catatan saja bahwa ini harus kalian lakukan manual, jadi nggak bisa otomatis apalagi di jam tertentu bisa ngeredirect. Kalian harus punya concern sendiri terhadap jam produktif kalian. Semoga sampai sini kalian paham. Ah iya, barangkali temen-temen disini punya pengalaman buat bikin ekstensi Chrome dengan fungsi yang serupa, PM Saya di Facebook ya. Ntar kita kembangin bareng-bareng.\nOke pertama, kalian harus install ekstensi ini, namanya Redirector. Secara pribadi Saya belum mencoba mencari ekstensi ini untuk Firefox ataupun Edge, nanti kalian cari sendiri. Setelah diinstal, buka ekstensinya. Nanti ada interface seperti ini, kalian klik Edit Redirects.\nNanti kalian akan masuk ke halaman ekstensinya Redirector. Klik Create new redirect. Nanti bakal ada modal yang muncul, kalian isi seperti ini: Penjelasan:\nDescription diisi dengan situs apa yang ingin kalian redirect. Contoh di atas, Facebook. Example URL diisi dengan contoh URL yang kalian ingin redirect, bisa diisi apa saja, tapi secara umum jika parameter Include pattern diisi sama Wildcard, ngeakses https://facebook.com pun bakal diredirect. Include pattern diisi dengan Example URL, bedanya setelah garis miring terakhir pakai Wildcard. Kalian bisa lihat contohnya di ekstensi ini setelah instalasi. Redirect to diisi dengan situs yang kalian ingin tuju. Contohnya saya buat ke http://produktif.test, Saya pake domain .test karena Saya menggunakan Laravel Valet. Kalian bisa isi dengan http://127.0.0.1/\u0026lt;nama_project\u0026gt; atau http://localhost/\u0026lt;nama_project\u0026gt; jika development environment kalian bukan menggunakan Valet. Pattern type bisa kalian pilih Wildcard atau Regex. Jika kalian pilih Wildcard, pastikan Include pattern-nya ada tanda bintang. Jika Regex, kalian harus memahami pattern dari URL yang ingin diredirect. Pattern description diisi dengan deskripsi pattern yang kalian buat. Setelah itu, klik Save.\nKalian bisa import Redirector yang sudah Saya buat, situs yang Saya redirect:\nYouTube Facebook Twitter Instagram Tokopedia (ya, klo gabut Saya sering bolak-balik sini) Unduh Redirector.json.\nUntuk halaman redirectnya sendiri, Saya yakin kalian sudah bisa buat sendiri. Atau jika ingin pakai kode Saya, cek di sini. Setelah semua siap, pastikan Redirectornya nyala ya. Sekian tutorial singkatnya. Semoga membantu, dan terima kasih sudah membaca!\nThumbnail oleh Robert Rugiero dari Unsplash.\n","date":"14 Mei 2022","permalink":"/artikel/cara-membuat-redirect-untuk-situs-tertentu/","section":"Artikel-artikel","summary":"Kemarin Saya memposting sebuah video tentang redirection ke website lokal jika Saya ingin membuka YouTube atau media sosial lainnya yang notabene mengurangi waktu produktif.","title":"Cara Membuat Redirect Untuk Situs Tertentu"},{"content":"","date":"14 Mei 2022","permalink":"/tags/productivity/","section":"Tags","summary":"","title":"productivity"},{"content":"Thumbnail oleh Markus Spiske di Unsplash\nPada saat pengembangan blog ini, Saya ingin menambahkan sebuah fitur view yang digunakan untuk meninjau tulisan mana yang ramai pengunjung/pembaca. Tentunya akan ada dua kasus saat pembuatan view ini:\nPembaca yang terautentikasi (pada saat tulisan ini dibuat, form login belum dibuat), sistem akan mengirimkan user_id ke tabel view. Pembaca yang BELUM terautentikasi/anonim, sistem akan mengirimkan null ke field user_id. Skema migrasi yang Saya buat adalah seperti ini:\nSchema::create(\u0026#39;views\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained()-\u0026gt;nullable(); $table-\u0026gt;foreignId(\u0026#39;blog_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); Testing tahap pertama, ketika User terautentikasi, data view dapat tersimpan dengan baik di database. Tanpa error. Namun Saya tersadar pada saat testing berjalan, session Saya masih ada, dan ketika saya log out, terjadilah error:\nTernyata cara penyelesaiannya cukup simpel, dan tidak membutuhkan waktu lama. Kita hanya perlu mengubah:\n// Sebelum $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained()-\u0026gt;nullable(); // Setelah $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;nullable()-\u0026gt;constrained(); Kode selengkapnya:\nSchema::create(\u0026#39;views\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;nullable()-\u0026gt;constrained(); $table-\u0026gt;foreignId(\u0026#39;blog_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); Terima kasih sudah membaca!\n","date":"23 April 2022","permalink":"/artikel/membuat-relasi-supaya-bisa-di-nullable-pada-laravel/","section":"Artikel-artikel","summary":"Thumbnail oleh Markus Spiske di Unsplash","title":"Membuat Relasi Supaya Bisa di-Nullable Pada Laravel"},{"content":"Tim Laravel telah meluncurkan v9.8, dengan fitur pengaksesan form data dari model Eloquent, log level yang bisa dikustomisasi per-tipe eksekusi, komponen anonim pada path custom, dll.\nForm helper \u0026ldquo;old\u0026rdquo; sekarang bisa menerima model # Andrew Arscott mengubah helper old() sehingga bisa menerima model sebagai argumen keduanya.\n{{-- Dulu --}} \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;, $user-\u0026gt;name) }}\u0026#34; {{-- Sekarang --}} \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;, $user) }} Mengizinkan Penyesuaian Tingkat Log pada Exception Handling # Tom Witkowski mengkontribusikan fitur penyesuaian tingkat log untuk Exception yang dilaporkan pada Exception Handler.\nuse PDOException; use Psr\\Log\\LogLevel; /** * A list of exception types with their corresponding custom log level * * @var array\u0026lt;class-string\u0026lt;\\Throwable\u0026gt;, \\Psr\\Log\\LogLevel::*\u0026gt; */ protected $levels = [ PDOException::class =\u0026gt; LogLevel::CRITICAL ]; Lihat Pull Request #41925 untuk detail implementasi.\nMenemukan Komponen Blade Anonim di Jalur Tambahan # Ralph J. Smit berkontribusi kemampuan untuk menemukan komponen Blade anonim di jalur tambahan:\n// AppServiceProvider.php public function boot() { Blade::anonymousComponentNamespace(\u0026#39;flights.bookings\u0026#39;, \u0026#39;flights\u0026#39;); } Contoh penggunaan komponen: \u0026lt;x-flights::panel :flight=\u0026quot;$flight\u0026quot; /\u0026gt;\nMetode Set pada Factory # Ralph J. Smit mengkontribusikan sebuah metode set() kepada model factory untuk mengatur satu attribut pada model:\n// Sebelum: EloquentModel::factory() -\u0026gt;create([\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;foo\u0026#39;]); // Setelah: EloquentModel::factory() -\u0026gt;set(\u0026#39;name\u0026#39;, \u0026#39;foo\u0026#39;) -\u0026gt;create(); // Sebelum EloquentModel::factory() -\u0026gt;someMethod() -\u0026gt;create([\u0026#39;country\u0026#39; =\u0026gt; \u0026#39;NL\u0026#39;]); // Setelah EloquentModel::factory() -\u0026gt;someMethod() -\u0026gt;set(\u0026#39;country\u0026#39;, \u0026#39;NL\u0026#39;) -\u0026gt;create(); Catatan Peluncuran # Anda bisa melihat daftar fitur baru, perubahan, dan komparasi dari 9.7.0 dan 9.8.0 pada GitHub.\nBerita diambil dan diterjemahkan dari Laravel News.\n","date":"14 April 2022","permalink":"/artikel/laravel-9-8-diluncurkan/","section":"Artikel-artikel","summary":"Tim Laravel telah meluncurkan v9.","title":"Laravel 9 8 Diluncurkan"},{"content":"Secara sederhana suatu sistem dapat diartikan sebagai suatu kumpulan atau himpunan dari unsur, komponen, atau variabel yang terorganisir, saling berinteraksi, saling tergantung satu sama lain, dan terpadu. Salah satu teori mengenai sistem secara umum pertama kali yaitu, teori yang diuraikan oleh Kenneth Boulding terutama menekankan perhatian terhadap setiap bagian yang membentuk sebuah sistem.\nTeori sistem mengatakan bahwa setiap unsur pembentuk organisasi harus mendapat perhatian penuh dari pemimpin organisasi secara merata baik komponen fisik maupun non-fisik.Unsur-unsur yang mewakili suatu sistem secara umum adalah memasukan (input),pengolahan (processing), dan keluaran (output).\nKonsep lain yang terkandung di dalam definisi tentang sistem adalah konsep sinergi. Konsep ini di dalam suatu sistem adalah output dari suatu organisasi di harapkan lebih besar daripada output individual atau output masing-masing bagian.\nKegiatan bersama dari bagian yang terpisah, tetapi saling berhubungan secara bersama-sama akan menghasilkan efek total yang lebih besar daripada jumlah bagian secara individu dan terpisah. Karena itu, sistem organisasi mengutamakan pekerjaan-pekerjaan di dalam tim.\nSelain itu, cara pandang sistem suatu pelaksanaan pekerjaan secara integratif baik menyangkut manusia, perkakas, metode, maupun sumber daya yang dimanfaatkan. Karena itu, ada banyak macam cara untuk mengkategorikan suastu sistem. Seperti: sistem terbuka atau tertutup, sistem manusia, sistem mesin, atau gabungan keduanya, sistem deterministik atau probabilistik dan masih banyak lagi.\nIstilah sistem untuk sekarang ini masih banyak dipakai. Sebuah sistem terdiri atas bagian-bagian atau komponen yang terpadu untuk mencapai suatu tujuan. Model dasar dari bentuk sistem ini adalah adanya masukan, pengolahan, dan keluaran. Akan tetapi, sistem ini dapat dikembangkan hingga menyertakan media penyimpanan. Sistem dapat terbuka dan tertutup, akan tetapi sistem informasi biasanya adalah sistem terbuka yang dapat menerima beberapa masukan dari lingkungan luarnya.\nMelakukan unsur sistem atas subsistem adalah tindakan penting dalam menyederhanakan perancangan sistem. Penggunaan sistem biasanya membutuhkan beberapa mekanisme pemisah untuk mengurangi kerumitan dalam koordinasi dan komunikasi. Pengendalian dalam sistem adalah berdasar kepada umpan balik yang dapat terbuka dan tertutup. Sedangkan penyaringan dapat digunakan untuk persyaratan pengolahan dengan mengurangi masukan. Hukum variasi kebutuhan menjadi penting untuk merancang sistem pengendalian karena menyatakan perlunya suatu metode yang mengadakan tanggapan pengendalian bagi setiap keadaan variable yang terkendali. Rancangan sistem diterapkan dalam tahapan teratur pada analisi sistem dan pada manajemen proyek. Konsep-konsep sistem juga mempunyai penerapan langsung pada perancangan sistem informasi (sisfo).\nKonsep Dasar Informasi # Sistem informasi adalah suatu sistem didalam suatu organisasi yang mempertemukan kebutuhan pengelolaan transaksi harian, mendukung operasi, bersifat manajerial, dan kegiatan strategi dari suatu organisasi dan menyediakan pihak luar tertentu dengan laporan-laporan yang dibutuhkan.\nSistem Informasi (SI) adalah kombinasi dari teknologi informasi dan aktivitas orang yang menggunakan teknologi itu untuk mendukung operasi dan manajemen. Dalam arti yang sangat luas, istilah sistem informasi yang sering digunakan merujuk kepada interaksi antara orang, proses algoritmik, data, dan teknologi. Dalam pengertian ini, istilah ini digunakan untuk merujuk tidak hanya pada penggunaan organisasi teknologi informasi dan komunikasi (TIK), tetapi juga untuk cara di mana orang berinteraksi dengan teknologi ini dalam mendukung proses bisnis.\nAda yang membuat perbedaan yang jelas antara sistem informasi, dan komputer sistem TIK, dan proses bisnis. Sistem informasi yang berbeda dari teknologi informasi dalam sistem informasi biasanya terlihat seperti memiliki komponen TIK. Hal ini terutama berkaitan dengan tujuan pemanfaatan teknologi informasi. Sistem informasi juga berbeda dari proses bisnis. Sistem informasi membantu untuk mengontrol kinerja proses bisnis.\nAlter berpendapat untuk sistem informasi sebagai tipe khusus dari sistem kerja. Sistem kerja adalah suatu sistem di mana manusia dan/atau mesin melakukan pekerjaan dengan menggunakan sumber daya untuk memproduksi produk tertentu dan/atau jasa bagi pelanggan. Sistem informasi adalah suatu sistem kerja yang kegiatannya ditujukan untuk pengolahan (menangkap, transmisi, menyimpan, mengambil, memanipulasi dan menampilkan) informasi\nSistem informasi terdiri dari komponen-komponen yang disebut dengan istilah blok bangunan (building block) yaitu:\nBlok masukkan (input block). Input mewakili data yang masuk ke dalam sistem informasi. Input disini termasuk metode-metode dan media yang digunakan untuk menangkap data yang akan dimasukkan, yang dapat berupa dokumen dasar Blok model (model block). Blok ini terdiri dari kombinasi prosedur, logika dan metode matematik yang akan memanipulasi data input dan data yang tersimpan di basis data dengan cara yang sudah tertentu untuk menghasilkan keluaran yang sudah diinginkan. Blok keluaran (output block)Produk dari sistem informasi adalah keluaran yang merupakan informasi yang berkualitas dan dokumentasi yang berguna untuk semua tingkatan manajemen serta semua pemakai sistem. Blok teknologi (technology block). Teknologi digunakan untuk menerima input, menjalankan model, menyimpan dan mengakses data, menghasilkan dan mengirimkan keluaran dan membantu pengendalian diri secara keseluruhan. Teknologi terdiri dari unsur utama: Teknisi (brainware) Perangkat lunak (software) Perangkat keras (hardware) Blok basis data (database block). Merupakan kumpulan dari data yang saling berhubungan satu dengan yang lainnya, tersimpan diperangkat keras komputer dan digunakan perangkat lunak untuk memanipulasinya. Blok kendali (control block). Banyak faktor yang dapat merusak sistem informasi, misalnya bencana alam, api, temperatur tinggi, air, debu, kecurangan-kecurangan, kejanggalan sistem itu sendiri, kesalahan-kesalahan ketidakefisienan, sabotase dan sebagainya. Beberapa pengendalian perlu dirancang dan diterapkan untuk meyakinkan bahwa hal-hal yang dapat merusak sistem dapat dicegah atau bila terlanjur terjadi kesalahan dapat langsung diatasi. Konsep Dasar Sistem Informasi # Sistem informasi adalah suatu sistem didalam suatu organisasi yang mempertemukan kebutuhan pengelolaan transaksi harian, mendukung operasi, bersifat manajerial, dan kegiatan strategi dari suatu organisasi dan menyediakan pihak luar tertentu dengan laporan-laporan yang dibutuhkan.\nDefinisi sistem informasi adalah suatu sistem di dalam suatu organisasi yang mempertemukan kebutuhan pengolahan transaksi harian yang mendukung operasi bersifat manajerial dan kegiatan strategi dari suatu organisasi dan menyediakan pihak luar tertentu dengan laporan-laporan yang diperlukan.\n","date":"9 April 2022","permalink":"/lainnya/kuliah/konsep-dasar-sistem-informasi/","section":"Lainnyas","summary":"Secara sederhana suatu sistem dapat diartikan sebagai suatu kumpulan atau himpunan dari unsur, komponen, atau variabel yang terorganisir, saling berinteraksi, saling tergantung satu sama lain, dan terpadu.","title":"Konsep Dasar Sistem, Konsep Dasar Informasi, dan Konsep Dasar Sistem Informasi"},{"content":"Privacy Policy for Wayan Polairud Presisi App\nAt Wayan Polairud Presisi App, accessible from our application, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Wayan Polairud Presisi and how we use it.\nIf you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.\nLocation # Wayan Polairud is an app intended for a police sub-group called Dit Polairud. Dit Polairud is a sub-group where they worked mainly managing and securing the seas of a province, in this case, it is Bali. The app itself is generally used in two parts:\nIt‚Äôs for general use, where it doesn‚Äôt need any special permission except the internet, which is used to access weathers information, and the location of a specific spot through webview activity, and;\nFor internal use where all of the personnel‚Äôs activity within the Dit Polairud must be tracked. With the permission of Dir Polairud (the headmaster of Dit Polairud), all of the personnel must be tracked by any means of the way as long as the application is active.\nThe intent of background location will be used to track a sea patrol personnel, where the internet in the ocean is mostly non-existent, we need the offline GPS tracking, saved it to our local storage, and when the application is connected to the internet, the data is pushed to the server.\nEvery personnel who uses this app will receive a popup screen to access the Location permission, by accepting this location access, they have concerns to access the Location service.\nLog Files # Wayan Polairud Presisi App follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services‚Äô analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users‚Äô movement on the website, and gathering demographic information. Our Privacy Policy was created with the help of the Privacy Policy Generator.\nGoogle DoubleClick DART Cookie # Google is one of a third-party vendor on our site. It also uses cookies, known as DART cookies, to serve ads to our site visitors based upon their visit to https://polairud.bali.polri.go.id/ and other sites on the internet. However, visitors may choose to decline the use of DART cookies by visiting the Google ad and content network Privacy Policy at the following URL ‚Äì https://policies.google.com/technologies/ads\nThird-party Privacy Policy # Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on Wayan Polairud Presisi App, which are sent directly to users‚Äô browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.\nNote that Wayan Polairud Presisi App has no access to or control over these cookies that are used by third-party advertisers.\nThird-party Advertisement Policy # Wayan Polairud Presisi App‚Äôs Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options.\nYou can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers‚Äô respective websites.\nChildren Information # Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.\nWayan Polairud Presisi App does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.\n","date":"9 Agustus 2020","permalink":"/privacy-policy/wayan-polairud/","section":"Privacy-policies","summary":"Privacy Policy for Wayan Polairud Presisi App","title":"Wayan Polairud Presisi Privacy Policy"},{"content":"","date":"1 Januari 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]